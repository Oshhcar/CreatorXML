
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package gdato;

import fs.ast.simbolos.Arreglo;
import fs.ast.simbolos.Objeto;
import java.util.Map;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGDato extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymGDato.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGDato() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGDato(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGDato(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\013\000\002\004\012\000\002\005\013" +
    "\000\002\005\012\000\002\006\003\000\002\006\003\000" +
    "\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\011\005\001\002\000\004\002\000\001" +
    "\002\000\004\007\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\010\011\001\002\000" +
    "\004\011\013\001\002\000\004\011\045\001\002\000\004" +
    "\007\014\001\002\000\004\010\015\001\002\000\004\011" +
    "\017\001\002\000\004\011\032\001\002\000\004\007\020" +
    "\001\002\000\004\010\021\001\002\000\010\004\022\005" +
    "\024\006\023\001\002\000\004\011\ufff8\001\002\000\004" +
    "\011\ufff9\001\002\000\004\011\ufffa\001\002\000\004\011" +
    "\026\001\002\000\004\012\027\001\002\000\004\007\030" +
    "\001\002\000\004\010\031\001\002\000\004\011\ufffb\001" +
    "\002\000\006\007\033\012\034\001\002\000\004\010\037" +
    "\001\002\000\004\007\035\001\002\000\004\010\036\001" +
    "\002\000\004\011\ufffd\001\002\000\010\004\022\005\024" +
    "\006\023\001\002\000\004\011\041\001\002\000\004\012" +
    "\042\001\002\000\004\007\043\001\002\000\004\010\044" +
    "\001\002\000\004\011\ufffc\001\002\000\006\007\046\012" +
    "\047\001\002\000\004\010\052\001\002\000\004\007\050" +
    "\001\002\000\004\010\051\001\002\000\004\002\uffff\001" +
    "\002\000\004\011\017\001\002\000\004\011\054\001\002" +
    "\000\006\007\033\012\055\001\002\000\004\007\056\001" +
    "\002\000\004\010\057\001\002\000\004\011\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGDato$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGDato$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGDato$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private int contador = 0;
	
	private Map<Integer, Object> arreglo = new Arreglo();
	
	public Map<Integer, Object> getArreglo(){
		return this.arreglo;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGDato$actions {




  private final SintacticoGDato parser;

  /** Constructor */
  CUP$SintacticoGDato$actions(SintacticoGDato parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGDato$do_action_part00000000(
    int                        CUP$SintacticoGDato$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGDato$parser,
    java.util.Stack            CUP$SintacticoGDato$stack,
    int                        CUP$SintacticoGDato$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGDato$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGDato$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGDato$parser.done_parsing();
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()).right;
		Map<Integer,Object> lista = (Map<Integer,Object>)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.peek()).value;
		
			arreglo = lista;
            System.out.println("gdato OK");
			
		
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA ::= menorque identificador mayorque DATOS menorque diagonal identificador mayorque 
            {
              Map<Integer,Object> RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).right;
		Map<Integer,Object> datos = (Map<Integer,Object>)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).value;
		
			RESULT = datos;
		
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("LISTA",1, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DATOS ::= DATOS menorque identificador mayorque ELEMENTOS menorque diagonal identificador mayorque 
            {
              Map<Integer,Object> RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-8)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-8)).right;
		Map<Integer,Object> datos = (Map<Integer,Object>)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).right;
		Map<String,Object> elementos = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).value;
		
			RESULT = datos;
			RESULT.put(contador++, elementos);
		
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("DATOS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DATOS ::= menorque identificador mayorque ELEMENTOS menorque diagonal identificador mayorque 
            {
              Map<Integer,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).right;
		Map<String,Object> elementos = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).value;
		 
			RESULT = new Arreglo();
			RESULT.put(contador++, elementos);
		
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("DATOS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ELEMENTOS ::= ELEMENTOS menorque identificador mayorque VALOR menorque diagonal identificador mayorque 
            {
              Map<String,Object> RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-8)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-8)).right;
		Map<String,Object> elementos = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).value;
		
				RESULT = elementos;
				RESULT.put(a, valor);
				
			
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENTOS ::= menorque identificador mayorque VALOR menorque diagonal identificador mayorque 
            {
              Map<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-4)).value;
		 
				RESULT = new Objeto();
				RESULT.put(a, valor);
		
			
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.elementAt(CUP$SintacticoGDato$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VALOR ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.peek()).value;
		RESULT = new Integer(a);
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.peek()).value;
		RESULT = new Double(a);
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALOR ::= tstring 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoGDato$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoGDato$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGDato$stack.peek()), RESULT);
            }
          return CUP$SintacticoGDato$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGDato$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGDato$do_action(
    int                        CUP$SintacticoGDato$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGDato$parser,
    java.util.Stack            CUP$SintacticoGDato$stack,
    int                        CUP$SintacticoGDato$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGDato$do_action_part00000000(
                               CUP$SintacticoGDato$act_num,
                               CUP$SintacticoGDato$parser,
                               CUP$SintacticoGDato$stack,
                               CUP$SintacticoGDato$top);
    }
}

}
