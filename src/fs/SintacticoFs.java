
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package fs;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymFs.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\036\003\000\002\036" +
    "\003\000\002\007\005\000\002\007\006\000\002\007\007" +
    "\000\002\006\004\000\002\010\005\000\002\010\003\000" +
    "\002\011\003\000\002\011\005\000\002\011\006\000\002" +
    "\011\007\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\005" +
    "\000\002\013\003\000\002\014\007\000\002\014\010\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\017\005\000\002\017\006\000\002\020\005\000\002\020" +
    "\006\000\002\023\004\000\002\023\003\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\004\000\002\024" +
    "\004\000\002\021\012\000\002\022\002\000\002\022\004" +
    "\000\002\022\006\000\002\025\011\000\002\026\004\000" +
    "\002\026\003\000\002\027\010\000\002\027\007\000\002" +
    "\030\012\000\002\030\011\000\002\031\006\000\002\031" +
    "\004\000\002\032\006\000\002\033\010\000\002\033\010" +
    "\000\002\034\002\000\002\034\003\000\002\035\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\006\000\002\003\010\000\002" +
    "\003\007\000\002\003\003\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\020\010\030\056\004\057\022\060\016\063" +
    "\013\065\021\070\025\001\002\000\004\010\306\001\002" +
    "\000\022\002\ufffe\010\ufffe\056\ufffe\057\ufffe\060\ufffe\063" +
    "\ufffe\065\ufffe\070\ufffe\001\002\000\022\002\ufff7\010\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\063\ufff7\065\ufff7\070\ufff7\001" +
    "\002\000\004\022\305\001\002\000\022\002\000\010\030" +
    "\056\004\057\022\060\016\063\013\065\021\070\025\001" +
    "\002\000\004\022\303\001\002\000\014\051\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\001\002\000\004\016\267\001" +
    "\002\000\004\022\266\001\002\000\014\051\254\052\255" +
    "\053\257\054\260\055\256\001\002\000\004\016\247\001" +
    "\002\000\004\022\246\001\002\000\006\022\245\024\125" +
    "\001\002\000\004\016\222\001\002\000\004\016\216\001" +
    "\002\000\022\002\ufff8\010\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\063\ufff8\065\ufff8\070\ufff8\001\002\000\004\022\215\001" +
    "\002\000\004\010\146\001\002\000\004\022\145\001\002" +
    "\000\004\002\144\001\002\000\020\016\033\024\032\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\001\002\000\022" +
    "\002\ufff6\010\ufff6\056\ufff6\057\ufff6\060\ufff6\063\ufff6\065" +
    "\ufff6\070\ufff6\001\002\000\004\010\140\001\002\000\034" +
    "\004\045\005\042\006\052\007\035\010\055\011\051\012" +
    "\037\013\050\016\034\017\uffba\027\054\030\043\050\036" +
    "\001\002\000\032\004\045\005\042\006\052\007\035\010" +
    "\055\011\051\012\037\013\050\016\034\027\054\030\043" +
    "\050\036\001\002\000\056\015\uffa2\017\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\001\002" +
    "\000\032\004\045\005\042\006\052\007\035\010\055\011" +
    "\051\012\037\013\050\016\034\027\054\030\043\050\036" +
    "\001\002\000\056\015\uff9f\017\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\001\002\000\056" +
    "\015\uff97\017\uff97\021\uff97\022\uff97\023\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\001\002\000\006\017\uffb9\023\133" +
    "\001\002\000\056\015\uffa4\017\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\001\002\000\032" +
    "\004\045\005\042\006\052\007\035\010\055\011\051\012" +
    "\037\013\050\016\034\027\054\030\043\050\036\001\002" +
    "\000\050\017\uffe1\021\uffe1\023\uffe1\026\073\027\077\030" +
    "\066\031\074\032\061\033\060\036\076\037\072\040\062" +
    "\041\100\042\063\043\075\044\067\045\070\046\065\047" +
    "\064\001\002\000\056\015\uffa5\017\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\001\002\000" +
    "\060\015\uff98\017\uff98\021\uff98\022\uff98\023\uff98\024\125" +
    "\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\001\002\000\056\015" +
    "\uff99\017\uff99\021\uff99\022\uff99\023\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\046\uff99\047\uff99\001\002\000\056\015\uff9e\017\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\001\002\000\056\015\uffa0\017\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\001\002\000\056" +
    "\015\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\001\002\000\004\017\124\001\002" +
    "\000\032\004\045\005\042\006\052\007\035\010\055\011" +
    "\051\012\037\013\050\016\034\027\054\030\043\050\036" +
    "\001\002\000\064\015\uffa1\016\033\017\uffa1\020\056\021" +
    "\uffa1\022\uffa1\023\uffa1\024\032\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\001\002\000\032\004\045\005\042\006\052\007" +
    "\035\010\055\011\051\012\037\013\050\016\034\027\054" +
    "\030\043\050\036\001\002\000\044\021\071\026\073\027" +
    "\077\030\066\031\074\032\061\033\060\036\076\037\072" +
    "\040\062\041\100\042\063\043\075\044\067\045\070\046" +
    "\065\047\064\001\002\000\032\004\045\005\042\006\052" +
    "\007\035\010\055\011\051\012\037\013\050\016\034\027" +
    "\054\030\043\050\036\001\002\000\032\004\045\005\042" +
    "\006\052\007\035\010\055\011\051\012\037\013\050\016" +
    "\034\027\054\030\043\050\036\001\002\000\032\004\045" +
    "\005\042\006\052\007\035\010\055\011\051\012\037\013" +
    "\050\016\034\027\054\030\043\050\036\001\002\000\032" +
    "\004\045\005\042\006\052\007\035\010\055\011\051\012" +
    "\037\013\050\016\034\027\054\030\043\050\036\001\002" +
    "\000\032\004\045\005\042\006\052\007\035\010\055\011" +
    "\051\012\037\013\050\016\034\027\054\030\043\050\036" +
    "\001\002\000\032\004\045\005\042\006\052\007\035\010" +
    "\055\011\051\012\037\013\050\016\034\027\054\030\043" +
    "\050\036\001\002\000\032\004\045\005\042\006\052\007" +
    "\035\010\055\011\051\012\037\013\050\016\034\027\054" +
    "\030\043\050\036\001\002\000\032\004\045\005\042\006" +
    "\052\007\035\010\055\011\051\012\037\013\050\016\034" +
    "\027\054\030\043\050\036\001\002\000\032\004\045\005" +
    "\042\006\052\007\035\010\055\011\051\012\037\013\050" +
    "\016\034\027\054\030\043\050\036\001\002\000\060\015" +
    "\uff9c\017\uff9c\021\uff9c\022\uff9c\023\uff9c\024\110\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\001\002\000\056\015\uffaf\017" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\001\002\000\032\004\045\005\042\006\052\007" +
    "\035\010\055\011\051\012\037\013\050\016\034\027\054" +
    "\030\043\050\036\001\002\000\032\004\045\005\042\006" +
    "\052\007\035\010\055\011\051\012\037\013\050\016\034" +
    "\027\054\030\043\050\036\001\002\000\032\004\045\005" +
    "\042\006\052\007\035\010\055\011\051\012\037\013\050" +
    "\016\034\027\054\030\043\050\036\001\002\000\056\015" +
    "\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\001\002\000\032\004\045\005\042\006" +
    "\052\007\035\010\055\011\051\012\037\013\050\016\034" +
    "\027\054\030\043\050\036\001\002\000\032\004\045\005" +
    "\042\006\052\007\035\010\055\011\051\012\037\013\050" +
    "\016\034\027\054\030\043\050\036\001\002\000\056\015" +
    "\uffad\017\uffad\021\uffad\022\uffad\023\uffad\025\uffad\026\uffad" +
    "\027\077\030\066\031\074\032\061\033\060\036\076\037" +
    "\072\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\001\002\000\056\015\uffb5\017\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\074\032\061\033\060\036\076\037\072\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\001\002\000\056\015\uffab\017\uffab\021\uffab\022\uffab\023" +
    "\uffab\025\uffab\026\uffab\027\077\030\066\031\074\032\061" +
    "\033\060\036\076\037\072\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\001\002\000\056" +
    "\015\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\060\036\076" +
    "\037\072\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\001\002\000\044\025\106\026\073" +
    "\027\077\030\066\031\074\032\061\033\060\036\076\037" +
    "\072\040\062\041\100\042\063\043\075\044\067\045\070" +
    "\046\065\047\064\001\002\000\032\004\045\005\042\006" +
    "\052\007\035\010\055\011\051\012\037\013\050\016\034" +
    "\027\054\030\043\050\036\001\002\000\056\015\uff9a\017" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\025\uff9a\026\073\027\077" +
    "\030\066\031\074\032\061\033\060\036\076\037\072\040" +
    "\062\041\100\042\063\043\075\044\067\045\070\046\065" +
    "\047\064\001\002\000\004\010\111\001\002\000\056\015" +
    "\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\001\002\000\056\015\uffa9\017\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9\027\077\030\066" +
    "\031\074\032\061\033\060\036\076\037\072\040\062\041" +
    "\100\042\063\043\075\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\001\002\000\056\015\uffaa\017\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\025\uffaa\026\uffaa\027\077\030\066\031\074\032\061" +
    "\033\060\036\076\037\072\040\062\041\100\042\063\043" +
    "\075\044\uffaa\045\070\046\uffaa\047\uffaa\001\002\000\056" +
    "\015\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\074\032\061\033\060\036\076" +
    "\037\072\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\001\002\000\056\015\uffa8\017\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\025\uffa8\026\uffa8\027\077\030" +
    "\066\031\074\032\061\033\060\036\076\037\072\040\062" +
    "\041\100\042\063\043\075\044\067\045\070\046\uffa8\047" +
    "\uffa8\001\002\000\056\015\uffa7\017\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\025\uffa7\026\uffa7\027\077\030\066\031\074\032" +
    "\061\033\060\036\076\037\072\040\062\041\100\042\063" +
    "\043\075\044\067\045\070\046\065\047\uffa7\001\002\000" +
    "\056\015\uffac\017\uffac\021\uffac\022\uffac\023\uffac\025\uffac" +
    "\026\uffac\027\077\030\066\031\074\032\061\033\060\036" +
    "\076\037\072\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\047\uffac\001\002\000\056\015\uffae\017" +
    "\uffae\021\uffae\022\uffae\023\uffae\025\uffae\026\uffae\027\077" +
    "\030\066\031\074\032\061\033\060\036\076\037\072\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\001\002\000\056\015\uffb2\017\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\060\036\076\037\072\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\001\002" +
    "\000\056\015\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\060" +
    "\036\076\037\072\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\001\002\000\056\015\uffb6" +
    "\017\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\001\002\000\056\015\uffbd\017\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\001" +
    "\002\000\004\010\126\001\002\000\004\016\127\001\002" +
    "\000\034\004\045\005\042\006\052\007\035\010\055\011" +
    "\051\012\037\013\050\016\034\017\uffba\027\054\030\043" +
    "\050\036\001\002\000\004\017\131\001\002\000\060\015" +
    "\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\001\002\000\056\015\uffb7\017" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\001\002\000\032\004\045\005\042\006\052\007" +
    "\035\010\055\011\051\012\037\013\050\016\034\027\054" +
    "\030\043\050\036\001\002\000\050\017\uffe2\021\uffe2\023" +
    "\uffe2\026\073\027\077\030\066\031\074\032\061\033\060" +
    "\036\076\037\072\040\062\041\100\042\063\043\075\044" +
    "\067\045\070\046\065\047\064\001\002\000\056\015\uffa6" +
    "\017\uffa6\021\uffa6\022\uffa6\023\uffa6\025\uffa6\026\uffa6\027" +
    "\077\030\066\031\074\032\061\033\060\036\076\037\072" +
    "\040\062\041\100\042\063\043\075\044\067\045\070\046" +
    "\uffa6\047\uffa6\001\002\000\044\017\137\026\073\027\077" +
    "\030\066\031\074\032\061\033\060\036\076\037\072\040" +
    "\062\041\100\042\063\043\075\044\067\045\070\046\065" +
    "\047\064\001\002\000\056\015\uff9d\017\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\001\002" +
    "\000\072\015\uffb8\016\141\017\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\001\002\000\034\004\045\005" +
    "\042\006\052\007\035\010\055\011\051\012\037\013\050" +
    "\016\034\017\uffba\027\054\030\043\050\036\001\002\000" +
    "\004\017\143\001\002\000\060\015\uffbb\017\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\001\002\000\004\002\001\001\002\000\022\002\ufff9" +
    "\010\ufff9\056\ufff9\057\ufff9\060\ufff9\063\ufff9\065\ufff9\070" +
    "\ufff9\001\002\000\004\016\147\001\002\000\006\017\152" +
    "\056\150\001\002\000\004\010\214\001\002\000\006\017" +
    "\206\023\205\001\002\000\004\014\153\001\002\000\022" +
    "\010\030\056\004\057\022\060\016\061\162\062\154\063" +
    "\013\065\021\001\002\000\032\004\045\005\042\006\052" +
    "\007\035\010\055\011\051\012\037\013\050\016\034\027" +
    "\054\030\043\050\036\001\002\000\024\010\uffcd\015\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\065" +
    "\uffcd\001\002\000\004\022\202\001\002\000\004\022\201" +
    "\001\002\000\024\010\uffd6\015\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\065\uffd6\001\002\000\004" +
    "\022\200\001\002\000\004\022\177\001\002\000\004\022" +
    "\176\001\002\000\006\022\175\024\125\001\002\000\024" +
    "\010\uffce\015\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\065\uffce\001\002\000\004\022\174\001\002" +
    "\000\024\010\030\015\173\056\004\057\022\060\016\061" +
    "\162\062\154\063\013\065\021\001\002\000\004\022\171" +
    "\001\002\000\024\010\uffd1\015\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\065\uffd1\001\002\000\024" +
    "\010\uffd7\015\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\065\uffd7\001\002\000\022\002\uffc0\010\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\063\uffc0\065\uffc0\070\uffc0\001" +
    "\002\000\024\010\uffcc\015\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\065\uffcc\001\002\000\024\010" +
    "\uffcb\015\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\065\uffcb\001\002\000\024\010\uffd4\015\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4" +
    "\001\002\000\024\010\uffd0\015\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\001\002\000\024" +
    "\010\uffd3\015\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\065\uffd3\001\002\000\024\010\uffd2\015\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\065" +
    "\uffd2\001\002\000\024\010\uffd5\015\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065\uffd5\001\002\000" +
    "\044\022\204\026\073\027\077\030\066\031\074\032\061" +
    "\033\060\036\076\037\072\040\062\041\100\042\063\043" +
    "\075\044\067\045\070\046\065\047\064\001\002\000\024" +
    "\010\uffcf\015\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062" +
    "\uffcf\063\uffcf\065\uffcf\001\002\000\004\056\212\001\002" +
    "\000\004\014\207\001\002\000\022\010\030\056\004\057" +
    "\022\060\016\061\162\062\154\063\013\065\021\001\002" +
    "\000\024\010\030\015\211\056\004\057\022\060\016\061" +
    "\162\062\154\063\013\065\021\001\002\000\022\002\uffc1" +
    "\010\uffc1\056\uffc1\057\uffc1\060\uffc1\063\uffc1\065\uffc1\070" +
    "\uffc1\001\002\000\004\010\213\001\002\000\006\017\uffbf" +
    "\023\uffbf\001\002\000\006\017\uffbe\023\uffbe\001\002\000" +
    "\022\002\ufff5\010\ufff5\056\ufff5\057\ufff5\060\ufff5\063\ufff5" +
    "\065\ufff5\070\ufff5\001\002\000\034\004\045\005\042\006" +
    "\052\007\035\010\055\011\051\012\037\013\050\016\034" +
    "\017\217\027\054\030\043\050\036\001\002\000\004\022" +
    "\uffdb\001\002\000\044\017\221\026\073\027\077\030\066" +
    "\031\074\032\061\033\060\036\076\037\072\040\062\041" +
    "\100\042\063\043\075\044\067\045\070\046\065\047\064" +
    "\001\002\000\004\022\uffda\001\002\000\032\004\045\005" +
    "\042\006\052\007\035\010\055\011\051\012\037\013\050" +
    "\016\034\027\054\030\043\050\036\001\002\000\044\017" +
    "\224\026\073\027\077\030\066\031\074\032\061\033\060" +
    "\036\076\037\072\040\062\041\100\042\063\043\075\044" +
    "\067\045\070\046\065\047\064\001\002\000\004\014\225" +
    "\001\002\000\006\066\226\067\230\001\002\000\032\004" +
    "\045\005\042\006\052\007\035\010\055\011\051\012\037" +
    "\013\050\016\034\027\054\030\043\050\036\001\002\000" +
    "\010\015\236\066\226\067\230\001\002\000\004\025\232" +
    "\001\002\000\010\015\uffc4\066\uffc4\067\uffc4\001\002\000" +
    "\004\014\233\001\002\000\022\010\030\056\004\057\022" +
    "\060\016\061\162\062\154\063\013\065\021\001\002\000" +
    "\024\010\030\015\235\056\004\057\022\060\016\061\162" +
    "\062\154\063\013\065\021\001\002\000\010\015\uffc2\066" +
    "\uffc2\067\uffc2\001\002\000\030\002\uffc6\010\uffc6\015\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\065" +
    "\uffc6\070\uffc6\001\002\000\010\015\uffc5\066\uffc5\067\uffc5" +
    "\001\002\000\044\025\241\026\073\027\077\030\066\031" +
    "\074\032\061\033\060\036\076\037\072\040\062\041\100" +
    "\042\063\043\075\044\067\045\070\046\065\047\064\001" +
    "\002\000\004\014\242\001\002\000\022\010\030\056\004" +
    "\057\022\060\016\061\162\062\154\063\013\065\021\001" +
    "\002\000\024\010\030\015\244\056\004\057\022\060\016" +
    "\061\162\062\154\063\013\065\021\001\002\000\010\015" +
    "\uffc3\066\uffc3\067\uffc3\001\002\000\022\002\ufff4\010\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\063\ufff4\065\ufff4\070\ufff4\001" +
    "\002\000\022\002\ufffc\010\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\063\ufffc\065\ufffc\070\ufffc\001\002\000\034\004\045\005" +
    "\042\006\052\007\035\010\055\011\051\012\037\013\050" +
    "\016\034\017\250\027\054\030\043\050\036\001\002\000" +
    "\004\022\uffd9\001\002\000\044\017\252\026\073\027\077" +
    "\030\066\031\074\032\061\033\060\036\076\037\072\040" +
    "\062\041\100\042\063\043\075\044\067\045\070\046\065" +
    "\047\064\001\002\000\004\022\uffd8\001\002\000\034\004" +
    "\045\005\042\006\052\007\035\010\055\011\051\012\037" +
    "\013\050\016\034\020\261\027\054\030\043\050\036\001" +
    "\002\000\036\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\020\uffe7\027" +
    "\uffe7\030\uffe7\050\uffe7\001\002\000\036\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\016\uffe6\020\uffe6\027\uffe6\030\uffe6\050\uffe6\001\002" +
    "\000\036\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\020\uffe3\027\uffe3" +
    "\030\uffe3\050\uffe3\001\002\000\036\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\020\uffe5\027\uffe5\030\uffe5\050\uffe5\001\002\000" +
    "\036\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\027\uffe4\030" +
    "\uffe4\050\uffe4\001\002\000\034\004\045\005\042\006\052" +
    "\007\035\010\055\011\051\012\037\013\050\016\034\021" +
    "\263\027\054\030\043\050\036\001\002\000\044\022\ufff1" +
    "\026\073\027\077\030\066\031\074\032\061\033\060\036" +
    "\076\037\072\040\062\041\100\042\063\043\075\044\067" +
    "\045\070\046\065\047\064\001\002\000\004\022\ufff0\001" +
    "\002\000\006\021\265\023\133\001\002\000\004\022\uffef" +
    "\001\002\000\022\002\ufffb\010\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\063\ufffb\065\ufffb\070\ufffb\001\002\000\032\004\045" +
    "\005\042\006\052\007\035\010\055\011\051\012\037\013" +
    "\050\016\034\027\054\030\043\050\036\001\002\000\044" +
    "\017\271\026\073\027\077\030\066\031\074\032\061\033" +
    "\060\036\076\037\072\040\062\041\100\042\063\043\075" +
    "\044\067\045\070\046\065\047\064\001\002\000\004\014" +
    "\272\001\002\000\022\010\030\056\004\057\022\060\016" +
    "\061\162\062\154\063\013\065\021\001\002\000\024\010" +
    "\030\015\274\056\004\057\022\060\016\061\162\062\154" +
    "\063\013\065\021\001\002\000\032\002\uffc9\010\uffc9\015" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\064\275\065\uffc9\070\uffc9\001\002\000\006\014\277\063" +
    "\013\001\002\000\030\002\uffca\010\uffca\015\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\065\uffca\070" +
    "\uffca\001\002\000\022\010\030\056\004\057\022\060\016" +
    "\061\162\062\154\063\013\065\021\001\002\000\030\002" +
    "\uffc8\010\uffc8\015\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\065\uffc8\070\uffc8\001\002\000\024\010" +
    "\030\015\302\056\004\057\022\060\016\061\162\062\154" +
    "\063\013\065\021\001\002\000\030\002\uffc7\010\uffc7\015" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\065\uffc7\070\uffc7\001\002\000\022\002\ufffa\010\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\063\ufffa\065\ufffa\070\ufffa\001\002" +
    "\000\022\002\uffff\010\uffff\056\uffff\057\uffff\060\uffff\063" +
    "\uffff\065\uffff\070\uffff\001\002\000\022\002\ufffd\010\ufffd" +
    "\056\ufffd\057\ufffd\060\ufffd\063\ufffd\065\ufffd\070\ufffd\001" +
    "\002\000\020\022\uffeb\023\uffeb\051\254\052\255\053\257" +
    "\054\260\055\256\001\002\000\006\022\uffee\023\311\001" +
    "\002\000\006\022\uffec\023\uffec\001\002\000\004\010\312" +
    "\001\002\000\020\022\uffeb\023\uffeb\051\254\052\255\053" +
    "\257\054\260\055\256\001\002\000\006\022\uffed\023\uffed" +
    "\001\002\000\034\004\045\005\042\006\052\007\035\010" +
    "\055\011\051\012\037\013\050\016\034\020\315\027\054" +
    "\030\043\050\036\001\002\000\034\004\045\005\042\006" +
    "\052\007\035\010\055\011\051\012\037\013\050\016\034" +
    "\021\317\027\054\030\043\050\036\001\002\000\046\022" +
    "\uffea\023\uffea\026\073\027\077\030\066\031\074\032\061" +
    "\033\060\036\076\037\072\040\062\041\100\042\063\043" +
    "\075\044\067\045\070\046\065\047\064\001\002\000\006" +
    "\022\uffe9\023\uffe9\001\002\000\006\021\321\023\133\001" +
    "\002\000\006\022\uffe8\023\uffe8\001\002\000\036\004\045" +
    "\005\042\006\052\007\035\010\055\011\051\012\037\013" +
    "\050\014\323\016\034\020\315\027\054\030\043\050\036" +
    "\001\002\000\006\010\325\015\327\001\002\000\006\015" +
    "\333\023\332\001\002\000\004\025\330\001\002\000\006" +
    "\015\uffdd\023\uffdd\001\002\000\004\022\uffe0\001\002\000" +
    "\032\004\045\005\042\006\052\007\035\010\055\011\051" +
    "\012\037\013\050\016\034\027\054\030\043\050\036\001" +
    "\002\000\046\015\uffdc\023\uffdc\026\073\027\077\030\066" +
    "\031\074\032\061\033\060\036\076\037\072\040\062\041" +
    "\100\042\063\043\075\044\067\045\070\046\065\047\064" +
    "\001\002\000\004\010\325\001\002\000\004\022\uffdf\001" +
    "\002\000\006\015\uffde\023\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\040\002\026\004\007\005\004\006\006\007" +
    "\016\014\013\017\010\020\025\021\022\025\005\030\030" +
    "\032\023\033\017\035\011\036\014\001\001\000\006\010" +
    "\306\011\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\303\006\006\007\016\014" +
    "\013\017\010\020\025\021\022\025\005\030\030\032\023" +
    "\033\017\035\011\036\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\043\013\040\032\046\033" +
    "\045\034\052\035\037\001\001\000\012\003\135\032\046" +
    "\033\045\035\037\001\001\000\002\001\001\000\012\003" +
    "\134\032\046\033\045\035\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\131\032\046\033\045\035\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\122\032\046\033\045\035" +
    "\037\001\001\000\002\001\001\000\012\003\056\032\046" +
    "\033\045\035\037\001\001\000\002\001\001\000\012\003" +
    "\121\032\046\033\045\035\037\001\001\000\012\003\120" +
    "\032\046\033\045\035\037\001\001\000\012\003\117\032" +
    "\046\033\045\035\037\001\001\000\012\003\116\032\046" +
    "\033\045\035\037\001\001\000\012\003\115\032\046\033" +
    "\045\035\037\001\001\000\012\003\114\032\046\033\045" +
    "\035\037\001\001\000\012\003\113\032\046\033\045\035" +
    "\037\001\001\000\012\003\112\032\046\033\045\035\037" +
    "\001\001\000\012\003\111\032\046\033\045\035\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\104" +
    "\032\046\033\045\035\037\001\001\000\012\003\103\032" +
    "\046\033\045\035\037\001\001\000\012\003\102\032\046" +
    "\033\045\035\037\001\001\000\002\001\001\000\012\003" +
    "\101\032\046\033\045\035\037\001\001\000\012\003\100" +
    "\032\046\033\045\035\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\106\032\046\033\045\035\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\043\013\040\032\046\033\045\034\127\035" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\133\032\046\033\045\035\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\043\013" +
    "\040\032\046\033\045\034\141\035\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\155\007\162\014\160\017\156\020\167\021\164\023\166" +
    "\024\157\025\154\032\165\033\163\035\011\036\014\001" +
    "\001\000\012\003\202\032\046\033\045\035\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\155\007\162\014\160\017\156\020\167" +
    "\021\164\024\171\025\154\032\165\033\163\035\011\036" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\155\007\162\014\160\017\156\020\167\021\164\023" +
    "\207\024\157\025\154\032\165\033\163\035\011\036\014" +
    "\001\001\000\032\006\155\007\162\014\160\017\156\020" +
    "\167\021\164\024\171\025\154\032\165\033\163\035\011" +
    "\036\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\217\032\046\033\045\035\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\222" +
    "\032\046\033\045\035\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\226\027\230\001\001\000\012" +
    "\003\237\032\046\033\045\035\037\001\001\000\004\027" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\155\007\162\014\160\017\156\020" +
    "\167\021\164\023\233\024\157\025\154\032\165\033\163" +
    "\035\011\036\014\001\001\000\032\006\155\007\162\014" +
    "\160\017\156\020\167\021\164\024\171\025\154\032\165" +
    "\033\163\035\011\036\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\155\007\162\014\160\017\156\020" +
    "\167\021\164\023\242\024\157\025\154\032\165\033\163" +
    "\035\011\036\014\001\001\000\032\006\155\007\162\014" +
    "\160\017\156\020\167\021\164\024\171\025\154\032\165" +
    "\033\163\035\011\036\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\250\032\046" +
    "\033\045\035\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\261\032\046\033\045" +
    "\035\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\043\013\263\032\046\033\045\035\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\267\032\046\033" +
    "\045\035\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\155\007\162\014\160\017\156\020\167\021" +
    "\164\023\272\024\157\025\154\032\165\033\163\035\011" +
    "\036\014\001\001\000\032\006\155\007\162\014\160\017" +
    "\156\020\167\021\164\024\171\025\154\032\165\033\163" +
    "\035\011\036\014\001\001\000\004\022\275\001\001\000" +
    "\004\021\277\001\001\000\002\001\001\000\034\006\155" +
    "\007\162\014\160\017\156\020\167\021\164\023\300\024" +
    "\157\025\154\032\165\033\163\035\011\036\014\001\001" +
    "\000\002\001\001\000\032\006\155\007\162\014\160\017" +
    "\156\020\167\021\164\024\171\025\154\032\165\033\163" +
    "\035\011\036\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\312\001\001\000\004\012\313\001\001\000\002\001\001" +
    "\000\012\003\315\032\046\033\045\035\037\001\001\000" +
    "\014\003\043\013\317\032\046\033\045\035\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\315\032\046\033\045\035\037" +
    "\001\001\000\006\015\323\016\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\330\032\046\033\045\035\037\001\001\000" +
    "\002\001\001\000\004\016\333\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {




  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
            System.out.println("FS OK");
			
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		

				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= OBJETO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPRIMIR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IMPORTAR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SELECCIONA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= LLAMADA_METODO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= LLAMADA_METODOS puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_ACCESO ::= ACCESO_OBJETO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("TIPO_ACCESO",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_ACCESO ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("TIPO_ACCESO",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= TIPO_ACCESO OP_ASIGNACION E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		

			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACION ::= TIPO_ACCESO OP_ASIGNACION corcheteIzquierda corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		

			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACION ::= TIPO_ACCESO OP_ASIGNACION corcheteIzquierda EXS corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		

			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= var_ SEMIDECLARACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		

				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SEMIDECLARACION ::= SEMIDECLARACION coma ASIGNA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		

				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SEMIDECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SEMIDECLARACION ::= ASIGNA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SEMIDECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNA ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
			
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNA ::= identificador OP_ASIGNACION E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNA ::= identificador OP_ASIGNACION corcheteIzquierda corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNA ::= identificador OP_ASIGNACION corcheteIzquierda EXS corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ASIGNACION ::= igual 
            {
              Object RESULT =null;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_ASIGNACION ::= masigual 
            {
              Object RESULT =null;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_ASIGNACION ::= menosigual 
            {
              Object RESULT =null;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_ASIGNACION ::= porigual 
            {
              Object RESULT =null;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_ASIGNACION ::= diagonaligual 
            {
              Object RESULT =null;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXS ::= EXS coma E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXS",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXS ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXS",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OBJETO ::= var_ identificador OP_ASIGNACION llaveIzquierda llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJETO",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OBJETO ::= var_ identificador OP_ASIGNACION llaveIzquierda OBJS llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJETO",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OBJS ::= OBJS coma OBJ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJS",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OBJS ::= OBJ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJS",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OBJ ::= identificador dospuntos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJ",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMPRIMIR ::= imprimir_ parIzquierda parDerecha 
            {
              Object RESULT =null;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMPRIMIR ::= imprimir_ parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMPORTAR ::= importar_ parIzquierda parDerecha 
            {
              Object RESULT =null;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IMPORTAR ::= importar_ parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUES ::= BLOQUES BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUES",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUES ::= BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUES",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= DECLARACION puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= ASIGNACION puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= OBJETO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= IMPRIMIR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= IMPORTAR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= detener_ puntoycoma 
            {
              Object RESULT =null;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= retornar_ E puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= SI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE ::= SELECCIONA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE ::= LLAMADA_METODO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE ::= LLAMADA_METODOS puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SINO ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINO",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SINO ::= sino_ SI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINO",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SINO ::= sino_ llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINO",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SELECCIONA ::= selecciona_ parIzquierda E parDerecha llaveIzquierda CASOS llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SELECCIONA",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASOS ::= CASOS CASO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASOS",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASOS ::= CASO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASOS",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASO ::= caso_ E dospuntos llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
		
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASO ::= defecto_ dospuntos llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
			
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCION ::= funcion_ identificador parIzquierda PARAMETROS parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= funcion_ identificador parIzquierda parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROS ::= PARAMETROS coma var_ identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROS ::= var_ identificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
			
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LLAMADA_METODO ::= identificador parIzquierda PARMS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLAMADA_METODOS ::= LLAMADA_METODOS punto identificador parIzquierda PARMS parDerecha 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODOS",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LLAMADA_METODOS ::= identificador punto identificador parIzquierda PARMS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODOS",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARMS ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARMS",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARMS ::= EXS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARMS",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCESO_OBJETO ::= identificador punto identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
				
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E asterisco E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E diagonal E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E potencia E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E masmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E menosmenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E mayorque E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E menorque E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E igualigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E diferente E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E and E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E or E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= not E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= tstring 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= tchar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= nulo_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= verdadero_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= falso_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= identificador corcheteIzquierda E corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= identificador corcheteIzquierda E corcheteDerecha punto identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E interrogacion E dospuntos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= LLAMADA_METODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= LLAMADA_METODOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= ACCESO_OBJETO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
