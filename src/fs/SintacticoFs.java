
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package fs;

import fs.ast.*;
import fs.ast.expresion.*;
import fs.ast.expresion.operacion.*;
import fs.ast.simbolos.*;
import fs.ast.instruccion.*;
import fs.ast.instruccion.condicionales.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymFs.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\012\005\000\002\012" +
    "\007\000\002\012\012\000\002\012\010\000\002\007\004" +
    "\000\002\010\005\000\002\010\003\000\002\011\003\000" +
    "\002\011\005\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\030" +
    "\005\000\002\030\003\000\002\036\007\000\002\036\005" +
    "\000\002\013\005\000\002\013\006\000\002\003\005\000" +
    "\002\003\006\000\002\014\004\000\002\014\003\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\016\011\000\002\016\012\000\002" +
    "\016\012\000\002\016\013\000\002\017\006\000\002\020" +
    "\013\000\002\020\012\000\002\021\011\000\002\021\012" +
    "\000\002\022\004\000\002\022\003\000\002\023\010\000" +
    "\002\024\007\000\002\025\012\000\002\025\011\000\002" +
    "\026\003\000\002\027\006\000\002\027\004\000\002\032" +
    "\006\000\002\035\010\000\002\035\010\000\002\033\006" +
    "\000\002\034\010\000\002\034\010\000\002\031\002\000" +
    "\002\031\003\000\002\037\004\000\002\037\004\000\002" +
    "\040\003\000\002\040\005\000\002\040\005\000\002\040" +
    "\010\000\002\040\006\000\002\041\004\000\002\041\004" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\004\000\002" +
    "\041\004\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\004\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\005\000\002\041\005" +
    "\000\002\041\010\000\002\041\006\000\002\041\007\000" +
    "\002\041\005\000\002\041\005\000\002\041\004\000\002" +
    "\041\004\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\022\010\030\016\005\056\004\057\020\060" +
    "\014\063\013\065\021\070\025\001\002\000\004\010\u0101" +
    "\001\002\000\036\004\055\005\052\006\061\007\045\010" +
    "\065\011\060\012\047\013\057\014\064\016\043\020\056" +
    "\027\063\030\053\050\046\001\002\000\024\002\ufffe\010" +
    "\ufffe\016\ufffe\056\ufffe\057\ufffe\060\ufffe\063\ufffe\065\ufffe" +
    "\070\ufffe\001\002\000\024\002\ufff8\010\ufff8\016\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\063\ufff8\065\ufff8\070\ufff8\001\002" +
    "\000\004\022\376\001\002\000\024\002\000\010\030\016" +
    "\005\056\004\057\020\060\014\063\013\065\021\070\025" +
    "\001\002\000\004\022\374\001\002\000\004\016\340\001" +
    "\002\000\004\016\334\001\002\000\004\022\333\001\002" +
    "\000\006\036\331\037\332\001\002\000\006\022\330\024" +
    "\252\001\002\000\004\016\324\001\002\000\004\016\277" +
    "\001\002\000\004\022\276\001\002\000\024\002\ufff9\010" +
    "\ufff9\016\ufff9\056\ufff9\057\ufff9\060\ufff9\063\ufff9\065\ufff9" +
    "\070\ufff9\001\002\000\004\022\275\001\002\000\004\010" +
    "\220\001\002\000\004\022\217\001\002\000\004\002\216" +
    "\001\002\000\026\016\041\020\037\024\036\036\uffb4\037" +
    "\uffb4\051\042\052\035\053\033\054\032\055\034\001\002" +
    "\000\024\002\ufff7\010\ufff7\016\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\063\ufff7\065\ufff7\070\ufff7\001\002\000\036\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\016\uffe7\020\uffe7\027\uffe7\030\uffe7\050\uffe7" +
    "\001\002\000\036\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\020\uffe8" +
    "\027\uffe8\030\uffe8\050\uffe8\001\002\000\036\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\016\uffe6\020\uffe6\027\uffe6\030\uffe6\050\uffe6\001" +
    "\002\000\036\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\020\uffe9\027" +
    "\uffe9\030\uffe9\050\uffe9\001\002\000\004\010\203\001\002" +
    "\000\036\004\055\005\052\006\061\007\045\010\065\011" +
    "\060\012\047\013\057\014\064\016\043\020\056\027\063" +
    "\030\053\050\046\001\002\000\036\004\055\005\052\006" +
    "\061\007\045\010\065\011\060\012\047\013\057\014\064" +
    "\016\043\020\056\027\063\030\053\050\046\001\002\000" +
    "\040\004\055\005\052\006\061\007\045\010\065\011\060" +
    "\012\047\013\057\014\064\016\043\017\uffb8\020\056\027" +
    "\063\030\053\050\046\001\002\000\036\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\016\uffea\020\uffea\027\uffea\030\uffea\050\uffea\001\002" +
    "\000\036\004\055\005\052\006\061\007\045\010\065\011" +
    "\060\012\047\013\057\014\064\016\043\020\056\027\063" +
    "\030\053\050\046\001\002\000\060\015\uff8b\017\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\167\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\036\uff8b\037\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\047\uff8b\001\002\000\056\015\uff9a\017\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\001\002" +
    "\000\036\004\055\005\052\006\061\007\045\010\065\011" +
    "\060\012\047\013\057\014\064\016\043\020\056\027\063" +
    "\030\053\050\046\001\002\000\056\015\uff97\017\uff97\021" +
    "\uff97\022\uff97\023\uff97\025\uff97\026\uff97\027\uff97\030\uff97" +
    "\031\uff97\032\uff97\033\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
    "\001\002\000\006\017\uffb7\023\163\001\002\000\056\015" +
    "\uff8c\017\uff8c\021\uff8c\022\uff8c\023\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\036\uff8c\037" +
    "\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\001\002\000\056\015\uff9c\017\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\033\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\001\002\000\036\004\055\005\052\006\061\007\045\010" +
    "\065\011\060\012\047\013\057\014\064\016\043\020\056" +
    "\027\063\030\053\050\046\001\002\000\050\017\uffe4\021" +
    "\uffe4\023\uffe4\026\105\027\111\030\100\031\106\032\073" +
    "\033\072\036\110\037\104\040\075\041\112\042\074\043" +
    "\107\044\101\045\102\046\077\047\076\001\002\000\056" +
    "\015\uff9d\017\uff9d\021\uff9d\022\uff9d\023\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\001\002\000\040\004\055\005\052" +
    "\006\061\007\045\010\065\011\060\012\047\013\057\014" +
    "\064\016\043\020\056\021\160\027\063\030\053\050\046" +
    "\001\002\000\056\015\uff96\017\uff96\021\uff96\022\uff96\023" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\046\uff96\047\uff96\001\002\000\056" +
    "\015\uff98\017\uff98\021\uff98\022\uff98\023\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\001\002\000\056\015\uff9b\017\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\001\002\000\004\017\157\001\002\000\036\004\055" +
    "\005\052\006\061\007\045\010\065\011\060\012\047\013" +
    "\057\014\064\016\043\020\056\027\063\030\053\050\046" +
    "\001\002\000\006\010\145\015\146\001\002\000\064\015" +
    "\uff99\016\067\017\uff99\020\070\021\uff99\022\uff99\023\uff99" +
    "\024\066\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\001\002\000" +
    "\004\010\135\001\002\000\040\004\055\005\052\006\061" +
    "\007\045\010\065\011\060\012\047\013\057\014\064\016" +
    "\043\017\uffb8\020\056\027\063\030\053\050\046\001\002" +
    "\000\036\004\055\005\052\006\061\007\045\010\065\011" +
    "\060\012\047\013\057\014\064\016\043\020\056\027\063" +
    "\030\053\050\046\001\002\000\044\021\103\026\105\027" +
    "\111\030\100\031\106\032\073\033\072\036\110\037\104" +
    "\040\075\041\112\042\074\043\107\044\101\045\102\046" +
    "\077\047\076\001\002\000\036\004\055\005\052\006\061" +
    "\007\045\010\065\011\060\012\047\013\057\014\064\016" +
    "\043\020\056\027\063\030\053\050\046\001\002\000\036" +
    "\004\055\005\052\006\061\007\045\010\065\011\060\012" +
    "\047\013\057\014\064\016\043\020\056\027\063\030\053" +
    "\050\046\001\002\000\036\004\055\005\052\006\061\007" +
    "\045\010\065\011\060\012\047\013\057\014\064\016\043" +
    "\020\056\027\063\030\053\050\046\001\002\000\036\004" +
    "\055\005\052\006\061\007\045\010\065\011\060\012\047" +
    "\013\057\014\064\016\043\020\056\027\063\030\053\050" +
    "\046\001\002\000\036\004\055\005\052\006\061\007\045" +
    "\010\065\011\060\012\047\013\057\014\064\016\043\020" +
    "\056\027\063\030\053\050\046\001\002\000\036\004\055" +
    "\005\052\006\061\007\045\010\065\011\060\012\047\013" +
    "\057\014\064\016\043\020\056\027\063\030\053\050\046" +
    "\001\002\000\036\004\055\005\052\006\061\007\045\010" +
    "\065\011\060\012\047\013\057\014\064\016\043\020\056" +
    "\027\063\030\053\050\046\001\002\000\036\004\055\005" +
    "\052\006\061\007\045\010\065\011\060\012\047\013\057" +
    "\014\064\016\043\020\056\027\063\030\053\050\046\001" +
    "\002\000\036\004\055\005\052\006\061\007\045\010\065" +
    "\011\060\012\047\013\057\014\064\016\043\020\056\027" +
    "\063\030\053\050\046\001\002\000\056\015\uff92\017\uff92" +
    "\021\uff92\022\uff92\023\uff92\025\uff92\026\uff92\027\uff92\030" +
    "\uff92\031\uff92\032\uff92\033\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047" +
    "\uff92\001\002\000\056\015\uffa7\017\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\001\002\000" +
    "\036\004\055\005\052\006\061\007\045\010\065\011\060" +
    "\012\047\013\057\014\064\016\043\020\056\027\063\030" +
    "\053\050\046\001\002\000\036\004\055\005\052\006\061" +
    "\007\045\010\065\011\060\012\047\013\057\014\064\016" +
    "\043\020\056\027\063\030\053\050\046\001\002\000\036" +
    "\004\055\005\052\006\061\007\045\010\065\011\060\012" +
    "\047\013\057\014\064\016\043\020\056\027\063\030\053" +
    "\050\046\001\002\000\056\015\uffa8\017\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\001\002" +
    "\000\036\004\055\005\052\006\061\007\045\010\065\011" +
    "\060\012\047\013\057\014\064\016\043\020\056\027\063" +
    "\030\053\050\046\001\002\000\036\004\055\005\052\006" +
    "\061\007\045\010\065\011\060\012\047\013\057\014\064" +
    "\016\043\020\056\027\063\030\053\050\046\001\002\000" +
    "\056\015\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\025\uffa5" +
    "\026\uffa5\027\111\030\100\031\106\032\073\033\072\036" +
    "\110\037\104\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\001\002\000\056\015\uffad\017" +
    "\uffad\021\uffad\022\uffad\023\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\106\032\073\033\072\036\110\037\104\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\001\002\000\056\015\uffa3\017\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\025\uffa3\026\uffa3\027\111\030\100\031\106" +
    "\032\073\033\072\036\110\037\104\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\001\002" +
    "\000\056\015\uffab\017\uffab\021\uffab\022\uffab\023\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\072" +
    "\036\110\037\104\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\001\002\000\044\025\120" +
    "\026\105\027\111\030\100\031\106\032\073\033\072\036" +
    "\110\037\104\040\075\041\112\042\074\043\107\044\101" +
    "\045\102\046\077\047\076\001\002\000\036\004\055\005" +
    "\052\006\061\007\045\010\065\011\060\012\047\013\057" +
    "\014\064\016\043\020\056\027\063\030\053\050\046\001" +
    "\002\000\056\015\uff91\017\uff91\021\uff91\022\uff91\023\uff91" +
    "\025\uff91\026\105\027\111\030\100\031\106\032\073\033" +
    "\072\036\110\037\104\040\075\041\112\042\074\043\107" +
    "\044\101\045\102\046\077\047\076\001\002\000\056\015" +
    "\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\025\uffa1\026\uffa1" +
    "\027\111\030\100\031\106\032\073\033\072\036\110\037" +
    "\104\040\075\041\112\042\074\043\107\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\001\002\000\056\015\uffa2\017\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\025\uffa2\026\uffa2\027\111\030\100" +
    "\031\106\032\073\033\072\036\110\037\104\040\075\041" +
    "\112\042\074\043\107\044\uffa2\045\102\046\uffa2\047\uffa2" +
    "\001\002\000\056\015\uffac\017\uffac\021\uffac\022\uffac\023" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\106\032\073" +
    "\033\072\036\110\037\104\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\001\002\000\056" +
    "\015\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\025\uffa0\026" +
    "\uffa0\027\111\030\100\031\106\032\073\033\072\036\110" +
    "\037\104\040\075\041\112\042\074\043\107\044\101\045" +
    "\102\046\uffa0\047\uffa0\001\002\000\056\015\uff9f\017\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\025\uff9f\026\uff9f\027\111\030" +
    "\100\031\106\032\073\033\072\036\110\037\104\040\075" +
    "\041\112\042\074\043\107\044\101\045\102\046\077\047" +
    "\uff9f\001\002\000\056\015\uffa6\017\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\025\uffa6\026\uffa6\027\111\030\100\031\106\032" +
    "\073\033\072\036\110\037\104\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\001\002\000" +
    "\056\015\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\025\uffa4" +
    "\026\uffa4\027\111\030\100\031\106\032\073\033\072\036" +
    "\110\037\104\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\001\002\000\056\015\uffaa\017" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\072\036\110\037\104\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\001\002\000\056\015\uffa9\017\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\072\036\110\037\104\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\001\002" +
    "\000\004\017\134\001\002\000\056\015\uffbe\017\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\001\002\000\062\015\uff94\016\136\017\uff94\020\137\021" +
    "\uff94\022\uff94\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\001\002\000\040\004\055\005\052\006\061\007\045\010" +
    "\065\011\060\012\047\013\057\014\064\016\043\017\uffb8" +
    "\020\056\027\063\030\053\050\046\001\002\000\036\004" +
    "\055\005\052\006\061\007\045\010\065\011\060\012\047" +
    "\013\057\014\064\016\043\020\056\027\063\030\053\050" +
    "\046\001\002\000\044\021\141\026\105\027\111\030\100" +
    "\031\106\032\073\033\072\036\110\037\104\040\075\041" +
    "\112\042\074\043\107\044\101\045\102\046\077\047\076" +
    "\001\002\000\056\015\uff93\017\uff93\021\uff93\022\uff93\023" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\001\002\000\004" +
    "\017\143\001\002\000\060\015\uffbc\017\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\001\002\000\006\015\152\023\151\001\002\000\004\025" +
    "\147\001\002\000\056\015\uff8d\017\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\001\002\000" +
    "\036\004\055\005\052\006\061\007\045\010\065\011\060" +
    "\012\047\013\057\014\064\016\043\020\056\027\063\030" +
    "\053\050\046\001\002\000\046\015\uffe2\023\uffe2\026\105" +
    "\027\111\030\100\031\106\032\073\033\072\036\110\037" +
    "\104\040\075\041\112\042\074\043\107\044\101\045\102" +
    "\046\077\047\076\001\002\000\004\010\153\001\002\000" +
    "\056\015\uff8f\017\uff8f\021\uff8f\022\uff8f\023\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\001\002\000\004\025\154\001" +
    "\002\000\036\004\055\005\052\006\061\007\045\010\065" +
    "\011\060\012\047\013\057\014\064\016\043\020\056\027" +
    "\063\030\053\050\046\001\002\000\046\015\uffe3\023\uffe3" +
    "\026\105\027\111\030\100\031\106\032\073\033\072\036" +
    "\110\037\104\040\075\041\112\042\074\043\107\044\101" +
    "\045\102\046\077\047\076\001\002\000\056\015\uffae\017" +
    "\uffae\021\uffae\022\uffae\023\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\001\002\000\004\022\uffbb\001\002\000\056\015" +
    "\uff8e\017\uff8e\021\uff8e\022\uff8e\023\uff8e\025\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\046\uff8e\047\uff8e\001\002\000\006\021\162\023\163\001" +
    "\002\000\056\015\uff90\017\uff90\021\uff90\022\uff90\023\uff90" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\001\002\000\036\004" +
    "\055\005\052\006\061\007\045\010\065\011\060\012\047" +
    "\013\057\014\064\016\043\020\056\027\063\030\053\050" +
    "\046\001\002\000\050\017\uffe5\021\uffe5\023\uffe5\026\105" +
    "\027\111\030\100\031\106\032\073\033\072\036\110\037" +
    "\104\040\075\041\112\042\074\043\107\044\101\045\102" +
    "\046\077\047\076\001\002\000\056\015\uffaf\017\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\001\002\000\056\015\uff9e\017\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\025\uff9e\026\uff9e\027\111\030\100\031\106\032\073" +
    "\033\072\036\110\037\104\040\075\041\112\042\074\043" +
    "\107\044\101\045\102\046\uff9e\047\uff9e\001\002\000\004" +
    "\010\170\001\002\000\004\016\171\001\002\000\040\004" +
    "\055\005\052\006\061\007\045\010\065\011\060\012\047" +
    "\013\057\014\064\016\043\017\uffb8\020\056\027\063\030" +
    "\053\050\046\001\002\000\004\017\173\001\002\000\060" +
    "\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\001\002\000\044\017\175" +
    "\026\105\027\111\030\100\031\106\032\073\033\072\036" +
    "\110\037\104\040\075\041\112\042\074\043\107\044\101" +
    "\045\102\046\077\047\076\001\002\000\056\015\uff95\017" +
    "\uff95\021\uff95\022\uff95\023\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\033\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\001\002\000\044\022\ufff3\026\105\027\111\030" +
    "\100\031\106\032\073\033\072\036\110\037\104\040\075" +
    "\041\112\042\074\043\107\044\101\045\102\046\077\047" +
    "\076\001\002\000\044\021\200\026\105\027\111\030\100" +
    "\031\106\032\073\033\072\036\110\037\104\040\075\041" +
    "\112\042\074\043\107\044\101\045\102\046\077\047\076" +
    "\001\002\000\020\036\uffb0\037\uffb0\051\042\052\035\053" +
    "\033\054\032\055\034\001\002\000\036\004\055\005\052" +
    "\006\061\007\045\010\065\011\060\012\047\013\057\014" +
    "\064\016\043\020\056\027\063\030\053\050\046\001\002" +
    "\000\044\022\ufff0\026\105\027\111\030\100\031\106\032" +
    "\073\033\072\036\110\037\104\040\075\041\112\042\074" +
    "\043\107\044\101\045\102\046\077\047\076\001\002\000" +
    "\024\016\204\020\206\036\uffb2\037\uffb2\051\042\052\035" +
    "\053\033\054\032\055\034\001\002\000\040\004\055\005" +
    "\052\006\061\007\045\010\065\011\060\012\047\013\057" +
    "\014\064\016\043\017\uffb8\020\056\027\063\030\053\050" +
    "\046\001\002\000\036\004\055\005\052\006\061\007\045" +
    "\010\065\011\060\012\047\013\057\014\064\016\043\020" +
    "\056\027\063\030\053\050\046\001\002\000\036\004\055" +
    "\005\052\006\061\007\045\010\065\011\060\012\047\013" +
    "\057\014\064\016\043\020\056\027\063\030\053\050\046" +
    "\001\002\000\044\021\210\026\105\027\111\030\100\031" +
    "\106\032\073\033\072\036\110\037\104\040\075\041\112" +
    "\042\074\043\107\044\101\045\102\046\077\047\076\001" +
    "\002\000\020\036\uffb1\037\uffb1\051\042\052\035\053\033" +
    "\054\032\055\034\001\002\000\036\004\055\005\052\006" +
    "\061\007\045\010\065\011\060\012\047\013\057\014\064" +
    "\016\043\020\056\027\063\030\053\050\046\001\002\000" +
    "\044\022\ufff1\026\105\027\111\030\100\031\106\032\073" +
    "\033\072\036\110\037\104\040\075\041\112\042\074\043" +
    "\107\044\101\045\102\046\077\047\076\001\002\000\044" +
    "\022\ufff2\026\105\027\111\030\100\031\106\032\073\033" +
    "\072\036\110\037\104\040\075\041\112\042\074\043\107" +
    "\044\101\045\102\046\077\047\076\001\002\000\004\017" +
    "\215\001\002\000\006\022\uffb9\024\uffb9\001\002\000\004" +
    "\002\001\001\002\000\024\002\ufffa\010\ufffa\016\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\063\ufffa\065\ufffa\070\ufffa\001\002" +
    "\000\004\016\221\001\002\000\006\017\224\056\223\001" +
    "\002\000\006\017\uffc1\023\272\001\002\000\004\010\271" +
    "\001\002\000\004\014\266\001\002\000\004\017\226\001" +
    "\002\000\004\014\227\001\002\000\024\010\030\016\005" +
    "\056\004\057\020\060\014\061\236\062\230\063\013\065" +
    "\021\001\002\000\036\004\055\005\052\006\061\007\045" +
    "\010\065\011\060\012\047\013\057\014\064\016\043\020" +
    "\056\027\063\030\053\050\046\001\002\000\026\010\uffd4" +
    "\015\uffd4\016\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\065\uffd4\001\002\000\004\022\263\001\002" +
    "\000\004\022\262\001\002\000\026\010\uffdc\015\uffdc\016" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\065\uffdc\001\002\000\004\022\261\001\002\000\004\022" +
    "\260\001\002\000\006\022\253\024\252\001\002\000\004" +
    "\022\251\001\002\000\026\010\uffd5\015\uffd5\016\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065\uffd5" +
    "\001\002\000\004\022\250\001\002\000\026\010\030\015" +
    "\247\016\005\056\004\057\020\060\014\061\236\062\230" +
    "\063\013\065\021\001\002\000\004\022\245\001\002\000" +
    "\026\010\uffd8\015\uffd8\016\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\065\uffd8\001\002\000\026\010" +
    "\uffdd\015\uffdd\016\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\065\uffdd\001\002\000\024\002\uffc3\010" +
    "\uffc3\016\uffc3\056\uffc3\057\uffc3\060\uffc3\063\uffc3\065\uffc3" +
    "\070\uffc3\001\002\000\026\010\uffd3\015\uffd3\016\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3" +
    "\001\002\000\026\010\uffd1\015\uffd1\016\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\065\uffd1\001\002" +
    "\000\004\010\254\001\002\000\026\010\uffd2\015\uffd2\016" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\065\uffd2\001\002\000\004\016\255\001\002\000\040\004" +
    "\055\005\052\006\061\007\045\010\065\011\060\012\047" +
    "\013\057\014\064\016\043\017\uffb8\020\056\027\063\030" +
    "\053\050\046\001\002\000\004\017\257\001\002\000\006" +
    "\022\uffba\024\uffba\001\002\000\026\010\uffd7\015\uffd7\016" +
    "\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7" +
    "\065\uffd7\001\002\000\026\010\uffda\015\uffda\016\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\065\uffda" +
    "\001\002\000\026\010\uffd9\015\uffd9\016\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\065\uffd9\001\002" +
    "\000\026\010\uffdb\015\uffdb\016\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\065\uffdb\001\002\000\044" +
    "\022\265\026\105\027\111\030\100\031\106\032\073\033" +
    "\072\036\110\037\104\040\075\041\112\042\074\043\107" +
    "\044\101\045\102\046\077\047\076\001\002\000\026\010" +
    "\uffd6\015\uffd6\016\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\065\uffd6\001\002\000\024\010\030\016" +
    "\005\056\004\057\020\060\014\061\236\062\230\063\013" +
    "\065\021\001\002\000\026\010\030\015\270\016\005\056" +
    "\004\057\020\060\014\061\236\062\230\063\013\065\021" +
    "\001\002\000\024\002\uffc2\010\uffc2\016\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\063\uffc2\065\uffc2\070\uffc2\001\002\000\006" +
    "\017\uffbf\023\uffbf\001\002\000\004\056\273\001\002\000" +
    "\004\010\274\001\002\000\006\017\uffc0\023\uffc0\001\002" +
    "\000\024\002\ufff6\010\ufff6\016\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\063\ufff6\065\ufff6\070\ufff6\001\002\000\024\002\ufff4" +
    "\010\ufff4\016\ufff4\056\ufff4\057\ufff4\060\ufff4\063\ufff4\065" +
    "\ufff4\070\ufff4\001\002\000\036\004\055\005\052\006\061" +
    "\007\045\010\065\011\060\012\047\013\057\014\064\016" +
    "\043\020\056\027\063\030\053\050\046\001\002\000\044" +
    "\017\301\026\105\027\111\030\100\031\106\032\073\033" +
    "\072\036\110\037\104\040\075\041\112\042\074\043\107" +
    "\044\101\045\102\046\077\047\076\001\002\000\004\014" +
    "\302\001\002\000\004\066\303\001\002\000\036\004\055" +
    "\005\052\006\061\007\045\010\065\011\060\012\047\013" +
    "\057\014\064\016\043\020\056\027\063\030\053\050\046" +
    "\001\002\000\010\015\307\066\303\067\310\001\002\000" +
    "\010\015\uffc6\066\uffc6\067\uffc6\001\002\000\004\015\316" +
    "\001\002\000\032\002\uffc9\010\uffc9\015\uffc9\016\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065\uffc9" +
    "\070\uffc9\001\002\000\004\025\312\001\002\000\010\015" +
    "\uffc7\066\uffc7\067\uffc7\001\002\000\004\014\313\001\002" +
    "\000\024\010\030\016\005\056\004\057\020\060\014\061" +
    "\236\062\230\063\013\065\021\001\002\000\026\010\030" +
    "\015\315\016\005\056\004\057\020\060\014\061\236\062" +
    "\230\063\013\065\021\001\002\000\004\015\uffc4\001\002" +
    "\000\032\002\uffc8\010\uffc8\015\uffc8\016\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\uffc8\070\uffc8" +
    "\001\002\000\044\025\320\026\105\027\111\030\100\031" +
    "\106\032\073\033\072\036\110\037\104\040\075\041\112" +
    "\042\074\043\107\044\101\045\102\046\077\047\076\001" +
    "\002\000\004\014\321\001\002\000\024\010\030\016\005" +
    "\056\004\057\020\060\014\061\236\062\230\063\013\065" +
    "\021\001\002\000\026\010\030\015\323\016\005\056\004" +
    "\057\020\060\014\061\236\062\230\063\013\065\021\001" +
    "\002\000\010\015\uffc5\066\uffc5\067\uffc5\001\002\000\040" +
    "\004\055\005\052\006\061\007\045\010\065\011\060\012" +
    "\047\013\057\014\064\016\043\017\326\020\056\027\063" +
    "\030\053\050\046\001\002\000\044\017\327\026\105\027" +
    "\111\030\100\031\106\032\073\033\072\036\110\037\104" +
    "\040\075\041\112\042\074\043\107\044\101\045\102\046" +
    "\077\047\076\001\002\000\004\022\uffe1\001\002\000\004" +
    "\022\uffe0\001\002\000\024\002\ufff5\010\ufff5\016\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\063\ufff5\065\ufff5\070\ufff5\001\002" +
    "\000\004\022\uffb6\001\002\000\004\022\uffb5\001\002\000" +
    "\024\002\ufffc\010\ufffc\016\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\063\ufffc\065\ufffc\070\ufffc\001\002\000\040\004\055\005" +
    "\052\006\061\007\045\010\065\011\060\012\047\013\057" +
    "\014\064\016\043\017\336\020\056\027\063\030\053\050" +
    "\046\001\002\000\044\017\337\026\105\027\111\030\100" +
    "\031\106\032\073\033\072\036\110\037\104\040\075\041" +
    "\112\042\074\043\107\044\101\045\102\046\077\047\076" +
    "\001\002\000\004\022\uffdf\001\002\000\004\022\uffde\001" +
    "\002\000\036\004\055\005\052\006\061\007\045\010\065" +
    "\011\060\012\047\013\057\014\064\016\043\020\056\027" +
    "\063\030\053\050\046\001\002\000\044\017\342\026\105" +
    "\027\111\030\100\031\106\032\073\033\072\036\110\037" +
    "\104\040\075\041\112\042\074\043\107\044\101\045\102" +
    "\046\077\047\076\001\002\000\004\014\343\001\002\000" +
    "\024\010\030\016\005\056\004\057\020\060\014\061\236" +
    "\062\230\063\013\065\021\001\002\000\026\010\030\015" +
    "\345\016\005\056\004\057\020\060\014\061\236\062\230" +
    "\063\013\065\021\001\002\000\034\002\uffd0\010\uffd0\015" +
    "\uffd0\016\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\346\065\uffd0\070\uffd0\001\002\000\006\014" +
    "\353\063\365\001\002\000\032\002\uffcf\010\uffcf\015\uffcf" +
    "\016\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\065\uffcf\070\uffcf\001\002\000\034\002\uffce\010\uffce" +
    "\015\uffce\016\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\351\065\uffce\070\uffce\001\002\000\006" +
    "\014\353\063\354\001\002\000\032\002\uffcd\010\uffcd\015" +
    "\uffcd\016\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\063\uffcd\065\uffcd\070\uffcd\001\002\000\024\010\030\016" +
    "\005\056\004\057\020\060\014\061\236\062\230\063\013" +
    "\065\021\001\002\000\004\016\355\001\002\000\036\004" +
    "\055\005\052\006\061\007\045\010\065\011\060\012\047" +
    "\013\057\014\064\016\043\020\056\027\063\030\053\050" +
    "\046\001\002\000\044\017\357\026\105\027\111\030\100" +
    "\031\106\032\073\033\072\036\110\037\104\040\075\041" +
    "\112\042\074\043\107\044\101\045\102\046\077\047\076" +
    "\001\002\000\004\014\360\001\002\000\024\010\030\016" +
    "\005\056\004\057\020\060\014\061\236\062\230\063\013" +
    "\065\021\001\002\000\026\010\030\015\362\016\005\056" +
    "\004\057\020\060\014\061\236\062\230\063\013\065\021" +
    "\001\002\000\034\002\uffcb\010\uffcb\015\uffcb\016\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\070\uffcb\001\002\000\026\010\030\015\364\016" +
    "\005\056\004\057\020\060\014\061\236\062\230\063\013" +
    "\065\021\001\002\000\032\002\uffcc\010\uffcc\015\uffcc\016" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\065\uffcc\070\uffcc\001\002\000\004\016\366\001\002\000" +
    "\036\004\055\005\052\006\061\007\045\010\065\011\060" +
    "\012\047\013\057\014\064\016\043\020\056\027\063\030" +
    "\053\050\046\001\002\000\044\017\370\026\105\027\111" +
    "\030\100\031\106\032\073\033\072\036\110\037\104\040" +
    "\075\041\112\042\074\043\107\044\101\045\102\046\077" +
    "\047\076\001\002\000\004\014\371\001\002\000\024\010" +
    "\030\016\005\056\004\057\020\060\014\061\236\062\230" +
    "\063\013\065\021\001\002\000\026\010\030\015\373\016" +
    "\005\056\004\057\020\060\014\061\236\062\230\063\013" +
    "\065\021\001\002\000\034\002\uffca\010\uffca\015\uffca\016" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\070\uffca\001\002\000\024\002\ufffb\010" +
    "\ufffb\016\ufffb\056\ufffb\057\ufffb\060\ufffb\063\ufffb\065\ufffb" +
    "\070\ufffb\001\002\000\024\002\uffff\010\uffff\016\uffff\056" +
    "\uffff\057\uffff\060\uffff\063\uffff\065\uffff\070\uffff\001\002" +
    "\000\024\002\ufffd\010\ufffd\016\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\063\ufffd\065\ufffd\070\ufffd\001\002\000\044\017\u0100" +
    "\026\105\027\111\030\100\031\106\032\073\033\072\036" +
    "\110\037\104\040\075\041\112\042\074\043\107\044\101" +
    "\045\102\046\077\047\076\001\002\000\006\036\uffb3\037" +
    "\uffb3\001\002\000\020\022\uffec\023\uffec\051\042\052\035" +
    "\053\033\054\032\055\034\001\002\000\006\022\uffef\023" +
    "\u0104\001\002\000\006\022\uffed\023\uffed\001\002\000\004" +
    "\010\u0101\001\002\000\006\022\uffee\023\uffee\001\002\000" +
    "\036\004\055\005\052\006\061\007\045\010\065\011\060" +
    "\012\047\013\057\014\064\016\043\020\056\027\063\030" +
    "\053\050\046\001\002\000\046\022\uffeb\023\uffeb\026\105" +
    "\027\111\030\100\031\106\032\073\033\072\036\110\037" +
    "\104\040\075\041\112\042\074\043\107\044\101\045\102" +
    "\046\077\047\076\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\036\002\026\003\025\004\010\005\005\007" +
    "\007\012\014\013\011\016\022\021\006\025\030\033\023" +
    "\034\016\037\021\040\015\001\001\000\006\010\u0101\011" +
    "\u0102\001\001\000\010\032\050\035\043\041\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\025\005\374\007\007\012\014\013\011\016\022" +
    "\021\006\025\030\033\023\034\016\037\021\040\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\050" +
    "\035\043\041\176\001\001\000\010\032\050\035\043\041" +
    "\175\001\001\000\014\030\047\031\061\032\050\035\043" +
    "\041\053\001\001\000\002\001\001\000\010\032\050\035" +
    "\043\041\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\050\035\043\041\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\050\035\043\041\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\160\032\050\035\043" +
    "\041\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\050\035\043" +
    "\041\155\001\001\000\004\036\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\030\047\031\132\032\050" +
    "\035\043\041\053\001\001\000\010\032\050\035\043\041" +
    "\070\001\001\000\002\001\001\000\010\032\050\035\043" +
    "\041\131\001\001\000\010\032\050\035\043\041\130\001" +
    "\001\000\010\032\050\035\043\041\127\001\001\000\010" +
    "\032\050\035\043\041\126\001\001\000\010\032\050\035" +
    "\043\041\125\001\001\000\010\032\050\035\043\041\124" +
    "\001\001\000\010\032\050\035\043\041\123\001\001\000" +
    "\010\032\050\035\043\041\122\001\001\000\010\032\050" +
    "\035\043\041\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\050\035\043\041\116\001\001\000\010" +
    "\032\050\035\043\041\115\001\001\000\010\032\050\035" +
    "\043\041\114\001\001\000\002\001\001\000\010\032\050" +
    "\035\043\041\113\001\001\000\010\032\050\035\043\041" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\050\035\043\041\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\047\031\141" +
    "\032\050\035\043\041\053\001\001\000\010\032\050\035" +
    "\043\041\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\050\035\043" +
    "\041\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\050\035\043" +
    "\041\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\050\035\043\041\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\030\047\031\171\032" +
    "\050\035\043\041\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\200\001\001\000\010" +
    "\032\050\035\043\041\201\001\001\000\002\001\001\000" +
    "\004\006\204\001\001\000\014\030\047\031\213\032\050" +
    "\035\043\041\053\001\001\000\010\032\050\035\043\041" +
    "\212\001\001\000\010\032\050\035\043\041\206\001\001" +
    "\000\002\001\001\000\004\006\210\001\001\000\010\032" +
    "\050\035\043\041\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\224" +
    "\027\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\243\007\231\012\234\013\232\014\242\015\233\016" +
    "\240\021\230\033\241\034\236\037\237\040\015\001\001" +
    "\000\010\032\050\035\043\041\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\243\007\231\012\234\013\232\015\245\016\240\021" +
    "\230\033\241\034\236\037\237\040\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\047\031" +
    "\255\032\050\035\043\041\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\243\007\231\012\234\013\232\014" +
    "\266\015\233\016\240\021\230\033\241\034\236\037\237" +
    "\040\015\001\001\000\030\003\243\007\231\012\234\013" +
    "\232\015\245\016\240\021\230\033\241\034\236\037\237" +
    "\040\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\050\035\043\041" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\303\023\304\001\001\000\010\032\050\035\043\041" +
    "\316\001\001\000\006\023\310\024\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\243" +
    "\007\231\012\234\013\232\014\313\015\233\016\240\021" +
    "\230\033\241\034\236\037\237\040\015\001\001\000\030" +
    "\003\243\007\231\012\234\013\232\015\245\016\240\021" +
    "\230\033\241\034\236\037\237\040\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\243\007\231\012\234\013\232\014\321" +
    "\015\233\016\240\021\230\033\241\034\236\037\237\040" +
    "\015\001\001\000\030\003\243\007\231\012\234\013\232" +
    "\015\245\016\240\021\230\033\241\034\236\037\237\040" +
    "\015\001\001\000\002\001\001\000\010\032\050\035\043" +
    "\041\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\050\035\043\041" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\050\035\043\041\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\243\007\231" +
    "\012\234\013\232\014\343\015\233\016\240\021\230\033" +
    "\241\034\236\037\237\040\015\001\001\000\030\003\243" +
    "\007\231\012\234\013\232\015\245\016\240\021\230\033" +
    "\241\034\236\037\237\040\015\001\001\000\006\017\346" +
    "\020\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\243\007\231\012\234\013\232\014\362\015" +
    "\233\016\240\021\230\033\241\034\236\037\237\040\015" +
    "\001\001\000\002\001\001\000\010\032\050\035\043\041" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\243\007\231\012\234\013\232\014\360\015\233\016" +
    "\240\021\230\033\241\034\236\037\237\040\015\001\001" +
    "\000\030\003\243\007\231\012\234\013\232\015\245\016" +
    "\240\021\230\033\241\034\236\037\237\040\015\001\001" +
    "\000\002\001\001\000\030\003\243\007\231\012\234\013" +
    "\232\015\245\016\240\021\230\033\241\034\236\037\237" +
    "\040\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\050\035\043\041\366\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\243\007\231\012\234\013" +
    "\232\014\371\015\233\016\240\021\230\033\241\034\236" +
    "\037\237\040\015\001\001\000\030\003\243\007\231\012" +
    "\234\013\232\015\245\016\240\021\230\033\241\034\236" +
    "\037\237\040\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0104\001\001\000\002" +
    "\001\001\000\010\032\050\035\043\041\u0106\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private AST ast;
	
	public AST getAST(){
		return ast;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {




  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
			parser.ast = new AST(a);
            System.out.println("FS OK");
			
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPORTAR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Si a = (Si)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SELECCIONA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Selecciona a = (Selecciona)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= LLAMADA_METODO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LlamadaMetodo a = (LlamadaMetodo)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= LLAMADA_METODOS puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LlamadaMetodos a = (LlamadaMetodos)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= UNARIO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Unario a = (Unario)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		 RESULT = new Asignacion(a, b, c, aleft+1, aright+1); 
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= identificador punto identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AsignacionObjeto(a, b, c, d, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= identificador punto identificador corcheteIzquierda E corcheteDerecha OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AsignacionObjeto(a, b, c, d, e, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACION ::= identificador corcheteIzquierda E corcheteDerecha OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AsignacionArreglo(a, b, c, d, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= var_ SEMIDECLARACION 
            {
              Declaracion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<Asignacion> a = (LinkedList<Asignacion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Declaracion(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SEMIDECLARACION ::= SEMIDECLARACION coma ASIGNA 
            {
              LinkedList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<Asignacion> a = (LinkedList<Asignacion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Asignacion b = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SEMIDECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SEMIDECLARACION ::= ASIGNA 
            {
              LinkedList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SEMIDECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNA ::= identificador 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Asignacion(a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNA ::= identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Asignacion(a, "=", c, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_ASIGNACION ::= igual 
            {
              String RESULT =null;
		RESULT="=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ASIGNACION ::= masigual 
            {
              String RESULT =null;
		RESULT="+=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ASIGNACION ::= menosigual 
            {
              String RESULT =null;
		RESULT="-=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ASIGNACION ::= porigual 
            {
              String RESULT =null;
		RESULT="*=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_ASIGNACION ::= diagonaligual 
            {
              String RESULT =null;
		RESULT="/=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXS ::= EXS coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXS",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXS ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXS",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OBJS ::= OBJS coma identificador dospuntos E 
            {
              Map<String,Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Map<String,Expresion> a = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.put(b, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJS",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OBJS ::= identificador dospuntos E 
            {
              Map<String,Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new HashMap<String, Expresion>(); RESULT.put(a, b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJS",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMPRIMIR ::= imprimir_ parIzquierda parDerecha 
            {
              Imprimir RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		RESULT = new Imprimir(null, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMPRIMIR ::= imprimir_ parIzquierda E parDerecha 
            {
              Imprimir RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Imprimir(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPORTAR ::= importar_ parIzquierda parDerecha 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPORTAR ::= importar_ parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUES ::= BLOQUES BLOQUE 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUES",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUES ::= BLOQUE 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUES",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= DECLARACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= ASIGNACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= IMPRIMIR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= IMPORTAR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= detener_ puntoycoma 
            {
              NodoAST RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Detener(xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= retornar_ E puntoycoma 
            {
              NodoAST RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Retornar(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= SI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Si a = (Si)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= SELECCIONA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Selecciona a = (Selecciona)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= LLAMADA_METODO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LlamadaMetodo a = (LlamadaMetodo)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= LLAMADA_METODOS puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LlamadaMetodos a = (LlamadaMetodos)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= UNARIO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Unario a = (Unario)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Si(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINO 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		SubSi c = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINOSI 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<SubSi> c = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINOSI SINO 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<SubSi> c = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		SubSi d = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c, d);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SINO ::= sino_ llaveIzquierda BLOQUES llaveDerecha 
            {
              SubSi RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new SubSi(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINO",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SINOSI ::= SINOSI sino_ si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              LinkedList<SubSi> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).right;
		LinkedList<SubSi> a = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a; RESULT.add(new SubSi(b, c, xleft+1, xright+1));
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINOSI",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SINOSI ::= sino_ si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              LinkedList<SubSi> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(new SubSi(a, b, xleft+1, xright+1));
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINOSI",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SELECCIONA ::= selecciona_ parIzquierda E parDerecha llaveIzquierda CASOS llaveDerecha 
            {
              Selecciona RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Selecciona(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SELECCIONA ::= selecciona_ parIzquierda E parDerecha llaveIzquierda CASOS DEFECTO llaveDerecha 
            {
              Selecciona RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		b.add(c); RESULT = new Selecciona(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASOS",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASOS",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASO ::= caso_ E dospuntos llaveIzquierda BLOQUES llaveDerecha 
            {
              Caso RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Caso(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASO",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DEFECTO ::= defecto_ dospuntos llaveIzquierda BLOQUES llaveDerecha 
            {
              Caso RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Caso(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("DEFECTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= funcion_ identificador parIzquierda PARAMETROS parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Funcion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Funcion(a, b, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION ::= funcion_ identificador parIzquierda parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Funcion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Funcion(a, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETRO ::= PARAMETRO coma var_ identificador 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETRO",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETRO ::= var_ identificador 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETRO",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LLAMADA_FUNCION ::= identificador parIzquierda PARMS parDerecha 
            {
              LlamadaFuncion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
						if(b != null){
							RESULT = new LlamadaFuncion(a, b, aleft+1, aright+1);
						} else {
							RESULT = new LlamadaFuncion(a, aleft+1, aright+1);
						}
					
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LLAMADA_FUNCIONES ::= LLAMADA_FUNCIONES punto identificador parIzquierda PARMS parDerecha 
            {
              LlamadaFunciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		LlamadaFunciones a = (LlamadaFunciones)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a; RESULT.add(b, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLAMADA_FUNCIONES ::= identificador punto identificador parIzquierda PARMS parDerecha 
            {
              LlamadaFunciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new LlamadaFunciones(a, aleft+1, aright+1); RESULT.add(b, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LLAMADA_METODO ::= identificador parIzquierda PARMS parDerecha 
            {
              LlamadaMetodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
						if(b != null){
							RESULT = new LlamadaMetodo(a, b, aleft+1, aright+1);
						} else {
							RESULT = new LlamadaMetodo(a, b, aleft+1, aright+1);
						}
					
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LLAMADA_METODOS ::= LLAMADA_METODOS punto identificador parIzquierda PARMS parDerecha 
            {
              LlamadaMetodos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		LlamadaMetodos a = (LlamadaMetodos)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a; RESULT.add(b, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODOS",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LLAMADA_METODOS ::= identificador punto identificador parIzquierda PARMS parDerecha 
            {
              LlamadaMetodos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new LlamadaMetodos(a, aleft+1, aright+1); RESULT.add(b, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODOS",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARMS ::= 
            {
              LinkedList<Expresion> RESULT =null;
		RESULT=null;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARMS",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARMS ::= EXS 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARMS",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UNARIO ::= EXP_UNARIO masmas 
            {
              Unario RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Unario(a, Operacion.Operador.AUMENTO, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("UNARIO",29, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UNARIO ::= EXP_UNARIO menosmenos 
            {
              Unario RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Unario(a, Operacion.Operador.DECREMENTO, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("UNARIO",29, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP_UNARIO ::= identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Identificador(a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXP_UNARIO",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP_UNARIO ::= parIzquierda E parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXP_UNARIO",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP_UNARIO ::= identificador punto identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AccesoObjeto(a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXP_UNARIO",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP_UNARIO ::= identificador punto identificador corcheteIzquierda E corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new AccesoObjeto(a, b, c, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXP_UNARIO",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP_UNARIO ::= identificador corcheteIzquierda E corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new AccesoArreglo(a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXP_UNARIO",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= menos E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.MENOS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= mas E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.MAS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.MAS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.MENOS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E asterisco E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.ASTERISCO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E diagonal E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.BARRA, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.INTERCALACION, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.AUMENTO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.DECREMENTO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MAYORQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MENORQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MAYORIGUALQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MENORIGUALQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.IGUAL, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.DIFERENTE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, b, Operacion.Operador.AND, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, b, Operacion.Operador.OR, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= not E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= tstring 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.CADENA, a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= tchar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.CADENA, a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.ENTERO, new Integer(a), aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.DECIMAL, new Double(a), aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Identificador(a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= nulo_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.NULL, "nulo", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= verdadero_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.BOOLEANO, "verdadero", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= falso_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.BOOLEANO, "falso", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= parIzquierda E parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= identificador punto identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AccesoObjeto(a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= identificador punto identificador corcheteIzquierda E corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new AccesoObjeto(a, b, c, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= identificador corcheteIzquierda E corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new AccesoArreglo(a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Ternario(a, b, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= corcheteIzquierda EXS corcheteDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.ARREGLO, a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= llaveIzquierda OBJS llaveDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Map<String,Expresion> a = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.OBJETO, a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= corcheteIzquierda corcheteDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.ARREGLO, null, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= llaveIzquierda llaveDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.OBJETO, null, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LlamadaFuncion a = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= LLAMADA_FUNCIONES 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LlamadaFunciones a = (LlamadaFunciones)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
