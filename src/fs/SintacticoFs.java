
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package fs;

import fs.ast.instruccion.Detener;
import fs.ast.*;
import fs.ast.expresion.*;
import fs.ast.expresion.operacion.*;
import fs.ast.simbolos.*;
import fs.ast.instruccion.*;
import fs.ast.instruccion.condicionales.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymFs.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\013\005\000\002\013" +
    "\007\000\002\013\012\000\002\013\010\000\002\010\004" +
    "\000\002\011\005\000\002\011\003\000\002\012\003\000" +
    "\002\012\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\031" +
    "\005\000\002\031\003\000\002\034\007\000\002\034\005" +
    "\000\002\014\005\000\002\014\006\000\002\003\005\000" +
    "\002\003\006\000\002\015\004\000\002\015\003\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\011\000\002\017\012\000\002" +
    "\017\012\000\002\017\013\000\002\020\006\000\002\021" +
    "\013\000\002\021\012\000\002\022\011\000\002\022\012" +
    "\000\002\023\004\000\002\023\003\000\002\024\010\000" +
    "\002\025\007\000\002\026\012\000\002\026\011\000\002" +
    "\027\003\000\002\030\006\000\002\030\004\000\002\033" +
    "\006\000\002\004\010\000\002\004\010\000\002\032\002" +
    "\000\002\032\003\000\002\035\004\000\002\035\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\004\000\002\036\004\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\004\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\005\000\002\036\005\000\002\036\010\000\002" +
    "\036\006\000\002\036\007\000\002\036\005\000\002\036" +
    "\005\000\002\036\004\000\002\036\004\000\002\036\003" +
    "\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\052\004\022\005\020\006\035\007\007\010" +
    "\044\011\036\012\011\013\034\014\042\016\005\020\030" +
    "\027\037\030\021\050\010\056\004\057\026\060\017\063" +
    "\016\065\027\070\040\001\002\000\004\010\363\001\002" +
    "\000\036\004\022\005\020\006\035\007\007\010\064\011" +
    "\036\012\011\013\034\014\042\016\005\020\030\027\037" +
    "\030\021\050\010\001\002\000\054\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\016\ufffe\020\ufffe\027\ufffe\030\ufffe\050\ufffe\056" +
    "\ufffe\057\ufffe\060\ufffe\063\ufffe\065\ufffe\070\ufffe\001\002" +
    "\000\056\015\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\025" +
    "\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\001\002\000\036\004\022" +
    "\005\020\006\035\007\007\010\064\011\036\012\011\013" +
    "\034\014\042\016\005\020\030\027\037\030\021\050\010" +
    "\001\002\000\056\015\uff9f\017\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\001\002\000\004" +
    "\022\357\001\002\000\054\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\016\ufff8\020\ufff8\027\ufff8\030\ufff8\050\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\063\ufff8\065\ufff8\070\ufff8\001\002\000\054" +
    "\002\000\004\022\005\020\006\035\007\007\010\044\011" +
    "\036\012\011\013\034\014\042\016\005\020\030\027\037" +
    "\030\021\050\010\056\004\057\026\060\017\063\016\065" +
    "\027\070\040\001\002\000\004\022\355\001\002\000\004" +
    "\016\321\001\002\000\004\016\315\001\002\000\056\015" +
    "\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\001\002\000\036\004\022\005\020\006" +
    "\035\007\007\010\064\011\036\012\011\013\034\014\042" +
    "\016\005\020\030\027\037\030\021\050\010\001\002\000" +
    "\056\015\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\001\002\000\004\022\313\001" +
    "\002\000\042\026\103\027\107\030\076\031\104\032\071" +
    "\033\070\036\312\037\311\040\072\041\110\042\073\043" +
    "\105\044\077\045\100\046\075\047\074\001\002\000\046" +
    "\022\310\024\141\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\033\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\001\002\000" +
    "\004\016\304\001\002\000\004\016\257\001\002\000\040" +
    "\004\022\005\020\006\035\007\007\010\064\011\036\012" +
    "\011\013\034\014\042\016\005\020\030\021\254\027\037" +
    "\030\021\050\010\001\002\000\004\022\253\001\002\000" +
    "\054\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\020\ufff9\027" +
    "\ufff9\030\ufff9\050\ufff9\056\ufff9\057\ufff9\060\ufff9\063\ufff9" +
    "\065\ufff9\070\ufff9\001\002\000\044\022\252\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\033\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\001\002\000\056\015\uff9e\017\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\001" +
    "\002\000\056\015\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\047\uffa3\001\002\000\056\015" +
    "\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\001\002\000\036\004\022\005\020\006" +
    "\035\007\007\010\064\011\036\012\011\013\034\014\042" +
    "\016\005\020\030\027\037\030\021\050\010\001\002\000" +
    "\004\010\201\001\002\000\004\022\200\001\002\000\006" +
    "\010\167\015\170\001\002\000\004\002\165\001\002\000" +
    "\062\016\055\020\053\024\052\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\051\056\052\051\053\047\054\046\055\050\001\002\000" +
    "\054\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\020\ufff7\027" +
    "\ufff7\030\ufff7\050\ufff7\056\ufff7\057\ufff7\060\ufff7\063\ufff7" +
    "\065\ufff7\070\ufff7\001\002\000\036\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\020\uffe7\027\uffe7\030\uffe7\050\uffe7\001\002\000" +
    "\036\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\016\uffe8\020\uffe8\027\uffe8\030" +
    "\uffe8\050\uffe8\001\002\000\036\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016" +
    "\uffe6\020\uffe6\027\uffe6\030\uffe6\050\uffe6\001\002\000\036" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\016\uffe9\020\uffe9\027\uffe9\030\uffe9" +
    "\050\uffe9\001\002\000\004\010\155\001\002\000\036\004" +
    "\022\005\020\006\035\007\007\010\064\011\036\012\011" +
    "\013\034\014\042\016\005\020\030\027\037\030\021\050" +
    "\010\001\002\000\036\004\022\005\020\006\035\007\007" +
    "\010\064\011\036\012\011\013\034\014\042\016\005\020" +
    "\030\027\037\030\021\050\010\001\002\000\040\004\022" +
    "\005\020\006\035\007\007\010\064\011\036\012\011\013" +
    "\034\014\042\016\005\017\uffbb\020\030\027\037\030\021" +
    "\050\010\001\002\000\036\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea" +
    "\020\uffea\027\uffea\030\uffea\050\uffea\001\002\000\006\017" +
    "\uffba\023\146\001\002\000\050\017\uffe4\021\uffe4\023\uffe4" +
    "\026\103\027\107\030\076\031\104\032\071\033\070\036" +
    "\106\037\102\040\072\041\110\042\073\043\105\044\077" +
    "\045\100\046\075\047\074\001\002\000\060\015\uff93\017" +
    "\uff93\021\uff93\022\uff93\023\uff93\024\141\025\uff93\026\uff93" +
    "\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\036\uff93\037" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\001\002\000\056\015\uff94\017\uff94\021" +
    "\uff94\022\uff94\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\001\002\000\004\017\140\001\002\000\064\015\uffa1\016" +
    "\055\017\uffa1\020\066\021\uffa1\022\uffa1\023\uffa1\024\065" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\001\002\000\004\010" +
    "\131\001\002\000\036\004\022\005\020\006\035\007\007" +
    "\010\064\011\036\012\011\013\034\014\042\016\005\020" +
    "\030\027\037\030\021\050\010\001\002\000\044\021\101" +
    "\026\103\027\107\030\076\031\104\032\071\033\070\036" +
    "\106\037\102\040\072\041\110\042\073\043\105\044\077" +
    "\045\100\046\075\047\074\001\002\000\036\004\022\005" +
    "\020\006\035\007\007\010\064\011\036\012\011\013\034" +
    "\014\042\016\005\020\030\027\037\030\021\050\010\001" +
    "\002\000\036\004\022\005\020\006\035\007\007\010\064" +
    "\011\036\012\011\013\034\014\042\016\005\020\030\027" +
    "\037\030\021\050\010\001\002\000\036\004\022\005\020" +
    "\006\035\007\007\010\064\011\036\012\011\013\034\014" +
    "\042\016\005\020\030\027\037\030\021\050\010\001\002" +
    "\000\036\004\022\005\020\006\035\007\007\010\064\011" +
    "\036\012\011\013\034\014\042\016\005\020\030\027\037" +
    "\030\021\050\010\001\002\000\036\004\022\005\020\006" +
    "\035\007\007\010\064\011\036\012\011\013\034\014\042" +
    "\016\005\020\030\027\037\030\021\050\010\001\002\000" +
    "\036\004\022\005\020\006\035\007\007\010\064\011\036" +
    "\012\011\013\034\014\042\016\005\020\030\027\037\030" +
    "\021\050\010\001\002\000\036\004\022\005\020\006\035" +
    "\007\007\010\064\011\036\012\011\013\034\014\042\016" +
    "\005\020\030\027\037\030\021\050\010\001\002\000\036" +
    "\004\022\005\020\006\035\007\007\010\064\011\036\012" +
    "\011\013\034\014\042\016\005\020\030\027\037\030\021" +
    "\050\010\001\002\000\036\004\022\005\020\006\035\007" +
    "\007\010\064\011\036\012\011\013\034\014\042\016\005" +
    "\020\030\027\037\030\021\050\010\001\002\000\056\015" +
    "\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\047\uff9a\001\002\000\056\015\uffaf\017\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\001\002\000\036\004\022\005\020\006\035\007\007\010" +
    "\064\011\036\012\011\013\034\014\042\016\005\020\030" +
    "\027\037\030\021\050\010\001\002\000\036\004\022\005" +
    "\020\006\035\007\007\010\064\011\036\012\011\013\034" +
    "\014\042\016\005\020\030\027\037\030\021\050\010\001" +
    "\002\000\036\004\022\005\020\006\035\007\007\010\064" +
    "\011\036\012\011\013\034\014\042\016\005\020\030\027" +
    "\037\030\021\050\010\001\002\000\056\015\uffb0\017\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\001\002\000\036\004\022\005\020\006\035\007\007" +
    "\010\064\011\036\012\011\013\034\014\042\016\005\020" +
    "\030\027\037\030\021\050\010\001\002\000\036\004\022" +
    "\005\020\006\035\007\007\010\064\011\036\012\011\013" +
    "\034\014\042\016\005\020\030\027\037\030\021\050\010" +
    "\001\002\000\056\015\uffad\017\uffad\021\uffad\022\uffad\023" +
    "\uffad\025\uffad\026\uffad\027\107\030\076\031\104\032\071" +
    "\033\070\036\106\037\102\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\001\002\000\056" +
    "\015\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\104\032\071\033\070\036\106" +
    "\037\102\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\001\002\000\056\015\uffab\017\uffab" +
    "\021\uffab\022\uffab\023\uffab\025\uffab\026\uffab\027\107\030" +
    "\076\031\104\032\071\033\070\036\106\037\102\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\001\002\000\056\015\uffb3\017\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\070\036\106\037\102\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\001\002\000" +
    "\044\025\116\026\103\027\107\030\076\031\104\032\071" +
    "\033\070\036\106\037\102\040\072\041\110\042\073\043" +
    "\105\044\077\045\100\046\075\047\074\001\002\000\036" +
    "\004\022\005\020\006\035\007\007\010\064\011\036\012" +
    "\011\013\034\014\042\016\005\020\030\027\037\030\021" +
    "\050\010\001\002\000\056\015\uff99\017\uff99\021\uff99\022" +
    "\uff99\023\uff99\025\uff99\026\103\027\107\030\076\031\104" +
    "\032\071\033\070\036\106\037\102\040\072\041\110\042" +
    "\073\043\105\044\077\045\100\046\075\047\074\001\002" +
    "\000\056\015\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9\025" +
    "\uffa9\026\uffa9\027\107\030\076\031\104\032\071\033\070" +
    "\036\106\037\102\040\072\041\110\042\073\043\105\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\001\002\000\056\015\uffaa" +
    "\017\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa\026\uffaa\027" +
    "\107\030\076\031\104\032\071\033\070\036\106\037\102" +
    "\040\072\041\110\042\073\043\105\044\uffaa\045\100\046" +
    "\uffaa\047\uffaa\001\002\000\056\015\uffb4\017\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\104\032\071\033\070\036\106\037\102\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\001" +
    "\002\000\056\015\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\025\uffa8\026\uffa8\027\107\030\076\031\104\032\071\033" +
    "\070\036\106\037\102\040\072\041\110\042\073\043\105" +
    "\044\077\045\100\046\uffa8\047\uffa8\001\002\000\056\015" +
    "\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uffa7\026\uffa7" +
    "\027\107\030\076\031\104\032\071\033\070\036\106\037" +
    "\102\040\072\041\110\042\073\043\105\044\077\045\100" +
    "\046\075\047\uffa7\001\002\000\056\015\uffac\017\uffac\021" +
    "\uffac\022\uffac\023\uffac\025\uffac\026\uffac\027\107\030\076" +
    "\031\104\032\071\033\070\036\106\037\102\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\001\002\000\056\015\uffae\017\uffae\021\uffae\022\uffae\023" +
    "\uffae\025\uffae\026\uffae\027\107\030\076\031\104\032\071" +
    "\033\070\036\106\037\102\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\001\002\000\056" +
    "\015\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\070\036\106" +
    "\037\102\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\001\002\000\056\015\uffb1\017\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\070\036\106\037\102\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\001\002\000\062\015\uff9c\016\132\017\uff9c\020\133" +
    "\021\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\001\002\000\040\004\022\005\020\006\035\007\007" +
    "\010\064\011\036\012\011\013\034\014\042\016\005\017" +
    "\uffbb\020\030\027\037\030\021\050\010\001\002\000\036" +
    "\004\022\005\020\006\035\007\007\010\064\011\036\012" +
    "\011\013\034\014\042\016\005\020\030\027\037\030\021" +
    "\050\010\001\002\000\044\021\135\026\103\027\107\030" +
    "\076\031\104\032\071\033\070\036\106\037\102\040\072" +
    "\041\110\042\073\043\105\044\077\045\100\046\075\047" +
    "\074\001\002\000\056\015\uff9b\017\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\001\002\000" +
    "\004\017\137\001\002\000\060\015\uffbc\017\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\001\002\000\056\015\uffbe\017\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\001\002\000" +
    "\004\010\142\001\002\000\004\016\143\001\002\000\040" +
    "\004\022\005\020\006\035\007\007\010\064\011\036\012" +
    "\011\013\034\014\042\016\005\017\uffbb\020\030\027\037" +
    "\030\021\050\010\001\002\000\004\017\145\001\002\000" +
    "\060\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\001\002\000\036\004" +
    "\022\005\020\006\035\007\007\010\064\011\036\012\011" +
    "\013\034\014\042\016\005\020\030\027\037\030\021\050" +
    "\010\001\002\000\050\017\uffe5\021\uffe5\023\uffe5\026\103" +
    "\027\107\030\076\031\104\032\071\033\070\036\106\037" +
    "\102\040\072\041\110\042\073\043\105\044\077\045\100" +
    "\046\075\047\074\001\002\000\044\022\ufff3\026\103\027" +
    "\107\030\076\031\104\032\071\033\070\036\106\037\102" +
    "\040\072\041\110\042\073\043\105\044\077\045\100\046" +
    "\075\047\074\001\002\000\044\021\152\026\103\027\107" +
    "\030\076\031\104\032\071\033\070\036\106\037\102\040" +
    "\072\041\110\042\073\043\105\044\077\045\100\046\075" +
    "\047\074\001\002\000\054\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\051" +
    "\056\052\051\053\047\054\046\055\050\001\002\000\036" +
    "\004\022\005\020\006\035\007\007\010\064\011\036\012" +
    "\011\013\034\014\042\016\005\020\030\027\037\030\021" +
    "\050\010\001\002\000\044\022\ufff0\026\103\027\107\030" +
    "\076\031\104\032\071\033\070\036\106\037\102\040\072" +
    "\041\110\042\073\043\105\044\077\045\100\046\075\047" +
    "\074\001\002\000\060\016\132\020\157\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\051\056\052\051\053\047\054\046\055\050\001" +
    "\002\000\036\004\022\005\020\006\035\007\007\010\064" +
    "\011\036\012\011\013\034\014\042\016\005\020\030\027" +
    "\037\030\021\050\010\001\002\000\036\004\022\005\020" +
    "\006\035\007\007\010\064\011\036\012\011\013\034\014" +
    "\042\016\005\020\030\027\037\030\021\050\010\001\002" +
    "\000\044\021\161\026\103\027\107\030\076\031\104\032" +
    "\071\033\070\036\106\037\102\040\072\041\110\042\073" +
    "\043\105\044\077\045\100\046\075\047\074\001\002\000" +
    "\054\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\051\056\052\051\053\047" +
    "\054\046\055\050\001\002\000\036\004\022\005\020\006" +
    "\035\007\007\010\064\011\036\012\011\013\034\014\042" +
    "\016\005\020\030\027\037\030\021\050\010\001\002\000" +
    "\044\022\ufff1\026\103\027\107\030\076\031\104\032\071" +
    "\033\070\036\106\037\102\040\072\041\110\042\073\043" +
    "\105\044\077\045\100\046\075\047\074\001\002\000\044" +
    "\022\ufff2\026\103\027\107\030\076\031\104\032\071\033" +
    "\070\036\106\037\102\040\072\041\110\042\073\043\105" +
    "\044\077\045\100\046\075\047\074\001\002\000\004\002" +
    "\001\001\002\000\006\015\174\023\173\001\002\000\004" +
    "\025\171\001\002\000\056\015\uff95\017\uff95\021\uff95\022" +
    "\uff95\023\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\001\002" +
    "\000\036\004\022\005\020\006\035\007\007\010\064\011" +
    "\036\012\011\013\034\014\042\016\005\020\030\027\037" +
    "\030\021\050\010\001\002\000\046\015\uffe2\023\uffe2\026" +
    "\103\027\107\030\076\031\104\032\071\033\070\036\106" +
    "\037\102\040\072\041\110\042\073\043\105\044\077\045" +
    "\100\046\075\047\074\001\002\000\004\010\175\001\002" +
    "\000\056\015\uff97\017\uff97\021\uff97\022\uff97\023\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\047\uff97\001\002\000\004\025\176" +
    "\001\002\000\036\004\022\005\020\006\035\007\007\010" +
    "\064\011\036\012\011\013\034\014\042\016\005\020\030" +
    "\027\037\030\021\050\010\001\002\000\046\015\uffe3\023" +
    "\uffe3\026\103\027\107\030\076\031\104\032\071\033\070" +
    "\036\106\037\102\040\072\041\110\042\073\043\105\044" +
    "\077\045\100\046\075\047\074\001\002\000\054\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\016\ufffa\020\ufffa\027\ufffa\030\ufffa" +
    "\050\ufffa\056\ufffa\057\ufffa\060\ufffa\063\ufffa\065\ufffa\070" +
    "\ufffa\001\002\000\004\016\202\001\002\000\006\017\205" +
    "\056\204\001\002\000\006\017\uffc1\023\246\001\002\000" +
    "\004\010\245\001\002\000\004\014\242\001\002\000\004" +
    "\017\207\001\002\000\004\014\210\001\002\000\054\004" +
    "\022\005\020\006\035\007\007\010\044\011\036\012\011" +
    "\013\034\014\042\016\005\020\030\027\037\030\021\050" +
    "\010\056\004\057\026\060\017\061\217\062\211\063\016" +
    "\065\027\001\002\000\036\004\022\005\020\006\035\007" +
    "\007\010\064\011\036\012\011\013\034\014\042\016\005" +
    "\020\030\027\037\030\021\050\010\001\002\000\056\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\027\uffd4\030" +
    "\uffd4\050\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\065\uffd4\001\002\000\004\022\237\001\002\000" +
    "\004\022\236\001\002\000\056\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\020\uffdc\027\uffdc\030\uffdc\050\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc\001" +
    "\002\000\004\022\235\001\002\000\004\022\234\001\002" +
    "\000\046\022\233\024\141\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\036\uff93\037\uff93\040\uff93\041\uff93" +
    "\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\001" +
    "\002\000\004\022\232\001\002\000\056\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\020\uffd5\027\uffd5\030\uffd5\050\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065" +
    "\uffd5\001\002\000\044\022\231\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\001\002\000\056\004\022\005\020\006\035\007\007\010" +
    "\044\011\036\012\011\013\034\014\042\015\230\016\005" +
    "\020\030\027\037\030\021\050\010\056\004\057\026\060" +
    "\017\061\217\062\211\063\016\065\027\001\002\000\004" +
    "\022\226\001\002\000\056\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\027\uffd8\030\uffd8\050\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\065\uffd8\001\002" +
    "\000\056\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd" +
    "\027\uffdd\030\uffdd\050\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\065\uffdd\001\002\000\054\002\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\016\uffc3\020\uffc3\027\uffc3\030\uffc3" +
    "\050\uffc3\056\uffc3\057\uffc3\060\uffc3\063\uffc3\065\uffc3\070" +
    "\uffc3\001\002\000\056\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\020\uffd3\027\uffd3\030\uffd3\050\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3\001\002\000" +
    "\056\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\027" +
    "\uffd1\030\uffd1\050\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\065\uffd1\001\002\000\056\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\020\uffd2\027\uffd2\030\uffd2\050" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\065\uffd2\001\002\000\056\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\020\uffd7\027\uffd7\030\uffd7\050\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\065\uffd7\001\002" +
    "\000\056\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda" +
    "\027\uffda\030\uffda\050\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\062\uffda\063\uffda\065\uffda\001\002\000\056\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\027\uffd9\030\uffd9" +
    "\050\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\065\uffd9\001\002\000\056\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\020\uffdb\027\uffdb\030\uffdb\050\uffdb\056\uffdb" +
    "\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\065\uffdb\001" +
    "\002\000\044\022\241\026\103\027\107\030\076\031\104" +
    "\032\071\033\070\036\106\037\102\040\072\041\110\042" +
    "\073\043\105\044\077\045\100\046\075\047\074\001\002" +
    "\000\056\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6" +
    "\027\uffd6\030\uffd6\050\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\065\uffd6\001\002\000\054\004\022" +
    "\005\020\006\035\007\007\010\044\011\036\012\011\013" +
    "\034\014\042\016\005\020\030\027\037\030\021\050\010" +
    "\056\004\057\026\060\017\061\217\062\211\063\016\065" +
    "\027\001\002\000\056\004\022\005\020\006\035\007\007" +
    "\010\044\011\036\012\011\013\034\014\042\015\244\016" +
    "\005\020\030\027\037\030\021\050\010\056\004\057\026" +
    "\060\017\061\217\062\211\063\016\065\027\001\002\000" +
    "\054\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2\020\uffc2\027" +
    "\uffc2\030\uffc2\050\uffc2\056\uffc2\057\uffc2\060\uffc2\063\uffc2" +
    "\065\uffc2\070\uffc2\001\002\000\006\017\uffbf\023\uffbf\001" +
    "\002\000\004\056\247\001\002\000\004\010\250\001\002" +
    "\000\006\017\uffc0\023\uffc0\001\002\000\056\015\uffb6\017" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\001\002\000\054\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\016\ufff6\020\ufff6\027\ufff6\030\ufff6\050\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\063\ufff6\065\ufff6\070\ufff6\001\002\000\054" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\020\ufff4\027\ufff4" +
    "\030\ufff4\050\ufff4\056\ufff4\057\ufff4\060\ufff4\063\ufff4\065" +
    "\ufff4\070\ufff4\001\002\000\056\015\uff96\017\uff96\021\uff96" +
    "\022\uff96\023\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\001" +
    "\002\000\006\021\256\023\146\001\002\000\056\015\uff98" +
    "\017\uff98\021\uff98\022\uff98\023\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\033\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\001\002\000\036\004\022\005\020\006\035" +
    "\007\007\010\064\011\036\012\011\013\034\014\042\016" +
    "\005\020\030\027\037\030\021\050\010\001\002\000\044" +
    "\017\261\026\103\027\107\030\076\031\104\032\071\033" +
    "\070\036\106\037\102\040\072\041\110\042\073\043\105" +
    "\044\077\045\100\046\075\047\074\001\002\000\004\014" +
    "\262\001\002\000\004\066\263\001\002\000\036\004\022" +
    "\005\020\006\035\007\007\010\064\011\036\012\011\013" +
    "\034\014\042\016\005\020\030\027\037\030\021\050\010" +
    "\001\002\000\010\015\267\066\263\067\270\001\002\000" +
    "\010\015\uffc6\066\uffc6\067\uffc6\001\002\000\004\015\276" +
    "\001\002\000\062\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\020\uffc9\027\uffc9\030\uffc9\050\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065\uffc9\070\uffc9" +
    "\001\002\000\004\025\272\001\002\000\010\015\uffc7\066" +
    "\uffc7\067\uffc7\001\002\000\004\014\273\001\002\000\054" +
    "\004\022\005\020\006\035\007\007\010\044\011\036\012" +
    "\011\013\034\014\042\016\005\020\030\027\037\030\021" +
    "\050\010\056\004\057\026\060\017\061\217\062\211\063" +
    "\016\065\027\001\002\000\056\004\022\005\020\006\035" +
    "\007\007\010\044\011\036\012\011\013\034\014\042\015" +
    "\275\016\005\020\030\027\037\030\021\050\010\056\004" +
    "\057\026\060\017\061\217\062\211\063\016\065\027\001" +
    "\002\000\004\015\uffc4\001\002\000\062\002\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\027\uffc8\030\uffc8" +
    "\050\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\065\uffc8\070\uffc8\001\002\000\044\025\300\026\103" +
    "\027\107\030\076\031\104\032\071\033\070\036\106\037" +
    "\102\040\072\041\110\042\073\043\105\044\077\045\100" +
    "\046\075\047\074\001\002\000\004\014\301\001\002\000" +
    "\054\004\022\005\020\006\035\007\007\010\044\011\036" +
    "\012\011\013\034\014\042\016\005\020\030\027\037\030" +
    "\021\050\010\056\004\057\026\060\017\061\217\062\211" +
    "\063\016\065\027\001\002\000\056\004\022\005\020\006" +
    "\035\007\007\010\044\011\036\012\011\013\034\014\042" +
    "\015\303\016\005\020\030\027\037\030\021\050\010\056" +
    "\004\057\026\060\017\061\217\062\211\063\016\065\027" +
    "\001\002\000\010\015\uffc5\066\uffc5\067\uffc5\001\002\000" +
    "\040\004\022\005\020\006\035\007\007\010\064\011\036" +
    "\012\011\013\034\014\042\016\005\017\306\020\030\027" +
    "\037\030\021\050\010\001\002\000\044\017\307\026\103" +
    "\027\107\030\076\031\104\032\071\033\070\036\106\037" +
    "\102\040\072\041\110\042\073\043\105\044\077\045\100" +
    "\046\075\047\074\001\002\000\004\022\uffe1\001\002\000" +
    "\004\022\uffe0\001\002\000\054\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\016\ufff5\020\ufff5\027\ufff5\030\ufff5\050\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\063\ufff5\065\ufff5\070\ufff5\001\002\000" +
    "\044\022\uffb8\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\001\002\000\044" +
    "\022\uffb9\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\001\002\000\054\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\016\ufffc\020\ufffc\027\ufffc\030" +
    "\ufffc\050\ufffc\056\ufffc\057\ufffc\060\ufffc\063\ufffc\065\ufffc" +
    "\070\ufffc\001\002\000\056\015\uffb7\017\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\001\002" +
    "\000\040\004\022\005\020\006\035\007\007\010\064\011" +
    "\036\012\011\013\034\014\042\016\005\017\317\020\030" +
    "\027\037\030\021\050\010\001\002\000\044\017\320\026" +
    "\103\027\107\030\076\031\104\032\071\033\070\036\106" +
    "\037\102\040\072\041\110\042\073\043\105\044\077\045" +
    "\100\046\075\047\074\001\002\000\004\022\uffdf\001\002" +
    "\000\004\022\uffde\001\002\000\036\004\022\005\020\006" +
    "\035\007\007\010\064\011\036\012\011\013\034\014\042" +
    "\016\005\020\030\027\037\030\021\050\010\001\002\000" +
    "\044\017\323\026\103\027\107\030\076\031\104\032\071" +
    "\033\070\036\106\037\102\040\072\041\110\042\073\043" +
    "\105\044\077\045\100\046\075\047\074\001\002\000\004" +
    "\014\324\001\002\000\054\004\022\005\020\006\035\007" +
    "\007\010\044\011\036\012\011\013\034\014\042\016\005" +
    "\020\030\027\037\030\021\050\010\056\004\057\026\060" +
    "\017\061\217\062\211\063\016\065\027\001\002\000\056" +
    "\004\022\005\020\006\035\007\007\010\044\011\036\012" +
    "\011\013\034\014\042\015\326\016\005\020\030\027\037" +
    "\030\021\050\010\056\004\057\026\060\017\061\217\062" +
    "\211\063\016\065\027\001\002\000\064\002\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\027\uffd0\030\uffd0" +
    "\050\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\327\065\uffd0\070\uffd0\001\002\000\006\014\334" +
    "\063\346\001\002\000\062\002\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\020\uffcf\027\uffcf\030\uffcf\050\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf" +
    "\070\uffcf\001\002\000\064\002\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\020\uffce\027\uffce\030\uffce\050\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\332" +
    "\065\uffce\070\uffce\001\002\000\006\014\334\063\335\001" +
    "\002\000\062\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\020\uffcd\027\uffcd\030\uffcd\050\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\065\uffcd\070\uffcd\001" +
    "\002\000\054\004\022\005\020\006\035\007\007\010\044" +
    "\011\036\012\011\013\034\014\042\016\005\020\030\027" +
    "\037\030\021\050\010\056\004\057\026\060\017\061\217" +
    "\062\211\063\016\065\027\001\002\000\004\016\336\001" +
    "\002\000\036\004\022\005\020\006\035\007\007\010\064" +
    "\011\036\012\011\013\034\014\042\016\005\020\030\027" +
    "\037\030\021\050\010\001\002\000\044\017\340\026\103" +
    "\027\107\030\076\031\104\032\071\033\070\036\106\037" +
    "\102\040\072\041\110\042\073\043\105\044\077\045\100" +
    "\046\075\047\074\001\002\000\004\014\341\001\002\000" +
    "\054\004\022\005\020\006\035\007\007\010\044\011\036" +
    "\012\011\013\034\014\042\016\005\020\030\027\037\030" +
    "\021\050\010\056\004\057\026\060\017\061\217\062\211" +
    "\063\016\065\027\001\002\000\056\004\022\005\020\006" +
    "\035\007\007\010\044\011\036\012\011\013\034\014\042" +
    "\015\343\016\005\020\030\027\037\030\021\050\010\056" +
    "\004\057\026\060\017\061\217\062\211\063\016\065\027" +
    "\001\002\000\064\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\027\uffcb\030\uffcb\050\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\070\uffcb\001\002\000\056\004\022\005\020\006\035\007" +
    "\007\010\044\011\036\012\011\013\034\014\042\015\345" +
    "\016\005\020\030\027\037\030\021\050\010\056\004\057" +
    "\026\060\017\061\217\062\211\063\016\065\027\001\002" +
    "\000\062\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\020\uffcc\027\uffcc\030\uffcc\050\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\065\uffcc\070\uffcc\001\002" +
    "\000\004\016\347\001\002\000\036\004\022\005\020\006" +
    "\035\007\007\010\064\011\036\012\011\013\034\014\042" +
    "\016\005\020\030\027\037\030\021\050\010\001\002\000" +
    "\044\017\351\026\103\027\107\030\076\031\104\032\071" +
    "\033\070\036\106\037\102\040\072\041\110\042\073\043" +
    "\105\044\077\045\100\046\075\047\074\001\002\000\004" +
    "\014\352\001\002\000\054\004\022\005\020\006\035\007" +
    "\007\010\044\011\036\012\011\013\034\014\042\016\005" +
    "\020\030\027\037\030\021\050\010\056\004\057\026\060" +
    "\017\061\217\062\211\063\016\065\027\001\002\000\056" +
    "\004\022\005\020\006\035\007\007\010\044\011\036\012" +
    "\011\013\034\014\042\015\354\016\005\020\030\027\037" +
    "\030\021\050\010\056\004\057\026\060\017\061\217\062" +
    "\211\063\016\065\027\001\002\000\064\002\uffca\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\020\uffca\027\uffca\030\uffca" +
    "\050\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\070\uffca\001\002\000\054\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\016\ufffb\020\ufffb\027\ufffb\030\ufffb" +
    "\050\ufffb\056\ufffb\057\ufffb\060\ufffb\063\ufffb\065\ufffb\070" +
    "\ufffb\001\002\000\054\002\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\016" +
    "\uffff\020\uffff\027\uffff\030\uffff\050\uffff\056\uffff\057\uffff" +
    "\060\uffff\063\uffff\065\uffff\070\uffff\001\002\000\054\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\016\ufffd\020\ufffd\027\ufffd\030" +
    "\ufffd\050\ufffd\056\ufffd\057\ufffd\060\ufffd\063\ufffd\065\ufffd" +
    "\070\ufffd\001\002\000\056\015\uffa6\017\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\025\uffa6\026\uffa6\027\107\030\076\031\104" +
    "\032\071\033\070\036\106\037\102\040\072\041\110\042" +
    "\073\043\105\044\077\045\100\046\uffa6\047\uffa6\001\002" +
    "\000\044\017\362\026\103\027\107\030\076\031\104\032" +
    "\071\033\070\036\106\037\102\040\072\041\110\042\073" +
    "\043\105\044\077\045\100\046\075\047\074\001\002\000" +
    "\056\015\uff9d\017\uff9d\021\uff9d\022\uff9d\023\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\001\002\000\020\022\uffec\023" +
    "\uffec\051\056\052\051\053\047\054\046\055\050\001\002" +
    "\000\006\022\uffef\023\366\001\002\000\006\022\uffed\023" +
    "\uffed\001\002\000\004\010\363\001\002\000\006\022\uffee" +
    "\023\uffee\001\002\000\036\004\022\005\020\006\035\007" +
    "\007\010\064\011\036\012\011\013\034\014\042\016\005" +
    "\020\030\027\037\030\021\050\010\001\002\000\046\022" +
    "\uffeb\023\uffeb\026\103\027\107\030\076\031\104\032\071" +
    "\033\070\036\106\037\102\040\072\041\110\042\073\043" +
    "\105\044\077\045\100\046\075\047\074\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\036\002\042\003\040\004\024\005\013\006" +
    "\005\010\011\013\022\014\014\017\031\022\012\026\044" +
    "\033\032\035\030\036\023\001\001\000\006\011\363\012" +
    "\364\001\001\000\010\004\060\033\061\036\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\060\033" +
    "\061\036\357\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\040\004\024\006\355\010" +
    "\011\013\022\014\014\017\031\022\012\026\044\033\032" +
    "\035\030\036\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\060" +
    "\033\061\036\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\060\031\254\033\061\036" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\060\033\061\036\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\165\001\001\000" +
    "\002\001\001\000\004\007\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\060\033\061" +
    "\036\150\001\001\000\010\004\060\033\061\036\147\001" +
    "\001\000\014\004\060\031\056\032\062\033\061\036\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\060\033" +
    "\061\036\066\001\001\000\002\001\001\000\010\004\060" +
    "\033\061\036\127\001\001\000\010\004\060\033\061\036" +
    "\126\001\001\000\010\004\060\033\061\036\125\001\001" +
    "\000\010\004\060\033\061\036\124\001\001\000\010\004" +
    "\060\033\061\036\123\001\001\000\010\004\060\033\061" +
    "\036\122\001\001\000\010\004\060\033\061\036\121\001" +
    "\001\000\010\004\060\033\061\036\120\001\001\000\010" +
    "\004\060\033\061\036\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\060\033\061\036\114\001\001" +
    "\000\010\004\060\033\061\036\113\001\001\000\010\004" +
    "\060\033\061\036\112\001\001\000\002\001\001\000\010" +
    "\004\060\033\061\036\111\001\001\000\010\004\060\033" +
    "\061\036\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\060\033\061\036\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\060\031\056\032\135\033\061\036\057" +
    "\001\001\000\010\004\060\033\061\036\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\060\031\056\032\143\033\061\036\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\060\033\061\036\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\152\001\001\000" +
    "\010\004\060\033\061\036\153\001\001\000\002\001\001" +
    "\000\004\007\155\001\001\000\010\004\060\033\061\036" +
    "\163\001\001\000\010\004\060\033\061\036\157\001\001" +
    "\000\002\001\001\000\004\007\161\001\001\000\010\004" +
    "\060\033\061\036\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\060\033\061\036\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\060\033\061\036\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\205\030\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\224\004\217\010\212\013\215" +
    "\014\213\015\223\016\214\017\221\022\211\033\222\035" +
    "\220\036\023\001\001\000\010\004\060\033\061\036\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\224\004\217\010\212\013\215" +
    "\014\213\016\226\017\221\022\211\033\222\035\220\036" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\224\004\217\010\212\013\215" +
    "\014\213\015\242\016\214\017\221\022\211\033\222\035" +
    "\220\036\023\001\001\000\030\003\224\004\217\010\212" +
    "\013\215\014\213\016\226\017\221\022\211\033\222\035" +
    "\220\036\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\060\033\061\036\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\263\024\264\001\001\000\010\004" +
    "\060\033\061\036\276\001\001\000\006\024\270\025\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\224\004\217\010\212\013\215\014\213\015" +
    "\273\016\214\017\221\022\211\033\222\035\220\036\023" +
    "\001\001\000\030\003\224\004\217\010\212\013\215\014" +
    "\213\016\226\017\221\022\211\033\222\035\220\036\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\224\004\217\010\212" +
    "\013\215\014\213\015\301\016\214\017\221\022\211\033" +
    "\222\035\220\036\023\001\001\000\030\003\224\004\217" +
    "\010\212\013\215\014\213\016\226\017\221\022\211\033" +
    "\222\035\220\036\023\001\001\000\002\001\001\000\010" +
    "\004\060\033\061\036\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\060\033\061\036\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\060\033\061\036\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\224\004\217\010\212\013\215\014" +
    "\213\015\324\016\214\017\221\022\211\033\222\035\220" +
    "\036\023\001\001\000\030\003\224\004\217\010\212\013" +
    "\215\014\213\016\226\017\221\022\211\033\222\035\220" +
    "\036\023\001\001\000\006\020\327\021\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\224\004" +
    "\217\010\212\013\215\014\213\015\343\016\214\017\221" +
    "\022\211\033\222\035\220\036\023\001\001\000\002\001" +
    "\001\000\010\004\060\033\061\036\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\224\004\217\010" +
    "\212\013\215\014\213\015\341\016\214\017\221\022\211" +
    "\033\222\035\220\036\023\001\001\000\030\003\224\004" +
    "\217\010\212\013\215\014\213\016\226\017\221\022\211" +
    "\033\222\035\220\036\023\001\001\000\002\001\001\000" +
    "\030\003\224\004\217\010\212\013\215\014\213\016\226" +
    "\017\221\022\211\033\222\035\220\036\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\060\033\061" +
    "\036\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\224\004\217\010\212\013\215\014\213\015\352" +
    "\016\214\017\221\022\211\033\222\035\220\036\023\001" +
    "\001\000\030\003\224\004\217\010\212\013\215\014\213" +
    "\016\226\017\221\022\211\033\222\035\220\036\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\366\001\001\000\002\001" +
    "\001\000\010\004\060\033\061\036\370\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private AST ast;
	
	public AST getAST(){
		return ast;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {




  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
			parser.ast = new AST(a);
            System.out.println("FS OK");
			
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPORTAR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Si a = (Si)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SELECCIONA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Selecciona a = (Selecciona)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= LLAMADA_METODO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LlamadaFuncion a = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= LLAMADA_METODOS puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= UNARIO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Unario a = (Unario)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		 RESULT = new Asignacion(a, b, c, aleft+1, aright+1); 
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= identificador punto identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AsignacionObjeto(a, b, c, d, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= identificador punto identificador corcheteIzquierda E corcheteDerecha OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AsignacionObjeto(a, b, c, d, e, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACION ::= identificador corcheteIzquierda E corcheteDerecha OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AsignacionArreglo(a, b, c, d, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= var_ SEMIDECLARACION 
            {
              Declaracion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<Asignacion> a = (LinkedList<Asignacion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Declaracion(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SEMIDECLARACION ::= SEMIDECLARACION coma ASIGNA 
            {
              LinkedList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<Asignacion> a = (LinkedList<Asignacion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Asignacion b = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SEMIDECLARACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SEMIDECLARACION ::= ASIGNA 
            {
              LinkedList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SEMIDECLARACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNA ::= identificador 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Asignacion(a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNA ::= identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Asignacion(a, "=", c, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_ASIGNACION ::= igual 
            {
              String RESULT =null;
		RESULT="=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ASIGNACION ::= masigual 
            {
              String RESULT =null;
		RESULT="+=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ASIGNACION ::= menosigual 
            {
              String RESULT =null;
		RESULT="-=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ASIGNACION ::= porigual 
            {
              String RESULT =null;
		RESULT="*=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_ASIGNACION ::= diagonaligual 
            {
              String RESULT =null;
		RESULT="/=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXS ::= EXS coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXS",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXS ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXS",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OBJS ::= OBJS coma identificador dospuntos E 
            {
              Map<String,Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Map<String,Expresion> a = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.put(b, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJS",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OBJS ::= identificador dospuntos E 
            {
              Map<String,Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new HashMap<String, Expresion>(); RESULT.put(a, b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJS",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMPRIMIR ::= imprimir_ parIzquierda parDerecha 
            {
              Imprimir RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		RESULT = new Imprimir(null, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMPRIMIR ::= imprimir_ parIzquierda E parDerecha 
            {
              Imprimir RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Imprimir(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPORTAR ::= importar_ parIzquierda parDerecha 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPORTAR ::= importar_ parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUES ::= BLOQUES BLOQUE 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUES",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUES ::= BLOQUE 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUES",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= DECLARACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= ASIGNACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= IMPRIMIR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= IMPORTAR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= detener_ puntoycoma 
            {
              NodoAST RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Detener(xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= retornar_ E puntoycoma 
            {
              NodoAST RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Retornar(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= SI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Si a = (Si)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= SELECCIONA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Selecciona a = (Selecciona)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= LLAMADA_METODO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LlamadaFuncion a = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= LLAMADA_METODOS puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= UNARIO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Unario a = (Unario)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Si(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINO 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		SubSi c = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINOSI 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<SubSi> c = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINOSI SINO 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<SubSi> c = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		SubSi d = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c, d);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SINO ::= sino_ llaveIzquierda BLOQUES llaveDerecha 
            {
              SubSi RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new SubSi(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINO",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SINOSI ::= SINOSI sino_ si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              LinkedList<SubSi> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).right;
		LinkedList<SubSi> a = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a; RESULT.add(new SubSi(b, c, xleft+1, xright+1));
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINOSI",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SINOSI ::= sino_ si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              LinkedList<SubSi> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(new SubSi(a, b, xleft+1, xright+1));
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINOSI",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SELECCIONA ::= selecciona_ parIzquierda E parDerecha llaveIzquierda CASOS llaveDerecha 
            {
              Selecciona RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Selecciona(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SELECCIONA",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SELECCIONA ::= selecciona_ parIzquierda E parDerecha llaveIzquierda CASOS DEFECTO llaveDerecha 
            {
              Selecciona RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		b.add(c); RESULT = new Selecciona(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SELECCIONA",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASO ::= caso_ E dospuntos llaveIzquierda BLOQUES llaveDerecha 
            {
              Caso RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Caso(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DEFECTO ::= defecto_ dospuntos llaveIzquierda BLOQUES llaveDerecha 
            {
              Caso RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Caso(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("DEFECTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= funcion_ identificador parIzquierda PARAMETROS parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Funcion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Funcion(a, b, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION ::= funcion_ identificador parIzquierda parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Funcion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Funcion(a, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETRO ::= PARAMETRO coma var_ identificador 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETRO",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETRO ::= var_ identificador 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETRO",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LLAMADA_METODO ::= identificador parIzquierda PARMS parDerecha 
            {
              LlamadaFuncion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
						if(b != null){
							RESULT = new LlamadaFuncion(a, b, aleft+1, aright+1);
						} else {
							RESULT = new LlamadaFuncion(a, b, aleft+1, aright+1);
						}
					
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LLAMADA_METODOS ::= LLAMADA_METODOS punto identificador parIzquierda PARMS parDerecha 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODOS",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLAMADA_METODOS ::= identificador punto identificador parIzquierda PARMS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODOS",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARMS ::= 
            {
              LinkedList<Expresion> RESULT =null;
		RESULT=null;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARMS",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARMS ::= EXS 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARMS",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UNARIO ::= E masmas 
            {
              Unario RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Unario(a, Operacion.Operador.AUMENTO, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("UNARIO",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // UNARIO ::= E menosmenos 
            {
              Unario RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Unario(a, Operacion.Operador.DECREMENTO, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("UNARIO",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= menos E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.MENOS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= mas E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.MAS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.MAS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.MENOS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E asterisco E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.ASTERISCO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E diagonal E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.BARRA, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.INTERCALACION, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.AUMENTO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.DECREMENTO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MAYORQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MENORQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MAYORIGUALQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MENORIGUALQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.IGUAL, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.DIFERENTE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, b, Operacion.Operador.AND, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, b, Operacion.Operador.OR, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= not E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= tstring 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.CADENA, a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= tchar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.CADENA, a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.ENTERO, new Integer(a), aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.DECIMAL, new Double(a), aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Identificador(a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= nulo_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.NULL, "nulo", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= verdadero_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.BOOLEANO, "verdadero", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= falso_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.BOOLEANO, "falso", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= parIzquierda E parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= identificador punto identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AccesoObjeto(a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= identificador punto identificador corcheteIzquierda E corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new AccesoObjeto(a, b, c, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= identificador corcheteIzquierda E corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new AccesoArreglo(a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Ternario(a, b, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= corcheteIzquierda EXS corcheteDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.ARREGLO, a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= llaveIzquierda OBJS llaveDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Map<String,Expresion> a = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.OBJETO, a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= corcheteIzquierda corcheteDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.ARREGLO, null, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= llaveIzquierda llaveDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.OBJETO, null, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= LLAMADA_METODO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LlamadaFuncion a = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= LLAMADA_METODOS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
