
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package fs;

import fs.ast.*;
import fs.ast.expresion.*;
import fs.ast.expresion.operacion.*;
import fs.ast.simbolos.*;
import fs.ast.instruccion.*;
import fs.ast.instruccion.condicionales.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymFs.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\007\004\000\002\013\005\000\002\013\007\000\002\013" +
    "\010\000\002\010\004\000\002\011\005\000\002\011\003" +
    "\000\002\012\003\000\002\012\005\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\030\005\000\002\030\003\000\002\033" +
    "\007\000\002\033\005\000\002\014\005\000\002\014\006" +
    "\000\002\004\005\000\002\004\006\000\002\015\004\000" +
    "\002\015\003\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\004" +
    "\000\002\016\004\000\002\017\011\000\002\017\012\000" +
    "\002\017\012\000\002\017\013\000\002\020\006\000\002" +
    "\021\013\000\002\021\012\000\002\022\011\000\002\023" +
    "\004\000\002\023\003\000\002\024\010\000\002\024\007" +
    "\000\002\025\012\000\002\025\011\000\002\026\003\000" +
    "\002\027\006\000\002\027\004\000\002\032\006\000\002" +
    "\005\010\000\002\005\010\000\002\031\002\000\002\031" +
    "\003\000\002\034\004\000\002\034\004\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\004\000\002\034\004\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\004\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\005\000\002\034\005\000\002\034\010" +
    "\000\002\034\006\000\002\034\007\000\002\034\005\000" +
    "\002\034\005\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\020\010\025\056\004\057\016\060\013\063" +
    "\012\065\017\070\022\001\002\000\004\010\344\001\002" +
    "\000\022\002\ufffe\010\ufffe\056\ufffe\057\ufffe\060\ufffe\063" +
    "\ufffe\065\ufffe\070\ufffe\001\002\000\022\002\ufff8\010\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\063\ufff8\065\ufff8\070\ufff8\001" +
    "\002\000\004\022\342\001\002\000\022\002\000\010\025" +
    "\056\004\057\016\060\013\063\012\065\017\070\022\001" +
    "\002\000\004\022\340\001\002\000\004\016\304\001\002" +
    "\000\004\016\300\001\002\000\004\022\277\001\002\000" +
    "\006\022\276\024\155\001\002\000\004\016\272\001\002" +
    "\000\004\016\247\001\002\000\022\002\ufff9\010\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\063\ufff9\065\ufff9\070\ufff9\001\002" +
    "\000\004\022\246\001\002\000\004\010\200\001\002\000" +
    "\004\022\177\001\002\000\004\002\176\001\002\000\022" +
    "\016\036\020\034\024\033\051\037\052\032\053\030\054" +
    "\027\055\031\001\002\000\022\002\ufff7\010\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\063\ufff7\065\ufff7\070\ufff7\001\002\000" +
    "\036\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\016\uffe9\020\uffe9\027\uffe9\030" +
    "\uffe9\050\uffe9\001\002\000\036\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016" +
    "\uffea\020\uffea\027\uffea\030\uffea\050\uffea\001\002\000\036" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\016\uffe8\020\uffe8\027\uffe8\030\uffe8" +
    "\050\uffe8\001\002\000\036\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb" +
    "\020\uffeb\027\uffeb\030\uffeb\050\uffeb\001\002\000\004\010" +
    "\173\001\002\000\036\004\050\005\045\006\056\007\041" +
    "\010\062\011\055\012\043\013\054\014\061\016\040\020" +
    "\052\027\060\030\046\050\042\001\002\000\036\004\050" +
    "\005\045\006\056\007\041\010\062\011\055\012\043\013" +
    "\054\014\061\016\040\020\052\027\060\030\046\050\042" +
    "\001\002\000\040\004\050\005\045\006\056\007\041\010" +
    "\062\011\055\012\043\013\054\014\061\016\040\017\uffbf" +
    "\020\052\027\060\030\046\050\042\001\002\000\036\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\016\uffec\020\uffec\027\uffec\030\uffec\050" +
    "\uffec\001\002\000\036\004\050\005\045\006\056\007\041" +
    "\010\062\011\055\012\043\013\054\014\061\016\040\020" +
    "\052\027\060\030\046\050\042\001\002\000\056\015\uffa8" +
    "\017\uffa8\021\uffa8\022\uffa8\023\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\001\002\000\036\004\050\005\045\006\056" +
    "\007\041\010\062\011\055\012\043\013\054\014\061\016" +
    "\040\020\052\027\060\030\046\050\042\001\002\000\056" +
    "\015\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\001\002\000\006\017\uffbe\023\153" +
    "\001\002\000\056\015\uffaa\017\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\001\002\000\036" +
    "\004\050\005\045\006\056\007\041\010\062\011\055\012" +
    "\043\013\054\014\061\016\040\020\052\027\060\030\046" +
    "\050\042\001\002\000\050\017\uffe6\021\uffe6\023\uffe6\026" +
    "\101\027\105\030\074\031\102\032\067\033\066\036\104" +
    "\037\100\040\070\041\106\042\071\043\103\044\075\045" +
    "\076\046\073\047\072\001\002\000\056\015\uffab\017\uffab" +
    "\021\uffab\022\uffab\023\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\001\002\000\060\015\uff9b\017\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\155\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\001" +
    "\002\000\036\004\050\005\045\006\056\007\041\010\062" +
    "\011\055\012\043\013\054\014\061\016\040\020\052\027" +
    "\060\030\046\050\042\001\002\000\056\015\uff9c\017\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\001\002\000\056\015\uffa4\017\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\001\002\000" +
    "\056\015\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\001\002\000\056\015\uffa9\017" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9" +
    "\047\uffa9\001\002\000\004\017\150\001\002\000\036\004" +
    "\050\005\045\006\056\007\041\010\062\011\055\012\043" +
    "\013\054\014\061\016\040\020\052\027\060\030\046\050" +
    "\042\001\002\000\004\010\137\001\002\000\064\015\uffa7" +
    "\016\036\017\uffa7\020\064\021\uffa7\022\uffa7\023\uffa7\024" +
    "\063\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\001\002\000\004" +
    "\010\127\001\002\000\036\004\050\005\045\006\056\007" +
    "\041\010\062\011\055\012\043\013\054\014\061\016\040" +
    "\020\052\027\060\030\046\050\042\001\002\000\044\021" +
    "\077\026\101\027\105\030\074\031\102\032\067\033\066" +
    "\036\104\037\100\040\070\041\106\042\071\043\103\044" +
    "\075\045\076\046\073\047\072\001\002\000\036\004\050" +
    "\005\045\006\056\007\041\010\062\011\055\012\043\013" +
    "\054\014\061\016\040\020\052\027\060\030\046\050\042" +
    "\001\002\000\036\004\050\005\045\006\056\007\041\010" +
    "\062\011\055\012\043\013\054\014\061\016\040\020\052" +
    "\027\060\030\046\050\042\001\002\000\036\004\050\005" +
    "\045\006\056\007\041\010\062\011\055\012\043\013\054" +
    "\014\061\016\040\020\052\027\060\030\046\050\042\001" +
    "\002\000\036\004\050\005\045\006\056\007\041\010\062" +
    "\011\055\012\043\013\054\014\061\016\040\020\052\027" +
    "\060\030\046\050\042\001\002\000\036\004\050\005\045" +
    "\006\056\007\041\010\062\011\055\012\043\013\054\014" +
    "\061\016\040\020\052\027\060\030\046\050\042\001\002" +
    "\000\036\004\050\005\045\006\056\007\041\010\062\011" +
    "\055\012\043\013\054\014\061\016\040\020\052\027\060" +
    "\030\046\050\042\001\002\000\036\004\050\005\045\006" +
    "\056\007\041\010\062\011\055\012\043\013\054\014\061" +
    "\016\040\020\052\027\060\030\046\050\042\001\002\000" +
    "\036\004\050\005\045\006\056\007\041\010\062\011\055" +
    "\012\043\013\054\014\061\016\040\020\052\027\060\030" +
    "\046\050\042\001\002\000\036\004\050\005\045\006\056" +
    "\007\041\010\062\011\055\012\043\013\054\014\061\016" +
    "\040\020\052\027\060\030\046\050\042\001\002\000\056" +
    "\015\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\001\002\000\056\015\uffb5\017\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\001\002\000\036\004\050\005\045\006\056\007\041" +
    "\010\062\011\055\012\043\013\054\014\061\016\040\020" +
    "\052\027\060\030\046\050\042\001\002\000\036\004\050" +
    "\005\045\006\056\007\041\010\062\011\055\012\043\013" +
    "\054\014\061\016\040\020\052\027\060\030\046\050\042" +
    "\001\002\000\036\004\050\005\045\006\056\007\041\010" +
    "\062\011\055\012\043\013\054\014\061\016\040\020\052" +
    "\027\060\030\046\050\042\001\002\000\056\015\uffb6\017" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\001\002\000\036\004\050\005\045\006\056\007" +
    "\041\010\062\011\055\012\043\013\054\014\061\016\040" +
    "\020\052\027\060\030\046\050\042\001\002\000\036\004" +
    "\050\005\045\006\056\007\041\010\062\011\055\012\043" +
    "\013\054\014\061\016\040\020\052\027\060\030\046\050" +
    "\042\001\002\000\056\015\uffb3\017\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\025\uffb3\026\uffb3\027\105\030\074\031\102\032" +
    "\067\033\066\036\104\037\100\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\001\002\000" +
    "\056\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\102\032\067\033\066\036" +
    "\104\037\100\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\001\002\000\056\015\uffb1\017" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\025\uffb1\026\uffb1\027\105" +
    "\030\074\031\102\032\067\033\066\036\104\037\100\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\001\002\000\056\015\uffb9\017\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\066\036\104\037\100\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\001\002" +
    "\000\044\025\114\026\101\027\105\030\074\031\102\032" +
    "\067\033\066\036\104\037\100\040\070\041\106\042\071" +
    "\043\103\044\075\045\076\046\073\047\072\001\002\000" +
    "\036\004\050\005\045\006\056\007\041\010\062\011\055" +
    "\012\043\013\054\014\061\016\040\020\052\027\060\030" +
    "\046\050\042\001\002\000\056\015\uff9f\017\uff9f\021\uff9f" +
    "\022\uff9f\023\uff9f\025\uff9f\026\101\027\105\030\074\031" +
    "\102\032\067\033\066\036\104\037\100\040\070\041\106" +
    "\042\071\043\103\044\075\045\076\046\073\047\072\001" +
    "\002\000\056\015\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\025\uffaf\026\uffaf\027\105\030\074\031\102\032\067\033" +
    "\066\036\104\037\100\040\070\041\106\042\071\043\103" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\001\002\000\056\015" +
    "\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\026\uffb0" +
    "\027\105\030\074\031\102\032\067\033\066\036\104\037" +
    "\100\040\070\041\106\042\071\043\103\044\uffb0\045\076" +
    "\046\uffb0\047\uffb0\001\002\000\056\015\uffba\017\uffba\021" +
    "\uffba\022\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\102\032\067\033\066\036\104\037\100\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\001\002\000\056\015\uffae\017\uffae\021\uffae\022\uffae\023" +
    "\uffae\025\uffae\026\uffae\027\105\030\074\031\102\032\067" +
    "\033\066\036\104\037\100\040\070\041\106\042\071\043" +
    "\103\044\075\045\076\046\uffae\047\uffae\001\002\000\056" +
    "\015\uffad\017\uffad\021\uffad\022\uffad\023\uffad\025\uffad\026" +
    "\uffad\027\105\030\074\031\102\032\067\033\066\036\104" +
    "\037\100\040\070\041\106\042\071\043\103\044\075\045" +
    "\076\046\073\047\uffad\001\002\000\056\015\uffb2\017\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026\uffb2\027\105\030" +
    "\074\031\102\032\067\033\066\036\104\037\100\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\001\002\000\056\015\uffb4\017\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\025\uffb4\026\uffb4\027\105\030\074\031\102\032" +
    "\067\033\066\036\104\037\100\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\001\002\000" +
    "\056\015\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\066\036" +
    "\104\037\100\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\001\002\000\056\015\uffb7\017" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\066\036\104\037\100\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\001\002\000\062\015\uffa2\016\130\017\uffa2\020" +
    "\131\021\uffa2\022\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\001\002\000\040\004\050\005\045\006\056\007" +
    "\041\010\062\011\055\012\043\013\054\014\061\016\040" +
    "\017\uffbf\020\052\027\060\030\046\050\042\001\002\000" +
    "\036\004\050\005\045\006\056\007\041\010\062\011\055" +
    "\012\043\013\054\014\061\016\040\020\052\027\060\030" +
    "\046\050\042\001\002\000\044\021\133\026\101\027\105" +
    "\030\074\031\102\032\067\033\066\036\104\037\100\040" +
    "\070\041\106\042\071\043\103\044\075\045\076\046\073" +
    "\047\072\001\002\000\056\015\uffa1\017\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\001\002" +
    "\000\004\017\135\001\002\000\060\015\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\001\002\000\006\015\143\023\142\001\002\000" +
    "\004\025\140\001\002\000\036\004\050\005\045\006\056" +
    "\007\041\010\062\011\055\012\043\013\054\014\061\016" +
    "\040\020\052\027\060\030\046\050\042\001\002\000\046" +
    "\015\uffe4\023\uffe4\026\101\027\105\030\074\031\102\032" +
    "\067\033\066\036\104\037\100\040\070\041\106\042\071" +
    "\043\103\044\075\045\076\046\073\047\072\001\002\000" +
    "\004\010\144\001\002\000\056\015\uff9d\017\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\001" +
    "\002\000\004\025\145\001\002\000\036\004\050\005\045" +
    "\006\056\007\041\010\062\011\055\012\043\013\054\014" +
    "\061\016\040\020\052\027\060\030\046\050\042\001\002" +
    "\000\046\015\uffe5\023\uffe5\026\101\027\105\030\074\031" +
    "\102\032\067\033\066\036\104\037\100\040\070\041\106" +
    "\042\071\043\103\044\075\045\076\046\073\047\072\001" +
    "\002\000\056\015\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\001\002\000\056\015" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\001\002\000\006\021\152\023\153\001" +
    "\002\000\056\015\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\001\002\000\036\004" +
    "\050\005\045\006\056\007\041\010\062\011\055\012\043" +
    "\013\054\014\061\016\040\020\052\027\060\030\046\050" +
    "\042\001\002\000\050\017\uffe7\021\uffe7\023\uffe7\026\101" +
    "\027\105\030\074\031\102\032\067\033\066\036\104\037" +
    "\100\040\070\041\106\042\071\043\103\044\075\045\076" +
    "\046\073\047\072\001\002\000\004\010\156\001\002\000" +
    "\004\016\157\001\002\000\040\004\050\005\045\006\056" +
    "\007\041\010\062\011\055\012\043\013\054\014\061\016" +
    "\040\017\uffbf\020\052\027\060\030\046\050\042\001\002" +
    "\000\004\017\161\001\002\000\060\015\uffc1\017\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\001\002\000\056\015\uffbd\017\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\001\002" +
    "\000\056\015\uffac\017\uffac\021\uffac\022\uffac\023\uffac\025" +
    "\uffac\026\uffac\027\105\030\074\031\102\032\067\033\066" +
    "\036\104\037\100\040\070\041\106\042\071\043\103\044" +
    "\075\045\076\046\uffac\047\uffac\001\002\000\044\017\165" +
    "\026\101\027\105\030\074\031\102\032\067\033\066\036" +
    "\104\037\100\040\070\041\106\042\071\043\103\044\075" +
    "\045\076\046\073\047\072\001\002\000\056\015\uffa3\017" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\001\002\000\044\022\ufff4\026\101\027\105\030" +
    "\074\031\102\032\067\033\066\036\104\037\100\040\070" +
    "\041\106\042\071\043\103\044\075\045\076\046\073\047" +
    "\072\001\002\000\044\021\170\026\101\027\105\030\074" +
    "\031\102\032\067\033\066\036\104\037\100\040\070\041" +
    "\106\042\071\043\103\044\075\045\076\046\073\047\072" +
    "\001\002\000\014\051\037\052\032\053\030\054\027\055" +
    "\031\001\002\000\036\004\050\005\045\006\056\007\041" +
    "\010\062\011\055\012\043\013\054\014\061\016\040\020" +
    "\052\027\060\030\046\050\042\001\002\000\044\022\ufff2" +
    "\026\101\027\105\030\074\031\102\032\067\033\066\036" +
    "\104\037\100\040\070\041\106\042\071\043\103\044\075" +
    "\045\076\046\073\047\072\001\002\000\016\016\130\051" +
    "\037\052\032\053\030\054\027\055\031\001\002\000\036" +
    "\004\050\005\045\006\056\007\041\010\062\011\055\012" +
    "\043\013\054\014\061\016\040\020\052\027\060\030\046" +
    "\050\042\001\002\000\044\022\ufff3\026\101\027\105\030" +
    "\074\031\102\032\067\033\066\036\104\037\100\040\070" +
    "\041\106\042\071\043\103\044\075\045\076\046\073\047" +
    "\072\001\002\000\004\002\001\001\002\000\022\002\ufffa" +
    "\010\ufffa\056\ufffa\057\ufffa\060\ufffa\063\ufffa\065\ufffa\070" +
    "\ufffa\001\002\000\004\016\201\001\002\000\006\017\205" +
    "\056\204\001\002\000\006\017\uffc5\023\243\001\002\000" +
    "\004\017\237\001\002\000\004\010\236\001\002\000\004" +
    "\014\206\001\002\000\022\010\025\056\004\057\016\060" +
    "\013\061\215\062\207\063\012\065\017\001\002\000\036" +
    "\004\050\005\045\006\056\007\041\010\062\011\055\012" +
    "\043\013\054\014\061\016\040\020\052\027\060\030\046" +
    "\050\042\001\002\000\024\010\uffd6\015\uffd6\056\uffd6\057" +
    "\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\065\uffd6\001\002" +
    "\000\004\022\233\001\002\000\004\022\232\001\002\000" +
    "\024\010\uffde\015\uffde\056\uffde\057\uffde\060\uffde\061\uffde" +
    "\062\uffde\063\uffde\065\uffde\001\002\000\004\022\231\001" +
    "\002\000\004\022\230\001\002\000\006\022\227\024\155" +
    "\001\002\000\024\010\uffd7\015\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\065\uffd7\001\002\000\004" +
    "\022\226\001\002\000\024\010\025\015\225\056\004\057" +
    "\016\060\013\061\215\062\207\063\012\065\017\001\002" +
    "\000\004\022\223\001\002\000\024\010\uffda\015\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\065\uffda" +
    "\001\002\000\024\010\uffdf\015\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\065\uffdf\001\002\000\022" +
    "\002\uffc6\010\uffc6\056\uffc6\057\uffc6\060\uffc6\063\uffc6\065" +
    "\uffc6\070\uffc6\001\002\000\024\010\uffd5\015\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065\uffd5\001" +
    "\002\000\024\010\uffd4\015\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\065\uffd4\001\002\000\024\010" +
    "\uffd9\015\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\065\uffd9\001\002\000\024\010\uffdc\015\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc" +
    "\001\002\000\024\010\uffdb\015\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\065\uffdb\001\002\000\024" +
    "\010\uffdd\015\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\065\uffdd\001\002\000\044\022\235\026\101" +
    "\027\105\030\074\031\102\032\067\033\066\036\104\037" +
    "\100\040\070\041\106\042\071\043\103\044\075\045\076" +
    "\046\073\047\072\001\002\000\024\010\uffd8\015\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\065\uffd8" +
    "\001\002\000\006\017\uffc3\023\uffc3\001\002\000\004\014" +
    "\240\001\002\000\022\010\025\056\004\057\016\060\013" +
    "\061\215\062\207\063\012\065\017\001\002\000\024\010" +
    "\025\015\242\056\004\057\016\060\013\061\215\062\207" +
    "\063\012\065\017\001\002\000\022\002\uffc7\010\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\063\uffc7\065\uffc7\070\uffc7\001\002" +
    "\000\004\056\244\001\002\000\004\010\245\001\002\000" +
    "\006\017\uffc4\023\uffc4\001\002\000\022\002\ufff6\010\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\063\ufff6\065\ufff6\070\ufff6\001" +
    "\002\000\036\004\050\005\045\006\056\007\041\010\062" +
    "\011\055\012\043\013\054\014\061\016\040\020\052\027" +
    "\060\030\046\050\042\001\002\000\044\017\251\026\101" +
    "\027\105\030\074\031\102\032\067\033\066\036\104\037" +
    "\100\040\070\041\106\042\071\043\103\044\075\045\076" +
    "\046\073\047\072\001\002\000\004\014\252\001\002\000" +
    "\006\066\253\067\255\001\002\000\036\004\050\005\045" +
    "\006\056\007\041\010\062\011\055\012\043\013\054\014" +
    "\061\016\040\020\052\027\060\030\046\050\042\001\002" +
    "\000\010\015\263\066\253\067\255\001\002\000\004\025" +
    "\257\001\002\000\010\015\uffca\066\uffca\067\uffca\001\002" +
    "\000\004\014\260\001\002\000\022\010\025\056\004\057" +
    "\016\060\013\061\215\062\207\063\012\065\017\001\002" +
    "\000\024\010\025\015\262\056\004\057\016\060\013\061" +
    "\215\062\207\063\012\065\017\001\002\000\010\015\uffc8" +
    "\066\uffc8\067\uffc8\001\002\000\030\002\uffcc\010\uffcc\015" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\065\uffcc\070\uffcc\001\002\000\010\015\uffcb\066\uffcb\067" +
    "\uffcb\001\002\000\044\025\266\026\101\027\105\030\074" +
    "\031\102\032\067\033\066\036\104\037\100\040\070\041" +
    "\106\042\071\043\103\044\075\045\076\046\073\047\072" +
    "\001\002\000\004\014\267\001\002\000\022\010\025\056" +
    "\004\057\016\060\013\061\215\062\207\063\012\065\017" +
    "\001\002\000\024\010\025\015\271\056\004\057\016\060" +
    "\013\061\215\062\207\063\012\065\017\001\002\000\010" +
    "\015\uffc9\066\uffc9\067\uffc9\001\002\000\040\004\050\005" +
    "\045\006\056\007\041\010\062\011\055\012\043\013\054" +
    "\014\061\016\040\017\274\020\052\027\060\030\046\050" +
    "\042\001\002\000\044\017\275\026\101\027\105\030\074" +
    "\031\102\032\067\033\066\036\104\037\100\040\070\041" +
    "\106\042\071\043\103\044\075\045\076\046\073\047\072" +
    "\001\002\000\004\022\uffe3\001\002\000\004\022\uffe2\001" +
    "\002\000\022\002\ufff5\010\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\063\ufff5\065\ufff5\070\ufff5\001\002\000\022\002\ufffc\010" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\063\ufffc\065\ufffc\070\ufffc" +
    "\001\002\000\040\004\050\005\045\006\056\007\041\010" +
    "\062\011\055\012\043\013\054\014\061\016\040\017\302" +
    "\020\052\027\060\030\046\050\042\001\002\000\044\017" +
    "\303\026\101\027\105\030\074\031\102\032\067\033\066" +
    "\036\104\037\100\040\070\041\106\042\071\043\103\044" +
    "\075\045\076\046\073\047\072\001\002\000\004\022\uffe1" +
    "\001\002\000\004\022\uffe0\001\002\000\036\004\050\005" +
    "\045\006\056\007\041\010\062\011\055\012\043\013\054" +
    "\014\061\016\040\020\052\027\060\030\046\050\042\001" +
    "\002\000\044\017\306\026\101\027\105\030\074\031\102" +
    "\032\067\033\066\036\104\037\100\040\070\041\106\042" +
    "\071\043\103\044\075\045\076\046\073\047\072\001\002" +
    "\000\004\014\307\001\002\000\022\010\025\056\004\057" +
    "\016\060\013\061\215\062\207\063\012\065\017\001\002" +
    "\000\024\010\025\015\311\056\004\057\016\060\013\061" +
    "\215\062\207\063\012\065\017\001\002\000\032\002\uffd3" +
    "\010\uffd3\015\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\312\065\uffd3\070\uffd3\001\002\000\006" +
    "\014\317\063\331\001\002\000\030\002\uffd2\010\uffd2\015" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\065\uffd2\070\uffd2\001\002\000\032\002\uffd1\010\uffd1\015" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\064\315\065\uffd1\070\uffd1\001\002\000\006\014\317\063" +
    "\320\001\002\000\030\002\uffd0\010\uffd0\015\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\070" +
    "\uffd0\001\002\000\022\010\025\056\004\057\016\060\013" +
    "\061\215\062\207\063\012\065\017\001\002\000\004\016" +
    "\321\001\002\000\036\004\050\005\045\006\056\007\041" +
    "\010\062\011\055\012\043\013\054\014\061\016\040\020" +
    "\052\027\060\030\046\050\042\001\002\000\044\017\323" +
    "\026\101\027\105\030\074\031\102\032\067\033\066\036" +
    "\104\037\100\040\070\041\106\042\071\043\103\044\075" +
    "\045\076\046\073\047\072\001\002\000\004\014\324\001" +
    "\002\000\022\010\025\056\004\057\016\060\013\061\215" +
    "\062\207\063\012\065\017\001\002\000\024\010\025\015" +
    "\326\056\004\057\016\060\013\061\215\062\207\063\012" +
    "\065\017\001\002\000\032\002\uffce\010\uffce\015\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\065\uffce\070\uffce\001\002\000\024\010\025\015\330\056" +
    "\004\057\016\060\013\061\215\062\207\063\012\065\017" +
    "\001\002\000\030\002\uffcf\010\uffcf\015\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf\070\uffcf" +
    "\001\002\000\004\016\332\001\002\000\036\004\050\005" +
    "\045\006\056\007\041\010\062\011\055\012\043\013\054" +
    "\014\061\016\040\020\052\027\060\030\046\050\042\001" +
    "\002\000\044\017\334\026\101\027\105\030\074\031\102" +
    "\032\067\033\066\036\104\037\100\040\070\041\106\042" +
    "\071\043\103\044\075\045\076\046\073\047\072\001\002" +
    "\000\004\014\335\001\002\000\022\010\025\056\004\057" +
    "\016\060\013\061\215\062\207\063\012\065\017\001\002" +
    "\000\024\010\025\015\337\056\004\057\016\060\013\061" +
    "\215\062\207\063\012\065\017\001\002\000\032\002\uffcd" +
    "\010\uffcd\015\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\070\uffcd\001\002\000\022" +
    "\002\ufffb\010\ufffb\056\ufffb\057\ufffb\060\ufffb\063\ufffb\065" +
    "\ufffb\070\ufffb\001\002\000\022\002\uffff\010\uffff\056\uffff" +
    "\057\uffff\060\uffff\063\uffff\065\uffff\070\uffff\001\002\000" +
    "\022\002\ufffd\010\ufffd\056\ufffd\057\ufffd\060\ufffd\063\ufffd" +
    "\065\ufffd\070\ufffd\001\002\000\006\022\ufff1\023\350\001" +
    "\002\000\020\022\uffee\023\uffee\051\037\052\032\053\030" +
    "\054\027\055\031\001\002\000\006\022\uffef\023\uffef\001" +
    "\002\000\036\004\050\005\045\006\056\007\041\010\062" +
    "\011\055\012\043\013\054\014\061\016\040\020\052\027" +
    "\060\030\046\050\042\001\002\000\046\022\uffed\023\uffed" +
    "\026\101\027\105\030\074\031\102\032\067\033\066\036" +
    "\104\037\100\040\070\041\106\042\071\043\103\044\075" +
    "\045\076\046\073\047\072\001\002\000\004\010\344\001" +
    "\002\000\006\022\ufff0\023\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\032\002\023\004\022\005\014\006\007\007" +
    "\004\010\006\013\013\014\010\017\017\022\005\025\025" +
    "\032\020\001\001\000\006\011\342\012\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\022\005\014\007\340\010\006\013\013\014\010\017" +
    "\017\022\005\025\025\032\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\050" +
    "\032\052\034\166\001\001\000\010\005\050\032\052\034" +
    "\165\001\001\000\014\005\050\030\043\031\056\032\052" +
    "\034\046\001\001\000\002\001\001\000\010\005\050\032" +
    "\052\034\163\001\001\000\002\001\001\000\010\005\050" +
    "\032\052\034\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\050\032\052\034\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\050\030\150\032\052\034\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\050\032\052" +
    "\034\146\001\001\000\004\033\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\050\032\052\034\064" +
    "\001\001\000\002\001\001\000\010\005\050\032\052\034" +
    "\125\001\001\000\010\005\050\032\052\034\124\001\001" +
    "\000\010\005\050\032\052\034\123\001\001\000\010\005" +
    "\050\032\052\034\122\001\001\000\010\005\050\032\052" +
    "\034\121\001\001\000\010\005\050\032\052\034\120\001" +
    "\001\000\010\005\050\032\052\034\117\001\001\000\010" +
    "\005\050\032\052\034\116\001\001\000\010\005\050\032" +
    "\052\034\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\050\032\052\034\112\001\001\000\010\005" +
    "\050\032\052\034\111\001\001\000\010\005\050\032\052" +
    "\034\110\001\001\000\002\001\001\000\010\005\050\032" +
    "\052\034\107\001\001\000\010\005\050\032\052\034\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\050" +
    "\032\052\034\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\050\030\043\031\133\032\052\034\046\001\001\000" +
    "\010\005\050\032\052\034\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\050\032\052" +
    "\034\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\050\032\052" +
    "\034\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\050\032\052\034\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\050\030\043" +
    "\031\157\032\052\034\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\170\001\001\000\010\005\050\032\052" +
    "\034\171\001\001\000\002\001\001\000\004\003\173\001" +
    "\001\000\010\005\050\032\052\034\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\202\027\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\221\005\215\010\210\013\213\014\211\015\220" +
    "\016\212\017\216\022\207\032\217\001\001\000\010\005" +
    "\050\032\052\034\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\221\005\215\010\210\013" +
    "\213\014\211\016\223\017\216\022\207\032\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\221\005\215\010\210\013" +
    "\213\014\211\015\240\016\212\017\216\022\207\032\217" +
    "\001\001\000\024\004\221\005\215\010\210\013\213\014" +
    "\211\016\223\017\216\022\207\032\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\050\032\052\034\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\253\024\255\001\001\000\010\005\050\032\052\034\264" +
    "\001\001\000\004\024\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\221\005\215" +
    "\010\210\013\213\014\211\015\260\016\212\017\216\022" +
    "\207\032\217\001\001\000\024\004\221\005\215\010\210" +
    "\013\213\014\211\016\223\017\216\022\207\032\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\221\005" +
    "\215\010\210\013\213\014\211\015\267\016\212\017\216" +
    "\022\207\032\217\001\001\000\024\004\221\005\215\010" +
    "\210\013\213\014\211\016\223\017\216\022\207\032\217" +
    "\001\001\000\002\001\001\000\010\005\050\032\052\034" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\050\032\052\034\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\050\032\052\034" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\221\005\215\010\210\013\213\014\211\015\307\016" +
    "\212\017\216\022\207\032\217\001\001\000\024\004\221" +
    "\005\215\010\210\013\213\014\211\016\223\017\216\022" +
    "\207\032\217\001\001\000\006\020\312\021\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\221" +
    "\005\215\010\210\013\213\014\211\015\326\016\212\017" +
    "\216\022\207\032\217\001\001\000\002\001\001\000\010" +
    "\005\050\032\052\034\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\221\005\215\010\210\013\213" +
    "\014\211\015\324\016\212\017\216\022\207\032\217\001" +
    "\001\000\024\004\221\005\215\010\210\013\213\014\211" +
    "\016\223\017\216\022\207\032\217\001\001\000\002\001" +
    "\001\000\024\004\221\005\215\010\210\013\213\014\211" +
    "\016\223\017\216\022\207\032\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\050\032\052\034\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\221\005\215\010\210\013\213\014\211\015\335\016\212" +
    "\017\216\022\207\032\217\001\001\000\024\004\221\005" +
    "\215\010\210\013\213\014\211\016\223\017\216\022\207" +
    "\032\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\345\001\001\000\002\001\001\000\010\005\050\032" +
    "\052\034\346\001\001\000\002\001\001\000\004\012\350" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private AST ast;
	
	public AST getAST(){
		return ast;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {




  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
			parser.ast = new AST(a);
            System.out.println("FS OK");
			
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPORTAR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Si a = (Si)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SELECCIONA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Selecciona a = (Selecciona)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= LLAMADA_METODO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LlamadaFuncion a = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= LLAMADA_METODOS puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGNACION ::= identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		 RESULT = new Asignacion(Tipo.VAR, a, b, oleft+1, oright+1); 
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= identificador punto identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AsignacionObjeto(Tipo.VAR, a, b, d, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= identificador corcheteIzquierda E corcheteDerecha OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AsignacionArreglo(Tipo.VAR, a, b, d, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= var_ SEMIDECLARACION 
            {
              Declaracion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<Asignacion> a = (LinkedList<Asignacion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Declaracion(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SEMIDECLARACION ::= SEMIDECLARACION coma ASIGNA 
            {
              LinkedList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<Asignacion> a = (LinkedList<Asignacion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Asignacion b = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SEMIDECLARACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SEMIDECLARACION ::= ASIGNA 
            {
              LinkedList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SEMIDECLARACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNA ::= identificador 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Asignacion(Tipo.VAR, a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNA ::= identificador OP_ASIGNACION E 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Asignacion(Tipo.VAR, a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ASIGNA",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP_ASIGNACION ::= igual 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP_ASIGNACION ::= masigual 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_ASIGNACION ::= menosigual 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ASIGNACION ::= porigual 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ASIGNACION ::= diagonaligual 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXS ::= EXS coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXS",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXS ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("EXS",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OBJS ::= OBJS coma identificador dospuntos E 
            {
              Map<String,Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Map<String,Expresion> a = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.put(b, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJS",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OBJS ::= identificador dospuntos E 
            {
              Map<String,Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new HashMap<String, Expresion>(); RESULT.put(a, b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("OBJS",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPRIMIR ::= imprimir_ parIzquierda parDerecha 
            {
              Imprimir RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		RESULT = new Imprimir(null, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPRIMIR ::= imprimir_ parIzquierda E parDerecha 
            {
              Imprimir RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Imprimir(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMPORTAR ::= importar_ parIzquierda parDerecha 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMPORTAR ::= importar_ parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUES ::= BLOQUES BLOQUE 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUES",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUES ::= BLOQUE 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUES",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= DECLARACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= ASIGNACION puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= IMPRIMIR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= IMPORTAR puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= detener_ puntoycoma 
            {
              NodoAST RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Detener(xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= retornar_ E puntoycoma 
            {
              NodoAST RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Retornar(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= SI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Si a = (Si)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= SELECCIONA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Selecciona a = (Selecciona)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= LLAMADA_METODO puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LlamadaFuncion a = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= LLAMADA_METODOS puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Si(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINO 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		SubSi c = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINOSI 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<SubSi> c = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SI ::= si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha SINOSI SINO 
            {
              Si RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<SubSi> c = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		SubSi d = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Si(a, b, xleft+1, xright+1, c, d);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SINO ::= sino_ llaveIzquierda BLOQUES llaveDerecha 
            {
              SubSi RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new SubSi(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINO",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SINOSI ::= SINOSI sino_ si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              LinkedList<SubSi> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).right;
		LinkedList<SubSi> a = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a; RESULT.add(new SubSi(b, c, xleft+1, xright+1));
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINOSI",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SINOSI ::= sino_ si_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              LinkedList<SubSi> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(new SubSi(a, b, xleft+1, xright+1));
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SINOSI",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SELECCIONA ::= selecciona_ parIzquierda E parDerecha llaveIzquierda CASOS llaveDerecha 
            {
              Selecciona RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Selecciona(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("SELECCIONA",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASO ::= caso_ E dospuntos llaveIzquierda BLOQUES llaveDerecha 
            {
              Caso RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Caso(a, b, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASO ::= defecto_ dospuntos llaveIzquierda BLOQUES llaveDerecha 
            {
              Caso RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Caso(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCION ::= funcion_ identificador parIzquierda PARAMETROS parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Funcion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Funcion(a, b, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCION ::= funcion_ identificador parIzquierda parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Funcion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Funcion(a, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETRO ::= PARAMETRO coma var_ identificador 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETRO",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETRO ::= var_ identificador 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARAMETRO",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LLAMADA_METODO ::= identificador parIzquierda PARMS parDerecha 
            {
              LlamadaFuncion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
						if(b != null){
							RESULT = new LlamadaFuncion(a, b, aleft+1, aright+1);
						} else {
							RESULT = new LlamadaFuncion(a, b, aleft+1, aright+1);
						}
					
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMADA_METODOS ::= LLAMADA_METODOS punto identificador parIzquierda PARMS parDerecha 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODOS",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LLAMADA_METODOS ::= identificador punto identificador parIzquierda PARMS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODOS",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARMS ::= 
            {
              LinkedList<Expresion> RESULT =null;
		RESULT=null;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARMS",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARMS ::= EXS 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("PARMS",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= menos E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.MENOS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= mas E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.MAS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.MAS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.MENOS, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E asterisco E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.ASTERISCO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E diagonal E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.BARRA, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operacion.Operador.INTERCALACION, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.AUMENTO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Aritmetica(a, Operacion.Operador.DECREMENTO, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MAYORQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MENORQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MAYORIGUALQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.MENORIGUALQUE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.IGUAL, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Relacional(a, b, Operacion.Operador.DIFERENTE, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, b, Operacion.Operador.AND, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, b, Operacion.Operador.OR, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= not E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Logica(a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= tstring 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.CADENA, a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= tchar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.CADENA, a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.ENTERO, new Integer(a), aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.DECIMAL, new Double(a), aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Identificador(a, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= nulo_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.NULL, "nulo", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= verdadero_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.BOOLEANO, "verdadero", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= falso_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Literal(Tipo.BOOLEANO, "falso", aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= parIzquierda E parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= identificador punto identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new AccesoObjeto(a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= identificador punto identificador corcheteIzquierda E corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new AccesoObjeto(a, b, c, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= identificador corcheteIzquierda E corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new AccesoArreglo(a, b, aleft+1, aright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = new Ternario(a, b, c, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= corcheteIzquierda EXS corcheteDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.ARREGLO, a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= llaveIzquierda OBJS llaveDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Map<String,Expresion> a = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = new Literal(Tipo.OBJETO, a, xleft+1, xright+1);
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= LLAMADA_METODO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		LlamadaFuncion a = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= LLAMADA_METODOS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
