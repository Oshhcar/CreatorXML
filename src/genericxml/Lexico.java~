/* The following code was generated by JFlex 1.6.1 */

package genericxml;

import java_cup.runtime.Symbol;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int PLANO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\31\1\32\1\3\22\0\1\5\1\0\1\42"+
    "\1\30\1\33\10\0\1\41\1\2\1\46\12\1\2\0\1\43\1\45"+
    "\1\44\2\0\1\14\1\27\1\20\1\21\1\16\1\25\1\40\1\37"+
    "\1\6\2\0\1\23\1\7\1\17\1\11\1\10\1\0\1\12\1\24"+
    "\1\13\1\26\1\15\1\0\1\22\1\36\2\0\1\47\4\0\1\14"+
    "\1\27\1\20\1\21\1\16\1\25\1\40\1\37\1\6\2\0\1\23"+
    "\1\7\1\17\1\11\1\10\1\0\1\12\1\24\1\13\1\26\1\15"+
    "\1\0\1\22\1\36\1\0\1\34\1\50\1\35\7\0\1\31\252\0"+
    "\2\6\115\0\1\24\u1ea8\0\1\31\1\31\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\13\1\1\4\5\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\14\1\15"+
    "\1\16\1\17\2\16\2\0\1\20\34\0\1\21\2\13"+
    "\1\22\1\23\1\24\1\25\2\16\13\0\1\26\10\0"+
    "\1\27\24\0\1\13\1\16\26\0\1\30\1\0\1\31"+
    "\1\32\3\0\1\33\10\0\1\34\6\0\1\3\1\0"+
    "\1\3\1\13\1\3\1\16\27\0\1\35\1\36\10\0"+
    "\1\37\3\0\1\40\1\0\1\41\1\42\1\0\1\13"+
    "\1\3\1\16\1\3\22\0\1\43\1\44\2\0\1\45"+
    "\2\0\1\46\1\47\6\0\1\50\1\0\1\13\1\16"+
    "\6\0\1\51\20\0\1\52\1\53\1\54\1\0\1\55"+
    "\1\56\15\0\1\51\10\0\1\57\1\0\1\60\54\0"+
    "\1\61\1\62\3\0\1\63\1\64\14\0\1\65\20\0"+
    "\1\66\11\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\173\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\173\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d"+
    "\0\173\0\173\0\173\0\173\0\173\0\173\0\u0386\0\u03af"+
    "\0\173\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce"+
    "\0\173\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed"+
    "\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d"+
    "\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u035d\0\u094a\0\u0973\0\u099c"+
    "\0\173\0\173\0\173\0\173\0\u09c5\0\u09ee\0\u0a17\0\u0a40"+
    "\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88"+
    "\0\u0bb1\0\u04a5\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7"+
    "\0\u0cd0\0\u0cf9\0\173\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6"+
    "\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e"+
    "\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056"+
    "\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e"+
    "\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6"+
    "\0\u130f\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\173"+
    "\0\u142e\0\173\0\173\0\u1457\0\u1480\0\u14a9\0\173\0\u14d2"+
    "\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\173"+
    "\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739"+
    "\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881"+
    "\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9"+
    "\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf\0\u1ae8\0\u1b11"+
    "\0\u1b3a\0\u1b63\0\u1b8c\0\173\0\173\0\u1bb5\0\u1bde\0\u1c07"+
    "\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\173\0\u1cfd\0\u1d26"+
    "\0\u1d4f\0\173\0\u1d78\0\173\0\173\0\u1da1\0\u1dca\0\u0386"+
    "\0\u1df3\0\u0401\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9"+
    "\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031"+
    "\0\u205a\0\u2083\0\u20ac\0\u20d5\0\173\0\173\0\u20fe\0\u2127"+
    "\0\u2150\0\u2179\0\u21a2\0\173\0\173\0\u21cb\0\u21f4\0\u221d"+
    "\0\u2246\0\u226f\0\u2298\0\173\0\u1710\0\u1762\0\u17b4\0\u22c1"+
    "\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\u0a17\0\u23b7\0\u23e0"+
    "\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6\0\u24ff\0\u2528"+
    "\0\u2551\0\u257a\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\173\0\173"+
    "\0\173\0\u2647\0\173\0\173\0\u2670\0\u2699\0\u26c2\0\u26eb"+
    "\0\u2714\0\u273d\0\u2766\0\u278f\0\u27b8\0\u27e1\0\u280a\0\u2833"+
    "\0\u285c\0\173\0\u2885\0\u28ae\0\u28d7\0\u2900\0\u2929\0\u2952"+
    "\0\u297b\0\u29a4\0\173\0\u29cd\0\173\0\u29f6\0\u2a1f\0\u2a48"+
    "\0\u2a71\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u2b67\0\u2b90"+
    "\0\u2bb9\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d\0\u2c86\0\u2caf\0\u2cd8"+
    "\0\u2d01\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5\0\u2dce\0\u2df7\0\u2e20"+
    "\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u2f16\0\u2f3f\0\u2f68"+
    "\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087\0\u30b0"+
    "\0\u30d9\0\173\0\173\0\u3102\0\u312b\0\u3154\0\173\0\173"+
    "\0\u317d\0\u31a6\0\u31cf\0\u31f8\0\u3221\0\u324a\0\u3273\0\u329c"+
    "\0\u32c5\0\u32ee\0\u3317\0\u3340\0\173\0\u3369\0\u3392\0\u33bb"+
    "\0\u33e4\0\u340d\0\u3436\0\u345f\0\u3488\0\u34b1\0\u34da\0\u3503"+
    "\0\u352c\0\u3555\0\u357e\0\u35a7\0\u35d0\0\173\0\u35f9\0\u3622"+
    "\0\u364b\0\u3674\0\u369d\0\u36c6\0\u36ef\0\u3718\0\u3741\0\173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\2\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\4\1\25\1\4\1\26\1\27"+
    "\1\0\1\7\1\4\1\30\1\4\1\31\3\4\1\32"+
    "\1\33\1\34\1\35\1\36\2\4\3\37\2\0\23\37"+
    "\1\40\11\37\1\41\4\37\1\42\1\37\3\43\3\44"+
    "\22\43\1\45\1\43\1\44\10\43\1\46\4\43\1\4"+
    "\52\0\1\5\1\47\52\0\1\7\53\0\1\50\11\0"+
    "\1\51\35\0\1\52\5\0\1\53\11\0\1\54\36\0"+
    "\1\55\52\0\1\56\40\0\1\57\3\0\1\60\1\0"+
    "\1\61\1\0\1\62\51\0\1\63\1\64\2\0\1\65"+
    "\2\0\1\66\40\0\1\67\51\0\1\70\42\0\1\71"+
    "\4\0\1\72\43\0\1\73\14\0\1\74\36\0\1\75"+
    "\1\0\1\76\40\0\1\77\56\0\1\100\11\0\1\101"+
    "\33\0\1\102\67\0\1\103\2\0\1\104\15\0\35\105"+
    "\1\106\13\105\3\37\2\0\35\37\1\0\4\37\1\0"+
    "\4\37\2\0\23\37\1\107\2\37\1\110\6\37\1\0"+
    "\4\37\1\0\1\37\12\0\1\111\1\112\3\0\1\113"+
    "\22\0\1\114\6\0\3\43\3\0\24\43\1\0\10\43"+
    "\1\0\4\43\4\0\3\44\24\0\1\44\16\0\3\43"+
    "\3\0\22\43\1\115\1\43\1\0\1\116\7\43\1\0"+
    "\4\43\1\0\6\117\1\120\1\121\3\117\1\122\1\117"+
    "\1\123\1\124\1\117\1\125\1\126\1\117\1\127\3\117"+
    "\1\130\16\117\1\131\2\117\1\0\1\132\57\0\1\133"+
    "\57\0\1\134\53\0\1\135\51\0\1\136\40\0\1\137"+
    "\62\0\1\140\33\0\1\141\66\0\1\142\31\0\1\143"+
    "\63\0\1\144\46\0\1\145\50\0\1\146\43\0\1\147"+
    "\50\0\1\150\54\0\1\151\46\0\1\152\42\0\1\153"+
    "\101\0\1\154\27\0\1\155\3\0\1\156\37\0\1\157"+
    "\51\0\1\160\62\0\1\161\47\0\1\162\47\0\1\163"+
    "\43\0\1\164\44\0\1\165\1\166\35\0\3\103\1\6"+
    "\1\7\24\103\2\0\16\103\33\104\1\167\15\104\35\0"+
    "\1\106\13\0\3\107\1\6\1\7\24\107\2\37\7\107"+
    "\1\103\4\107\1\103\1\107\3\110\2\104\26\110\1\170"+
    "\6\110\1\104\4\110\1\104\1\110\3\115\1\6\1\7"+
    "\1\103\23\115\1\43\1\0\10\115\1\103\4\115\1\103"+
    "\3\116\3\104\24\116\1\104\1\171\7\116\1\104\4\116"+
    "\1\104\46\117\1\131\11\117\1\172\36\117\1\131\30\117"+
    "\1\173\17\117\1\131\20\117\1\174\27\117\1\131\20\117"+
    "\1\175\27\117\1\131\21\117\1\176\26\117\1\131\13\117"+
    "\1\177\34\117\1\131\16\117\1\200\1\117\1\201\27\117"+
    "\1\131\10\117\1\202\37\117\1\131\13\117\1\203\34\117"+
    "\1\131\2\117\6\131\1\204\1\205\3\131\1\206\1\131"+
    "\1\207\1\210\1\131\1\211\1\212\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\2\131\11\0\1\214\45\0\1\215"+
    "\50\0\1\216\55\0\1\217\74\0\1\220\27\0\1\221"+
    "\43\0\1\222\55\0\1\223\45\0\1\224\74\0\1\225"+
    "\17\0\1\226\53\0\1\227\50\0\1\230\52\0\1\231"+
    "\43\0\1\232\71\0\1\233\33\0\1\234\51\0\1\235"+
    "\46\0\1\236\63\0\1\237\35\0\1\240\55\0\1\241"+
    "\45\0\1\242\61\0\1\243\43\0\1\244\52\0\1\245"+
    "\40\0\1\246\67\0\1\247\2\0\1\250\15\0\3\37"+
    "\2\0\23\37\1\251\2\37\1\252\6\37\1\0\4\37"+
    "\1\0\1\37\3\43\3\0\22\43\1\253\1\43\1\0"+
    "\1\254\7\43\1\0\4\43\1\0\10\117\1\255\35\117"+
    "\1\131\25\117\1\256\22\117\1\131\24\117\1\200\23\117"+
    "\1\131\21\117\1\257\26\117\1\131\17\117\1\260\30\117"+
    "\1\131\21\117\1\261\26\117\1\131\15\117\1\262\32\117"+
    "\1\131\27\117\1\263\20\117\1\131\26\117\1\264\21\117"+
    "\1\131\15\117\1\265\32\117\1\131\2\117\6\131\1\204"+
    "\1\266\3\131\1\206\1\131\1\207\1\210\1\131\1\211"+
    "\1\212\5\131\1\213\13\131\2\0\1\131\1\0\10\131"+
    "\1\204\1\205\3\131\1\206\1\131\1\207\1\210\1\131"+
    "\1\211\1\212\4\131\1\267\1\213\13\131\2\0\1\131"+
    "\1\0\10\131\1\204\1\205\3\131\1\206\1\131\1\207"+
    "\1\270\1\131\1\211\1\212\5\131\1\213\13\131\2\0"+
    "\1\131\1\0\10\131\1\204\1\205\3\131\1\206\1\131"+
    "\1\207\1\271\1\131\1\211\1\212\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\10\131\1\204\1\205\3\131\1\206"+
    "\1\131\1\207\1\210\1\272\1\211\1\212\5\131\1\213"+
    "\13\131\2\0\1\131\1\0\10\131\1\204\1\205\1\131"+
    "\1\273\1\131\1\206\1\131\1\207\1\210\1\131\1\211"+
    "\1\212\5\131\1\213\13\131\2\0\1\131\1\0\10\131"+
    "\1\204\1\205\3\131\1\206\1\274\1\207\1\275\1\131"+
    "\1\211\1\212\5\131\1\213\13\131\2\0\1\131\1\0"+
    "\10\131\1\204\1\205\1\131\1\276\1\131\1\206\1\131"+
    "\1\207\1\210\1\131\1\211\1\212\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\2\131\12\0\1\277\45\0\1\300"+
    "\50\0\1\301\47\0\1\302\54\0\1\303\47\0\1\304"+
    "\50\0\1\305\50\0\1\306\100\0\1\307\23\0\1\310"+
    "\50\0\1\311\46\0\1\312\44\0\1\313\54\0\1\314"+
    "\3\0\1\315\44\0\1\316\44\0\1\317\62\0\1\320"+
    "\44\0\1\321\52\0\1\322\45\0\1\323\53\0\1\324"+
    "\51\0\1\325\31\0\30\104\1\326\2\104\1\167\15\104"+
    "\30\0\1\7\2\0\1\250\15\0\3\110\2\104\23\110"+
    "\1\327\2\110\1\170\6\110\1\104\4\110\1\104\1\110"+
    "\3\37\2\0\23\37\1\330\2\37\1\252\6\37\1\0"+
    "\4\37\1\0\1\37\3\116\3\104\22\116\1\331\1\116"+
    "\1\104\1\171\7\116\1\104\4\116\1\104\3\43\3\0"+
    "\22\43\1\332\1\43\1\0\1\254\7\43\1\0\4\43"+
    "\1\0\11\117\1\333\34\117\1\131\15\117\1\334\32\117"+
    "\1\131\15\117\1\335\32\117\1\131\10\117\1\336\37\117"+
    "\1\131\15\117\1\337\32\117\1\131\13\117\1\340\34\117"+
    "\1\131\20\117\1\341\27\117\1\131\15\117\1\342\32\117"+
    "\1\131\13\117\1\343\34\117\1\131\2\117\6\131\1\204"+
    "\1\205\1\344\2\131\1\206\1\131\1\207\1\210\1\131"+
    "\1\211\1\212\4\131\1\267\1\213\13\131\2\0\1\131"+
    "\1\0\10\131\1\204\1\205\3\131\1\206\1\131\1\207"+
    "\1\210\1\131\1\211\1\212\1\131\1\345\3\131\1\213"+
    "\13\131\2\0\1\131\1\0\10\131\1\204\1\205\3\131"+
    "\1\206\1\131\1\207\1\210\1\272\1\211\1\212\1\274"+
    "\4\131\1\213\13\131\2\0\1\131\1\0\10\131\1\204"+
    "\1\205\3\131\1\206\1\131\1\207\1\210\1\346\1\211"+
    "\1\212\5\131\1\213\13\131\2\0\1\131\1\0\10\131"+
    "\1\204\1\205\3\131\1\206\1\131\1\347\1\210\1\131"+
    "\1\211\1\212\5\131\1\213\13\131\2\0\1\131\1\0"+
    "\10\131\1\204\1\205\3\131\1\206\1\131\1\207\1\210"+
    "\1\350\1\211\1\212\5\131\1\213\13\131\2\0\1\131"+
    "\1\0\10\131\1\204\1\205\3\131\1\351\1\131\1\207"+
    "\1\210\1\131\1\211\1\212\5\131\1\213\13\131\2\0"+
    "\1\131\1\0\10\131\1\204\1\205\3\131\1\206\1\131"+
    "\1\207\1\210\1\272\1\211\1\212\3\131\1\352\1\131"+
    "\1\213\13\131\2\0\1\131\1\0\10\131\1\204\1\205"+
    "\3\131\1\353\1\131\1\207\1\210\1\131\1\211\1\212"+
    "\5\131\1\213\13\131\2\0\1\131\1\0\2\131\13\0"+
    "\1\354\46\0\1\355\50\0\1\356\46\0\1\357\57\0"+
    "\1\360\51\0\1\361\43\0\1\362\55\0\1\363\43\0"+
    "\1\364\54\0\1\365\45\0\1\366\46\0\1\367\56\0"+
    "\1\370\46\0\1\371\46\0\1\372\56\0\1\373\45\0"+
    "\1\374\62\0\1\375\20\0\3\37\2\0\23\37\1\376"+
    "\11\37\1\0\4\37\1\0\1\37\3\43\3\0\22\43"+
    "\1\377\1\43\1\0\10\43\1\0\4\43\1\0\12\117"+
    "\1\u0100\33\117\1\131\10\117\1\u0101\37\117\1\131\16\117"+
    "\1\u0102\31\117\1\131\16\117\1\u0103\31\117\1\131\14\117"+
    "\1\u0104\3\117\1\u0105\27\117\1\131\2\117\43\340\1\117"+
    "\1\u0106\1\340\1\u0107\2\340\20\117\1\200\25\117\1\131"+
    "\16\117\1\u0108\31\117\1\131\21\117\1\340\26\117\1\131"+
    "\2\117\6\131\1\204\1\205\1\131\1\u0109\1\131\1\206"+
    "\1\131\1\207\1\210\1\131\1\211\1\212\5\131\1\213"+
    "\13\131\2\0\1\131\1\0\10\131\1\204\1\205\3\131"+
    "\1\u010a\1\131\1\207\1\210\1\131\1\211\1\212\5\131"+
    "\1\213\13\131\2\0\1\131\1\0\10\131\1\204\1\205"+
    "\3\131\1\u010b\1\131\1\347\1\210\1\131\1\211\1\212"+
    "\5\131\1\213\13\131\2\0\1\131\1\0\10\131\1\u010c"+
    "\1\205\3\131\1\206\1\131\1\207\1\271\1\131\1\211"+
    "\1\212\5\131\1\213\13\131\2\0\1\131\1\0\10\131"+
    "\1\204\1\205\3\131\1\u010d\1\131\1\207\1\210\1\131"+
    "\1\211\1\212\5\131\1\213\13\131\2\0\1\131\1\0"+
    "\10\131\1\204\1\205\1\131\1\u010e\1\131\1\206\1\131"+
    "\1\207\1\270\1\131\1\211\1\212\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\10\131\1\204\1\205\3\131\1\206"+
    "\1\131\1\207\1\u010f\1\131\1\211\1\212\5\131\1\213"+
    "\13\131\2\0\1\131\1\0\10\131\1\204\1\205\1\131"+
    "\1\u0110\1\131\1\206\1\131\1\207\1\270\1\131\1\211"+
    "\1\212\5\131\1\213\13\131\2\0\1\131\1\0\2\131"+
    "\14\0\1\u0111\52\0\1\u0112\51\0\1\u0113\37\0\1\u0114"+
    "\16\0\1\u0115\41\0\1\u0116\46\0\1\u0117\50\0\1\u0118"+
    "\57\0\1\u0119\43\0\1\u011a\46\0\1\u011b\45\0\1\u011c"+
    "\53\0\1\u011d\34\0\13\117\1\336\32\117\1\131\11\117"+
    "\1\u011e\36\117\1\131\21\117\1\u011f\26\117\1\131\14\117"+
    "\1\340\33\117\1\131\13\117\1\u0120\34\117\1\131\21\117"+
    "\1\u0121\26\117\1\131\2\117\6\u0107\1\u0122\1\u0123\3\u0107"+
    "\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107"+
    "\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\2\u0107\21\117"+
    "\1\u012c\24\117\1\131\2\117\6\131\1\204\1\205\2\131"+
    "\1\u012d\1\206\1\131\1\207\1\210\1\131\1\211\1\212"+
    "\5\131\1\213\13\131\2\0\1\131\1\0\10\131\1\u012e"+
    "\1\205\3\131\1\206\1\131\1\207\1\270\1\131\1\211"+
    "\1\212\5\131\1\213\13\131\2\0\1\131\1\0\10\131"+
    "\1\204\1\205\3\131\1\206\1\u012f\1\207\1\270\1\131"+
    "\1\211\1\212\5\131\1\213\13\131\2\0\1\131\1\0"+
    "\10\131\1\204\1\266\3\131\1\206\1\u0130\1\207\1\210"+
    "\1\131\1\211\1\212\5\131\1\213\13\131\2\0\1\131"+
    "\1\0\10\131\1\204\1\205\2\131\1\u0131\1\206\1\131"+
    "\1\207\1\u0132\1\131\1\211\1\212\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\2\131\43\u010e\1\0\1\u0133\1\u010e"+
    "\1\0\2\u010e\6\131\1\204\1\205\3\131\1\206\1\131"+
    "\1\207\1\210\1\272\1\u0134\1\212\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\10\131\1\204\1\205\3\131\1\206"+
    "\1\131\1\207\1\210\1\u010e\1\211\1\212\5\131\1\213"+
    "\13\131\2\0\1\131\1\0\2\131\12\0\1\u0135\57\0"+
    "\1\u0136\47\0\1\u0137\47\0\1\u0138\37\0\1\u0139\52\0"+
    "\1\u013a\61\0\1\u013b\42\0\1\u013c\35\0\16\117\1\u013d"+
    "\27\117\1\131\16\117\1\340\31\117\1\131\25\117\1\340"+
    "\22\117\1\131\20\117\1\u013e\27\117\1\131\2\117\6\u0107"+
    "\1\u0122\1\u013f\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107"+
    "\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107"+
    "\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125"+
    "\1\u0126\1\u0107\1\u0127\1\u0128\4\u0107\1\u0140\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107"+
    "\1\u0124\1\u0107\1\u0125\1\u0141\1\u0107\1\u0127\1\u0128\5\u0107"+
    "\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122"+
    "\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0142\1\u0107\1\u0127"+
    "\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b"+
    "\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126"+
    "\1\u0143\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a"+
    "\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\1\u0107\1\u0144\1\u0107"+
    "\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107"+
    "\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122"+
    "\1\u0123\3\u0107\1\u0124\1\u0145\1\u0125\1\u0146\1\u0107\1\u0127"+
    "\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b"+
    "\10\u0107\1\u0122\1\u0123\1\u0107\1\u0147\1\u0107\1\u0124\1\u0107"+
    "\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\2\u0107\43\u012b\1\0\1\u012a"+
    "\4\u012b\14\117\1\u0148\31\117\1\131\2\117\6\131\1\204"+
    "\1\205\3\131\1\u0149\1\131\1\207\1\210\1\131\1\211"+
    "\1\212\5\131\1\213\13\131\2\0\1\131\1\0\10\131"+
    "\1\204\1\u014a\3\131\1\206\1\131\1\207\1\210\1\131"+
    "\1\211\1\212\5\131\1\213\13\131\2\0\1\131\1\0"+
    "\10\131\1\204\1\205\3\131\1\206\1\131\1\207\1\210"+
    "\1\u014b\1\211\1\212\5\131\1\213\13\131\2\0\1\131"+
    "\1\0\10\131\1\204\1\205\2\131\1\u010e\1\206\1\131"+
    "\1\207\1\210\1\131\1\211\1\212\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\10\131\1\204\1\205\1\131\1\u014c"+
    "\1\131\1\206\1\131\1\207\1\210\1\131\1\211\1\212"+
    "\5\131\1\213\13\131\2\0\1\131\1\0\10\131\1\204"+
    "\1\205\3\131\1\206\1\131\1\207\1\210\1\u014d\1\211"+
    "\1\212\1\274\4\131\1\213\13\131\2\0\1\131\1\0"+
    "\10\131\1\204\1\205\1\131\1\273\1\131\1\351\1\131"+
    "\1\207\1\210\1\131\1\211\1\212\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\2\131\6\0\1\u014e\50\0\1\u014f"+
    "\50\0\1\u0150\61\0\1\u0151\43\0\1\u0152\47\0\1\u0153"+
    "\50\0\1\u0154\37\0\21\117\1\u0155\24\117\1\131\23\117"+
    "\1\u0156\24\117\1\131\2\117\6\u0107\1\u0122\1\u0123\1\u0157"+
    "\2\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128"+
    "\4\u0107\1\u0140\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b"+
    "\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126"+
    "\1\u0107\1\u0127\1\u0128\1\u0107\1\u0158\3\u0107\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107"+
    "\1\u0124\1\u0107\1\u0125\1\u0126\1\u0143\1\u0127\1\u0128\1\u0145"+
    "\4\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107"+
    "\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0159"+
    "\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107"+
    "\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u015a"+
    "\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0"+
    "\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124"+
    "\1\u0107\1\u0125\1\u0126\1\u015b\1\u0127\1\u0128\5\u0107\1\u0129"+
    "\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123"+
    "\3\u0107\1\u015c\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128"+
    "\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107"+
    "\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0143"+
    "\1\u0127\1\u0128\3\u0107\1\u015d\1\u0107\1\u0129\13\u0107\1\0"+
    "\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107\1\u015e"+
    "\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129"+
    "\13\u0107\1\0\1\u012a\1\u0107\1\u012b\2\u0107\13\117\1\u015f"+
    "\32\117\1\131\2\117\6\131\1\204\1\205\3\131\1\206"+
    "\1\u0130\1\207\1\270\1\131\1\211\1\212\5\131\1\213"+
    "\13\131\2\0\1\131\1\0\10\131\1\204\1\205\1\344"+
    "\2\131\1\206\1\131\1\207\1\u0160\1\131\1\211\1\212"+
    "\4\131\1\267\1\213\13\131\2\0\1\131\1\0\10\131"+
    "\1\204\1\205\3\131\1\206\1\u010e\1\207\1\210\1\131"+
    "\1\211\1\212\5\131\1\213\13\131\2\0\1\131\1\0"+
    "\10\131\1\204\1\205\3\131\1\206\1\131\1\207\1\210"+
    "\1\131\1\211\1\212\1\131\1\u010e\3\131\1\213\13\131"+
    "\2\0\1\131\1\0\10\131\1\204\1\205\3\131\1\206"+
    "\1\131\1\347\1\u0161\1\131\1\211\1\212\5\131\1\213"+
    "\13\131\2\0\1\131\1\0\2\131\14\0\1\u0162\50\0"+
    "\1\u0163\54\0\1\u0164\44\0\1\u0165\45\0\1\u0166\51\0"+
    "\1\u0167\62\0\1\u0168\24\0\6\117\1\u011f\37\117\1\131"+
    "\13\117\1\u0103\34\117\1\131\2\117\6\u0107\1\u0122\1\u0123"+
    "\1\u0107\1\u0169\1\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107"+
    "\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107"+
    "\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107\1\u016a\1\u0107\1\u0125"+
    "\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0"+
    "\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107\1\u016b"+
    "\1\u0107\1\u015a\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129"+
    "\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u016c\1\u0123"+
    "\3\u0107\1\u0124\1\u0107\1\u0125\1\u0142\1\u0107\1\u0127\1\u0128"+
    "\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107"+
    "\1\u0122\1\u0123\3\u0107\1\u016d\1\u0107\1\u0125\1\u0126\1\u0107"+
    "\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107"+
    "\1\u012b\10\u0107\1\u0122\1\u0123\1\u0107\1\u016e\1\u0107\1\u0124"+
    "\1\u0107\1\u0125\1\u0141\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129"+
    "\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123"+
    "\3\u0107\1\u0124\1\u0107\1\u0125\1\u016f\1\u0107\1\u0127\1\u0128"+
    "\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107"+
    "\1\u0122\1\u0123\1\u0107\1\u0170\1\u0107\1\u0124\1\u0107\1\u0125"+
    "\1\u0141\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0"+
    "\1\u012a\1\u0107\1\u012b\2\u0107\11\117\1\u0171\34\117\1\131"+
    "\2\117\6\131\1\204\1\205\3\131\1\206\1\131\1\207"+
    "\1\210\1\272\1\211\1\u0172\5\131\1\213\13\131\2\0"+
    "\1\131\1\0\10\131\1\204\1\205\3\131\1\206\1\131"+
    "\1\207\1\210\1\272\1\211\1\u0173\5\131\1\213\13\131"+
    "\2\0\1\131\1\0\2\131\6\0\1\u0174\65\0\1\u0175"+
    "\46\0\1\u0176\27\0\6\u0107\1\u0122\1\u0123\2\u0107\1\u0177"+
    "\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107"+
    "\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0178"+
    "\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0141\1\u0107\1\u0127"+
    "\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b"+
    "\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0179\1\u0125\1\u0141"+
    "\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a"+
    "\1\u0107\1\u012b\10\u0107\1\u0122\1\u013f\3\u0107\1\u0124\1\u017a"+
    "\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\2\u0107"+
    "\1\u017b\1\u0124\1\u0107\1\u0125\1\u017c\1\u0107\1\u0127\1\u0128"+
    "\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\2\u0107"+
    "\43\u016e\1\0\1\u0133\1\u016e\1\u012b\2\u016e\6\u0107\1\u0122"+
    "\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0143\1\u017d"+
    "\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b"+
    "\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126"+
    "\1\u016e\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a"+
    "\1\u0107\1\u012b\2\u0107\24\117\1\340\21\117\1\131\2\117"+
    "\6\131\1\u017e\1\205\3\131\1\206\1\274\1\207\1\275"+
    "\1\131\1\211\1\212\5\131\1\213\13\131\2\0\1\131"+
    "\1\0\10\131\1\204\1\205\1\131\1\u0130\1\131\1\206"+
    "\1\274\1\207\1\275\1\131\1\211\1\212\5\131\1\213"+
    "\13\131\2\0\1\131\1\0\2\131\14\0\1\u017f\62\0"+
    "\1\u0180\22\0\6\u0107\1\u0122\1\u0123\3\u0107\1\u0181\1\u0107"+
    "\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0182\3\u0107"+
    "\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107"+
    "\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122"+
    "\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0183\1\u0127"+
    "\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b"+
    "\10\u0107\1\u0122\1\u0123\2\u0107\1\u016e\1\u0124\1\u0107\1\u0125"+
    "\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0"+
    "\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\1\u0107\1\u0184"+
    "\1\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128"+
    "\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107"+
    "\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0185"+
    "\1\u0127\1\u0128\1\u0145\4\u0107\1\u0129\13\u0107\1\0\1\u012a"+
    "\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\1\u0107\1\u0144\1\u0107"+
    "\1\u015c\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107"+
    "\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\2\u0107\6\131"+
    "\1\204\1\266\3\131\1\206\1\u010e\1\207\1\210\1\131"+
    "\1\211\1\212\5\131\1\213\13\131\2\0\1\131\1\0"+
    "\2\131\23\0\1\u0186\45\0\1\u0187\30\0\6\u0107\1\u0122"+
    "\1\u0123\3\u0107\1\u0124\1\u017a\1\u0125\1\u0141\1\u0107\1\u0127"+
    "\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b"+
    "\10\u0107\1\u0122\1\u0123\1\u0157\2\u0107\1\u0124\1\u0107\1\u0125"+
    "\1\u0188\1\u0107\1\u0127\1\u0128\4\u0107\1\u0140\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107"+
    "\1\u0124\1\u016e\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107"+
    "\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\10\u0107\1\u0122"+
    "\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126\1\u0107\1\u0127"+
    "\1\u0128\1\u0107\1\u016e\3\u0107\1\u0129\13\u0107\1\0\1\u012a"+
    "\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107"+
    "\1\u015a\1\u0189\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\2\u0107\20\0\1\u018a\30\0"+
    "\6\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107\1\u0125\1\u0126"+
    "\1\u0143\1\u0127\1\u018b\5\u0107\1\u0129\13\u0107\1\0\1\u012a"+
    "\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\3\u0107\1\u0124\1\u0107"+
    "\1\u0125\1\u0126\1\u0143\1\u0127\1\u018c\5\u0107\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\2\u0107\6\0\1\u018d\42\0"+
    "\6\u0107\1\u018e\1\u0123\3\u0107\1\u0124\1\u0145\1\u0125\1\u0146"+
    "\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107\1\0\1\u012a"+
    "\1\u0107\1\u012b\10\u0107\1\u0122\1\u0123\1\u0107\1\u017a\1\u0107"+
    "\1\u0124\1\u0145\1\u0125\1\u0146\1\u0107\1\u0127\1\u0128\5\u0107"+
    "\1\u0129\13\u0107\1\0\1\u012a\1\u0107\1\u012b\2\u0107\11\0"+
    "\1\u018f\37\0\6\u0107\1\u0122\1\u013f\3\u0107\1\u0124\1\u016e"+
    "\1\u0125\1\u0126\1\u0107\1\u0127\1\u0128\5\u0107\1\u0129\13\u0107"+
    "\1\0\1\u012a\1\u0107\1\u012b\2\u0107\17\0\1\u0190\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14186];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\13\1\1\11\5\1\6\11"+
    "\2\1\1\11\5\1\2\0\1\11\34\0\3\1\4\11"+
    "\2\1\13\0\1\1\10\0\1\11\24\0\2\1\26\0"+
    "\1\11\1\0\2\11\3\0\1\11\10\0\1\11\6\0"+
    "\1\1\1\0\4\1\27\0\2\11\10\0\1\11\3\0"+
    "\1\11\1\0\2\11\1\0\4\1\22\0\2\11\2\0"+
    "\1\1\2\0\2\11\6\0\1\11\1\0\2\1\6\0"+
    "\1\1\20\0\3\11\1\0\2\11\15\0\1\11\10\0"+
    "\1\11\1\0\1\11\54\0\2\11\3\0\2\11\14\0"+
    "\1\11\20\0\1\11\11\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	StringBuffer string = new StringBuffer();
	boolean blancos = false;
	
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}	
  
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext() + " Linea: "+(yyline+1) + " Columna: "+(yycolumn+1));
            }
          case 56: break;
          case 2: 
            { return symbol(Sym.entero, yytext());
            }
          case 57: break;
          case 3: 
            { /* se ignora */
            }
          case 58: break;
          case 4: 
            { return symbol(Sym.x_);
            }
          case 59: break;
          case 5: 
            { return symbol(Sym.y_);
            }
          case 60: break;
          case 6: 
            { string.setLength(0); yybegin(STRING);
            }
          case 61: break;
          case 7: 
            { return symbol(Sym.menorque);
            }
          case 62: break;
          case 8: 
            { blancos=false; string.setLength(0); yybegin(PLANO); return symbol(Sym.mayorque);
            }
          case 63: break;
          case 9: 
            { return symbol(Sym.igual);
            }
          case 64: break;
          case 10: 
            { return symbol(Sym.diagonal);
            }
          case 65: break;
          case 11: 
            { string.append( yytext() );
            }
          case 66: break;
          case 12: 
            { yybegin(YYINITIAL);
					   return symbol(Sym.tstring, string.toString());
            }
          case 67: break;
          case 13: 
            { string.append('\\');
            }
          case 68: break;
          case 14: 
            { string.append( yytext() ); blancos=true;
            }
          case 69: break;
          case 15: 
            { string.append( "" );
            }
          case 70: break;
          case 16: 
            { return symbol(Sym.id_);
            }
          case 71: break;
          case 17: 
            { return symbol(Sym.codigo, yytext());
            }
          case 72: break;
          case 18: 
            { string.append('\r');
            }
          case 73: break;
          case 19: 
            { string.append('\t');
            }
          case 74: break;
          case 20: 
            { string.append('\n');
            }
          case 75: break;
          case 21: 
            { string.append('\"');
            }
          case 76: break;
          case 22: 
            { return symbol(Sym.decimal, yytext());
            }
          case 77: break;
          case 23: 
            { return symbol(Sym.tam_);
            }
          case 78: break;
          case 24: 
            { return symbol(Sym.path_);
            }
          case 79: break;
          case 25: 
            { return symbol(Sym.tipo_);
            }
          case 80: break;
          case 26: 
            { return symbol(Sym.true_, yytext());
            }
          case 81: break;
          case 27: 
            { return symbol(Sym.alto_);
            }
          case 82: break;
          case 28: 
            { return symbol(Sym.dato_);
            }
          case 83: break;
          case 29: 
            { return symbol(Sym.texto_);
            }
          case 84: break;
          case 30: 
            { return symbol(Sym.ancho_);
            }
          case 85: break;
          case 31: 
            { return symbol(Sym.color_);
            }
          case 86: break;
          case 32: 
            { return symbol(Sym.false_, yytext());
            }
          case 87: break;
          case 33: 
            { return symbol(Sym.borde_);
            }
          case 88: break;
          case 34: 
            { return symbol(Sym.boton_);
            }
          case 89: break;
          case 35: 
            { return symbol(Sym.minimo_);
            }
          case 90: break;
          case 36: 
            { return symbol(Sym.maximo_);
            }
          case 91: break;
          case 37: 
            { return symbol(Sym.accion_);
            }
          case 92: break;
          case 38: 
            { return symbol(Sym.enviar_);
            }
          case 93: break;
          case 39: 
            { return symbol(Sym.nombre_);
            }
          case 94: break;
          case 40: 
            { return symbol(Sym.fuente_);
            }
          case 95: break;
          case 41: 
            { yybegin(YYINITIAL); 
									//System.out.println("entra abrir"); 
									yypushback(yylength());
            }
          case 96: break;
          case 42: 
            { return symbol(Sym.ventana_);
            }
          case 97: break;
          case 43: 
            { return symbol(Sym.negrita_);
            }
          case 98: break;
          case 44: 
            { return symbol(Sym.control_);
            }
          case 99: break;
          case 45: 
            { return symbol(Sym.cursiva_);
            }
          case 100: break;
          case 46: 
            { return symbol(Sym.defecto_);
            }
          case 101: break;
          case 47: 
            { yybegin(YYINITIAL); 
										//System.out.println("value:"+yytext()); 
										yypushback(yylength()); 
										
										if(string.length()>=1 && blancos){
											//System.out.println(string.toString());
											return symbol(Sym.textoPlano, string.toString());
										}
            }
          case 102: break;
          case 48: 
            { return symbol(Sym.importar_);
            }
          case 103: break;
          case 49: 
            { return symbol(Sym.multimedia_);
            }
          case 104: break;
          case 50: 
            { return symbol(Sym.referencia_);
            }
          case 105: break;
          case 51: 
            { return symbol(Sym.contenedor_);
            }
          case 106: break;
          case 52: 
            { return symbol(Sym.listadatos_);
            }
          case 107: break;
          case 53: 
            { return symbol(Sym.accionfinal_);
            }
          case 108: break;
          case 54: 
            { return symbol(Sym.accioninicial_);
            }
          case 109: break;
          case 55: 
            { return symbol(Sym.autoreproduccion_);
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
