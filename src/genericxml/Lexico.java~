/* The following code was generated by JFlex 1.6.1 */

package genericxml;

import java_cup.runtime.Symbol;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int PLANO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\31\1\32\1\3\22\0\1\51\1\0\1\42"+
    "\1\30\1\33\10\0\1\41\1\2\1\46\12\1\2\0\1\43\1\45"+
    "\1\44\2\0\1\14\1\27\1\20\1\21\1\16\1\25\1\40\1\37"+
    "\1\6\2\0\1\23\1\7\1\17\1\11\1\10\1\0\1\12\1\24"+
    "\1\13\1\26\1\15\1\0\1\22\1\36\2\0\1\47\4\0\1\14"+
    "\1\27\1\20\1\21\1\16\1\25\1\40\1\37\1\6\2\0\1\23"+
    "\1\7\1\17\1\11\1\10\1\0\1\12\1\24\1\13\1\26\1\15"+
    "\1\0\1\22\1\36\1\0\1\34\1\50\1\35\7\0\1\31\252\0"+
    "\2\6\115\0\1\24\u1ea8\0\1\31\1\31\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\13\1\1\4\5\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\16\1\17\2\0\1\21\33\0"+
    "\1\22\2\13\1\23\1\24\1\25\1\26\2\16\13\0"+
    "\1\27\7\0\1\30\25\0\1\13\1\16\26\0\1\31"+
    "\1\0\1\32\3\0\1\33\11\0\1\34\6\0\1\3"+
    "\1\0\1\3\1\13\1\3\1\16\27\0\1\35\1\36"+
    "\11\0\1\37\3\0\1\40\1\0\1\41\1\42\1\0"+
    "\1\13\1\3\1\16\1\3\22\0\1\43\1\44\2\0"+
    "\1\45\3\0\1\46\1\47\6\0\1\50\1\0\1\13"+
    "\1\16\6\0\1\51\21\0\1\52\1\53\1\54\1\0"+
    "\1\55\1\56\15\0\1\51\10\0\1\57\1\0\1\60"+
    "\36\0\1\61\17\0\1\62\1\63\3\0\1\64\1\65"+
    "\14\0\1\66\20\0\1\67\11\0\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\176\0\374"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\176\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\176\0\176\0\176\0\176\0\176\0\176\0\u039c\0\u03c6"+
    "\0\176\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec"+
    "\0\u0516\0\u0540\0\176\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2"+
    "\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u0372\0\u09ae\0\u09d8"+
    "\0\u0a02\0\176\0\176\0\176\0\176\0\u0a2c\0\u0a56\0\u0a80"+
    "\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0"+
    "\0\u0bfa\0\u0c24\0\u0516\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6"+
    "\0\u0d20\0\u0d4a\0\176\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c"+
    "\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c"+
    "\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc"+
    "\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c"+
    "\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c"+
    "\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac"+
    "\0\176\0\u14d6\0\176\0\u1500\0\u152a\0\u1554\0\176\0\u157e"+
    "\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce"+
    "\0\176\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4"+
    "\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944"+
    "\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94"+
    "\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4"+
    "\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\176\0\176\0\u1cb6\0\u1ce0"+
    "\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\176"+
    "\0\u1e30\0\u1e5a\0\u1e84\0\176\0\u1eae\0\176\0\176\0\u1ed8"+
    "\0\u1f02\0\u039c\0\u1f2c\0\u041a\0\u1f56\0\u1f80\0\u1faa\0\u1fd4"+
    "\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124"+
    "\0\u214e\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\176\0\176"+
    "\0\u224a\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c\0\176\0\176"+
    "\0\u2346\0\u2370\0\u239a\0\u23c4\0\u23ee\0\u2418\0\176\0\u17f4"+
    "\0\u1848\0\u189c\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea\0\u2514"+
    "\0\u0a80\0\u253e\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a"+
    "\0\u2664\0\u268e\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a"+
    "\0\u27b4\0\u27de\0\176\0\176\0\176\0\u2808\0\176\0\176"+
    "\0\u2832\0\u285c\0\u2886\0\u28b0\0\u28da\0\u2904\0\u292e\0\u2958"+
    "\0\u2982\0\u29ac\0\u29d6\0\u2a00\0\u2a2a\0\176\0\u2a54\0\u2a7e"+
    "\0\u2aa8\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a\0\176\0\u2ba4"+
    "\0\176\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\u2cca"+
    "\0\u2cf4\0\u2d1e\0\u2d48\0\u2d72\0\u2d9c\0\u2dc6\0\u2df0\0\u2e1a"+
    "\0\u2e44\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec\0\u2f16\0\u2f40\0\u2f6a"+
    "\0\u2f94\0\u2fbe\0\u2fe8\0\u3012\0\u303c\0\u3066\0\u3090\0\176"+
    "\0\u30ba\0\u30e4\0\u310e\0\u3138\0\u3162\0\u318c\0\u31b6\0\u31e0"+
    "\0\u320a\0\u3234\0\u325e\0\u3288\0\u32b2\0\u32dc\0\u3306\0\176"+
    "\0\176\0\u3330\0\u335a\0\u3384\0\176\0\176\0\u33ae\0\u33d8"+
    "\0\u3402\0\u342c\0\u3456\0\u3480\0\u34aa\0\u34d4\0\u34fe\0\u3528"+
    "\0\u3552\0\u357c\0\176\0\u35a6\0\u35d0\0\u35fa\0\u3624\0\u364e"+
    "\0\u3678\0\u36a2\0\u36cc\0\u36f6\0\u3720\0\u374a\0\u3774\0\u379e"+
    "\0\u37c8\0\u37f2\0\u381c\0\176\0\u3846\0\u3870\0\u389a\0\u38c4"+
    "\0\u38ee\0\u3918\0\u3942\0\u396c\0\u3996\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\2\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\4\1\25\1\4\1\26\1\27"+
    "\1\0\1\7\1\4\1\30\1\4\1\31\3\4\1\32"+
    "\1\33\1\34\1\35\1\36\2\4\1\7\3\37\2\0"+
    "\23\37\1\40\11\37\1\41\4\37\1\42\2\37\3\43"+
    "\1\44\1\45\1\44\22\43\1\46\1\43\1\44\10\43"+
    "\1\47\4\43\1\4\1\50\53\0\1\5\1\51\53\0"+
    "\1\7\54\0\1\52\11\0\1\53\36\0\1\54\5\0"+
    "\1\55\11\0\1\56\37\0\1\57\53\0\1\60\41\0"+
    "\1\61\5\0\1\62\1\0\1\63\52\0\1\64\1\65"+
    "\2\0\1\66\2\0\1\67\41\0\1\70\52\0\1\71"+
    "\43\0\1\72\4\0\1\73\44\0\1\74\14\0\1\75"+
    "\37\0\1\76\1\0\1\77\41\0\1\100\57\0\1\101"+
    "\11\0\1\102\34\0\1\103\70\0\1\104\2\0\1\105"+
    "\16\0\35\106\1\107\14\106\3\37\2\0\35\37\1\0"+
    "\4\37\1\0\5\37\2\0\23\37\1\110\2\37\1\111"+
    "\6\37\1\0\4\37\1\0\2\37\12\0\1\112\1\113"+
    "\3\0\1\114\22\0\1\115\7\0\3\43\3\0\24\43"+
    "\1\0\10\43\1\0\4\43\5\0\1\44\1\0\1\44"+
    "\24\0\1\44\16\0\1\44\4\0\1\45\44\0\1\45"+
    "\3\43\3\0\22\43\1\116\1\43\1\0\1\117\7\43"+
    "\1\0\4\43\2\0\6\120\1\121\1\122\3\120\1\123"+
    "\1\120\1\124\1\125\1\120\1\126\1\127\1\120\1\130"+
    "\3\120\1\131\16\120\1\132\3\120\3\0\1\44\1\45"+
    "\1\44\24\0\1\44\16\0\1\50\1\0\1\133\60\0"+
    "\1\134\60\0\1\135\54\0\1\136\52\0\1\137\41\0"+
    "\1\140\63\0\1\141\34\0\1\142\50\0\1\143\64\0"+
    "\1\144\47\0\1\145\51\0\1\146\44\0\1\147\51\0"+
    "\1\150\50\0\1\151\4\0\1\152\47\0\1\153\43\0"+
    "\1\154\102\0\1\155\30\0\1\156\3\0\1\157\40\0"+
    "\1\160\52\0\1\161\63\0\1\162\50\0\1\163\50\0"+
    "\1\164\44\0\1\165\45\0\1\166\1\167\36\0\3\104"+
    "\1\6\1\7\24\104\2\0\17\104\33\105\1\170\16\105"+
    "\35\0\1\107\14\0\3\110\1\6\1\7\24\110\2\37"+
    "\7\110\1\104\4\110\1\104\2\110\3\111\2\105\26\111"+
    "\1\171\6\111\1\105\4\111\1\105\2\111\3\116\1\6"+
    "\1\7\1\104\23\116\1\43\1\0\10\116\1\104\4\116"+
    "\2\104\3\117\3\105\24\117\1\105\1\172\7\117\1\105"+
    "\4\117\2\105\46\120\1\132\12\120\1\173\36\120\1\132"+
    "\31\120\1\174\17\120\1\132\21\120\1\175\27\120\1\132"+
    "\21\120\1\176\27\120\1\132\22\120\1\177\26\120\1\132"+
    "\14\120\1\200\34\120\1\132\17\120\1\201\1\120\1\202"+
    "\27\120\1\132\11\120\1\203\37\120\1\132\14\120\1\204"+
    "\34\120\1\132\3\120\6\132\1\205\1\206\3\132\1\207"+
    "\1\132\1\210\1\211\1\132\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\3\132\11\0\1\215\46\0"+
    "\1\216\51\0\1\217\56\0\1\220\75\0\1\221\30\0"+
    "\1\222\44\0\1\223\53\0\1\224\75\0\1\225\20\0"+
    "\1\226\54\0\1\227\51\0\1\230\61\0\1\231\43\0"+
    "\1\232\44\0\1\233\72\0\1\234\34\0\1\235\52\0"+
    "\1\236\47\0\1\237\64\0\1\240\36\0\1\241\56\0"+
    "\1\242\46\0\1\243\62\0\1\244\44\0\1\245\53\0"+
    "\1\246\41\0\1\247\70\0\1\250\2\0\1\251\16\0"+
    "\3\37\2\0\23\37\1\252\2\37\1\253\6\37\1\0"+
    "\4\37\1\0\2\37\3\43\3\0\22\43\1\254\1\43"+
    "\1\0\1\255\7\43\1\0\4\43\2\0\10\120\1\256"+
    "\35\120\1\132\26\120\1\257\22\120\1\132\25\120\1\201"+
    "\23\120\1\132\22\120\1\260\26\120\1\132\20\120\1\261"+
    "\30\120\1\132\22\120\1\262\26\120\1\132\16\120\1\263"+
    "\32\120\1\132\30\120\1\264\20\120\1\132\27\120\1\265"+
    "\21\120\1\132\16\120\1\266\32\120\1\132\3\120\6\132"+
    "\1\205\1\267\3\132\1\207\1\132\1\210\1\211\1\132"+
    "\1\212\1\213\5\132\1\214\13\132\2\0\1\132\1\0"+
    "\11\132\1\205\1\206\3\132\1\207\1\132\1\210\1\211"+
    "\1\132\1\212\1\213\4\132\1\270\1\214\13\132\2\0"+
    "\1\132\1\0\11\132\1\205\1\206\3\132\1\207\1\132"+
    "\1\210\1\271\1\132\1\212\1\213\5\132\1\214\13\132"+
    "\2\0\1\132\1\0\11\132\1\205\1\206\3\132\1\207"+
    "\1\132\1\210\1\272\1\132\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\11\132\1\205\1\206\3\132"+
    "\1\207\1\132\1\210\1\211\1\273\1\212\1\213\5\132"+
    "\1\214\13\132\2\0\1\132\1\0\11\132\1\205\1\206"+
    "\1\132\1\274\1\132\1\207\1\132\1\210\1\211\1\132"+
    "\1\212\1\213\5\132\1\214\13\132\2\0\1\132\1\0"+
    "\11\132\1\205\1\206\3\132\1\207\1\275\1\210\1\276"+
    "\1\132\1\212\1\213\5\132\1\214\13\132\2\0\1\132"+
    "\1\0\11\132\1\205\1\206\1\132\1\277\1\132\1\207"+
    "\1\132\1\210\1\211\1\132\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\3\132\12\0\1\300\46\0"+
    "\1\301\51\0\1\302\50\0\1\303\55\0\1\304\50\0"+
    "\1\305\51\0\1\306\51\0\1\307\101\0\1\310\24\0"+
    "\1\311\51\0\1\312\51\0\1\313\47\0\1\314\45\0"+
    "\1\315\55\0\1\316\3\0\1\317\45\0\1\320\45\0"+
    "\1\321\63\0\1\322\45\0\1\323\46\0\1\324\53\0"+
    "\1\325\54\0\1\326\52\0\1\327\32\0\30\105\1\330"+
    "\2\105\1\170\16\105\30\0\1\7\2\0\1\251\16\0"+
    "\3\111\2\105\23\111\1\331\2\111\1\171\6\111\1\105"+
    "\4\111\1\105\2\111\3\37\2\0\23\37\1\332\2\37"+
    "\1\253\6\37\1\0\4\37\1\0\2\37\3\117\3\105"+
    "\22\117\1\333\1\117\1\105\1\172\7\117\1\105\4\117"+
    "\2\105\3\43\3\0\22\43\1\334\1\43\1\0\1\255"+
    "\7\43\1\0\4\43\2\0\11\120\1\335\34\120\1\132"+
    "\16\120\1\336\32\120\1\132\16\120\1\337\32\120\1\132"+
    "\11\120\1\340\37\120\1\132\16\120\1\341\32\120\1\132"+
    "\14\120\1\342\34\120\1\132\21\120\1\343\27\120\1\132"+
    "\16\120\1\344\32\120\1\132\14\120\1\345\34\120\1\132"+
    "\3\120\6\132\1\205\1\206\1\346\2\132\1\207\1\132"+
    "\1\210\1\211\1\132\1\212\1\213\4\132\1\270\1\214"+
    "\13\132\2\0\1\132\1\0\11\132\1\205\1\206\3\132"+
    "\1\207\1\132\1\210\1\211\1\132\1\212\1\213\1\132"+
    "\1\347\3\132\1\214\13\132\2\0\1\132\1\0\11\132"+
    "\1\205\1\206\3\132\1\207\1\132\1\210\1\211\1\273"+
    "\1\212\1\213\1\275\4\132\1\214\13\132\2\0\1\132"+
    "\1\0\11\132\1\205\1\206\3\132\1\207\1\132\1\210"+
    "\1\211\1\350\1\212\1\213\5\132\1\214\13\132\2\0"+
    "\1\132\1\0\11\132\1\205\1\206\3\132\1\207\1\132"+
    "\1\351\1\211\1\132\1\212\1\213\5\132\1\214\13\132"+
    "\2\0\1\132\1\0\11\132\1\205\1\206\3\132\1\207"+
    "\1\132\1\210\1\211\1\352\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\11\132\1\205\1\206\3\132"+
    "\1\353\1\132\1\210\1\211\1\132\1\212\1\213\5\132"+
    "\1\214\13\132\2\0\1\132\1\0\11\132\1\205\1\206"+
    "\3\132\1\207\1\132\1\210\1\211\1\273\1\212\1\213"+
    "\3\132\1\354\1\132\1\214\13\132\2\0\1\132\1\0"+
    "\11\132\1\205\1\206\3\132\1\355\1\132\1\210\1\211"+
    "\1\132\1\212\1\213\5\132\1\214\13\132\2\0\1\132"+
    "\1\0\3\132\13\0\1\356\47\0\1\357\51\0\1\360"+
    "\47\0\1\361\60\0\1\362\52\0\1\363\44\0\1\364"+
    "\60\0\1\365\47\0\1\366\44\0\1\367\55\0\1\370"+
    "\46\0\1\371\47\0\1\372\57\0\1\373\47\0\1\374"+
    "\47\0\1\375\57\0\1\376\46\0\1\377\63\0\1\u0100"+
    "\21\0\3\37\2\0\23\37\1\u0101\11\37\1\0\4\37"+
    "\1\0\2\37\3\43\3\0\22\43\1\u0102\1\43\1\0"+
    "\10\43\1\0\4\43\2\0\12\120\1\u0103\33\120\1\132"+
    "\11\120\1\u0104\37\120\1\132\17\120\1\u0105\31\120\1\132"+
    "\17\120\1\u0106\31\120\1\132\15\120\1\u0107\3\120\1\u0108"+
    "\27\120\1\132\3\120\43\342\1\120\1\u0109\1\342\1\u010a"+
    "\3\342\20\120\1\201\25\120\1\132\17\120\1\u010b\31\120"+
    "\1\132\22\120\1\342\26\120\1\132\3\120\6\132\1\205"+
    "\1\206\1\132\1\u010c\1\132\1\207\1\132\1\210\1\211"+
    "\1\132\1\212\1\213\5\132\1\214\13\132\2\0\1\132"+
    "\1\0\11\132\1\205\1\206\3\132\1\u010d\1\132\1\210"+
    "\1\211\1\132\1\212\1\213\5\132\1\214\13\132\2\0"+
    "\1\132\1\0\11\132\1\205\1\206\3\132\1\u010e\1\132"+
    "\1\351\1\211\1\132\1\212\1\213\5\132\1\214\13\132"+
    "\2\0\1\132\1\0\11\132\1\u010f\1\206\3\132\1\207"+
    "\1\132\1\210\1\272\1\132\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\11\132\1\205\1\206\3\132"+
    "\1\u0110\1\132\1\210\1\211\1\132\1\212\1\213\5\132"+
    "\1\214\13\132\2\0\1\132\1\0\11\132\1\205\1\206"+
    "\1\132\1\u0111\1\132\1\207\1\132\1\210\1\271\1\132"+
    "\1\212\1\213\5\132\1\214\13\132\2\0\1\132\1\0"+
    "\11\132\1\205\1\206\3\132\1\207\1\132\1\210\1\u0112"+
    "\1\132\1\212\1\213\5\132\1\214\13\132\2\0\1\132"+
    "\1\0\11\132\1\205\1\206\1\132\1\u0113\1\132\1\207"+
    "\1\132\1\210\1\271\1\132\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\3\132\14\0\1\u0114\53\0"+
    "\1\u0115\52\0\1\u0116\40\0\1\u0117\16\0\1\u0118\42\0"+
    "\1\u0119\51\0\1\u011a\47\0\1\u011b\51\0\1\u011c\60\0"+
    "\1\u011d\44\0\1\u011e\47\0\1\u011f\46\0\1\u0120\54\0"+
    "\1\u0121\35\0\13\120\1\340\32\120\1\132\12\120\1\u0122"+
    "\36\120\1\132\22\120\1\u0123\26\120\1\132\15\120\1\342"+
    "\33\120\1\132\14\120\1\u0124\34\120\1\132\22\120\1\u0125"+
    "\26\120\1\132\3\120\6\u010a\1\u0126\1\u0127\3\u010a\1\u0128"+
    "\1\u010a\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\3\u010a\21\120\1\u0130"+
    "\24\120\1\132\3\120\6\132\1\205\1\206\2\132\1\u0131"+
    "\1\207\1\132\1\210\1\211\1\132\1\212\1\213\5\132"+
    "\1\214\13\132\2\0\1\132\1\0\11\132\1\u0132\1\206"+
    "\3\132\1\207\1\132\1\210\1\271\1\132\1\212\1\213"+
    "\5\132\1\214\13\132\2\0\1\132\1\0\11\132\1\205"+
    "\1\206\3\132\1\207\1\u0133\1\210\1\271\1\132\1\212"+
    "\1\213\5\132\1\214\13\132\2\0\1\132\1\0\11\132"+
    "\1\205\1\267\3\132\1\207\1\u0134\1\210\1\211\1\132"+
    "\1\212\1\213\5\132\1\214\13\132\2\0\1\132\1\0"+
    "\11\132\1\205\1\206\2\132\1\u0135\1\207\1\132\1\210"+
    "\1\u0136\1\132\1\212\1\213\5\132\1\214\13\132\2\0"+
    "\1\132\1\0\3\132\43\u0111\1\0\1\u0137\1\u0111\1\0"+
    "\3\u0111\6\132\1\205\1\206\3\132\1\207\1\132\1\210"+
    "\1\211\1\273\1\u0138\1\213\5\132\1\214\13\132\2\0"+
    "\1\132\1\0\11\132\1\205\1\206\3\132\1\207\1\132"+
    "\1\210\1\211\1\u0111\1\212\1\213\5\132\1\214\13\132"+
    "\2\0\1\132\1\0\3\132\12\0\1\u0139\60\0\1\u013a"+
    "\50\0\1\u013b\50\0\1\u013c\40\0\1\u013d\53\0\1\u013e"+
    "\53\0\1\u013f\60\0\1\u0140\43\0\1\u0141\36\0\16\120"+
    "\1\u0142\27\120\1\132\17\120\1\342\31\120\1\132\26\120"+
    "\1\342\22\120\1\132\21\120\1\u0143\27\120\1\132\3\120"+
    "\6\u010a\1\u0126\1\u0144\3\u010a\1\u0128\1\u010a\1\u0129\1\u012a"+
    "\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e"+
    "\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a"+
    "\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c\4\u010a\1\u0145\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127"+
    "\3\u010a\1\u0128\1\u010a\1\u0129\1\u0146\1\u010a\1\u012b\1\u012c"+
    "\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a"+
    "\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129\1\u0147\1\u010a"+
    "\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a"+
    "\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129"+
    "\1\u012a\1\u0148\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0"+
    "\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\1\u010a\1\u0149"+
    "\1\u010a\1\u0128\1\u010a\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c"+
    "\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a"+
    "\1\u0126\1\u0127\3\u010a\1\u0128\1\u014a\1\u0129\1\u014b\1\u010a"+
    "\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a"+
    "\1\u012f\11\u010a\1\u0126\1\u0127\1\u010a\1\u014c\1\u010a\1\u0128"+
    "\1\u010a\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\3\u010a\43\u012f\1\0"+
    "\1\u012e\5\u012f\14\120\1\u014d\31\120\1\132\3\120\6\132"+
    "\1\205\1\206\3\132\1\u014e\1\132\1\210\1\211\1\132"+
    "\1\212\1\213\5\132\1\214\13\132\2\0\1\132\1\0"+
    "\11\132\1\205\1\u014f\3\132\1\207\1\132\1\210\1\211"+
    "\1\132\1\212\1\213\5\132\1\214\13\132\2\0\1\132"+
    "\1\0\11\132\1\205\1\206\3\132\1\207\1\132\1\210"+
    "\1\211\1\u0150\1\212\1\213\5\132\1\214\13\132\2\0"+
    "\1\132\1\0\11\132\1\205\1\206\2\132\1\u0111\1\207"+
    "\1\132\1\210\1\211\1\132\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\11\132\1\205\1\206\1\132"+
    "\1\u0151\1\132\1\207\1\132\1\210\1\211\1\132\1\212"+
    "\1\213\5\132\1\214\13\132\2\0\1\132\1\0\11\132"+
    "\1\205\1\206\3\132\1\207\1\132\1\210\1\211\1\u0152"+
    "\1\212\1\213\1\275\4\132\1\214\13\132\2\0\1\132"+
    "\1\0\11\132\1\205\1\206\1\132\1\274\1\132\1\353"+
    "\1\132\1\210\1\211\1\132\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\3\132\6\0\1\u0153\51\0"+
    "\1\u0154\51\0\1\u0155\62\0\1\u0156\44\0\1\u0157\50\0"+
    "\1\u0158\51\0\1\u0159\51\0\1\u015a\40\0\21\120\1\u015b"+
    "\24\120\1\132\24\120\1\u015c\24\120\1\132\3\120\6\u010a"+
    "\1\u0126\1\u0127\1\u015d\2\u010a\1\u0128\1\u010a\1\u0129\1\u012a"+
    "\1\u010a\1\u012b\1\u012c\4\u010a\1\u0145\1\u012d\13\u010a\1\0"+
    "\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128"+
    "\1\u010a\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c\1\u010a\1\u015e"+
    "\3\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a"+
    "\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129\1\u012a\1\u0148"+
    "\1\u012b\1\u012c\1\u014a\4\u010a\1\u012d\13\u010a\1\0\1\u012e"+
    "\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a"+
    "\1\u0129\1\u012a\1\u015f\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a"+
    "\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a"+
    "\1\u0128\1\u010a\1\u0160\1\u012a\1\u010a\1\u012b\1\u012c\5\u010a"+
    "\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126"+
    "\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129\1\u012a\1\u0161\1\u012b"+
    "\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f"+
    "\11\u010a\1\u0126\1\u0127\3\u010a\1\u0162\1\u010a\1\u0129\1\u012a"+
    "\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e"+
    "\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a"+
    "\1\u0129\1\u012a\1\u0148\1\u012b\1\u012c\3\u010a\1\u0163\1\u010a"+
    "\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126"+
    "\1\u0127\3\u010a\1\u0164\1\u010a\1\u0129\1\u012a\1\u010a\1\u012b"+
    "\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f"+
    "\3\u010a\13\120\1\u0165\32\120\1\132\3\120\6\132\1\205"+
    "\1\206\3\132\1\207\1\u0134\1\210\1\271\1\132\1\212"+
    "\1\213\5\132\1\214\13\132\2\0\1\132\1\0\11\132"+
    "\1\205\1\206\1\346\2\132\1\207\1\132\1\210\1\u0166"+
    "\1\132\1\212\1\213\4\132\1\270\1\214\13\132\2\0"+
    "\1\132\1\0\11\132\1\205\1\206\3\132\1\207\1\u0111"+
    "\1\210\1\211\1\132\1\212\1\213\5\132\1\214\13\132"+
    "\2\0\1\132\1\0\11\132\1\205\1\206\3\132\1\207"+
    "\1\132\1\210\1\211\1\132\1\212\1\213\1\132\1\u0111"+
    "\3\132\1\214\13\132\2\0\1\132\1\0\11\132\1\205"+
    "\1\206\3\132\1\207\1\132\1\351\1\u0167\1\132\1\212"+
    "\1\213\5\132\1\214\13\132\2\0\1\132\1\0\3\132"+
    "\14\0\1\u0168\51\0\1\u0169\55\0\1\u016a\45\0\1\u016b"+
    "\46\0\1\u016c\52\0\1\u016d\63\0\1\u016e\25\0\6\120"+
    "\1\u0123\37\120\1\132\14\120\1\u0106\34\120\1\132\3\120"+
    "\6\u010a\1\u0126\1\u0127\1\u010a\1\u016f\1\u010a\1\u0128\1\u010a"+
    "\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a"+
    "\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a"+
    "\1\u0170\1\u010a\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c\5\u010a"+
    "\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126"+
    "\1\u0127\3\u010a\1\u0171\1\u010a\1\u0160\1\u012a\1\u010a\1\u012b"+
    "\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f"+
    "\11\u010a\1\u0172\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129\1\u0147"+
    "\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e"+
    "\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0173\1\u010a"+
    "\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a"+
    "\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\1\u010a"+
    "\1\u0174\1\u010a\1\u0128\1\u010a\1\u0129\1\u0146\1\u010a\1\u012b"+
    "\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f"+
    "\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129\1\u0175"+
    "\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e"+
    "\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\1\u010a\1\u0176\1\u010a"+
    "\1\u0128\1\u010a\1\u0129\1\u0146\1\u010a\1\u012b\1\u012c\5\u010a"+
    "\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\3\u010a\11\120"+
    "\1\u0177\34\120\1\132\3\120\6\132\1\205\1\206\3\132"+
    "\1\207\1\132\1\210\1\211\1\273\1\212\1\u0178\5\132"+
    "\1\214\13\132\2\0\1\132\1\0\11\132\1\205\1\206"+
    "\3\132\1\207\1\132\1\210\1\211\1\273\1\212\1\u0179"+
    "\5\132\1\214\13\132\2\0\1\132\1\0\3\132\6\0"+
    "\1\u017a\66\0\1\u017b\47\0\1\u017c\30\0\6\u010a\1\u0126"+
    "\1\u0127\2\u010a\1\u017d\1\u0128\1\u010a\1\u0129\1\u012a\1\u010a"+
    "\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a"+
    "\1\u012f\11\u010a\1\u017e\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129"+
    "\1\u0146\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0"+
    "\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128"+
    "\1\u017f\1\u0129\1\u0146\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0144"+
    "\3\u010a\1\u0128\1\u0180\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c"+
    "\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a"+
    "\1\u0126\1\u0127\2\u010a\1\u0181\1\u0128\1\u010a\1\u0129\1\u0182"+
    "\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e"+
    "\1\u010a\1\u012f\3\u010a\43\u0174\1\0\1\u0137\1\u0174\1\u012f"+
    "\3\u0174\6\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129"+
    "\1\u012a\1\u0148\1\u0183\1\u012c\5\u010a\1\u012d\13\u010a\1\0"+
    "\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128"+
    "\1\u010a\1\u0129\1\u012a\1\u0174\1\u012b\1\u012c\5\u010a\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\3\u010a\24\120\1\342"+
    "\21\120\1\132\3\120\6\132\1\u0184\1\206\3\132\1\207"+
    "\1\275\1\210\1\276\1\132\1\212\1\213\5\132\1\214"+
    "\13\132\2\0\1\132\1\0\11\132\1\205\1\206\1\132"+
    "\1\u0134\1\132\1\207\1\275\1\210\1\276\1\132\1\212"+
    "\1\213\5\132\1\214\13\132\2\0\1\132\1\0\3\132"+
    "\14\0\1\u0185\63\0\1\u0186\23\0\6\u010a\1\u0126\1\u0127"+
    "\3\u010a\1\u0187\1\u010a\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c"+
    "\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a"+
    "\1\u0126\1\u0188\3\u010a\1\u0128\1\u010a\1\u0129\1\u012a\1\u010a"+
    "\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a"+
    "\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129"+
    "\1\u012a\1\u0189\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0"+
    "\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\2\u010a\1\u0174"+
    "\1\u0128\1\u010a\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c\5\u010a"+
    "\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126"+
    "\1\u0127\1\u010a\1\u018a\1\u010a\1\u0128\1\u010a\1\u0129\1\u012a"+
    "\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e"+
    "\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a"+
    "\1\u0129\1\u012a\1\u018b\1\u012b\1\u012c\1\u014a\4\u010a\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127"+
    "\1\u010a\1\u0149\1\u010a\1\u0162\1\u010a\1\u0129\1\u012a\1\u010a"+
    "\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a"+
    "\1\u012f\3\u010a\6\132\1\205\1\267\3\132\1\207\1\u0111"+
    "\1\210\1\211\1\132\1\212\1\213\5\132\1\214\13\132"+
    "\2\0\1\132\1\0\3\132\23\0\1\u018c\46\0\1\u018d"+
    "\31\0\6\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u0180\1\u0129"+
    "\1\u0146\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0"+
    "\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127\1\u015d\2\u010a"+
    "\1\u0128\1\u010a\1\u0129\1\u018e\1\u010a\1\u012b\1\u012c\4\u010a"+
    "\1\u0145\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a"+
    "\1\u0126\1\u0127\3\u010a\1\u0128\1\u0174\1\u0129\1\u012a\1\u010a"+
    "\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a"+
    "\1\u012f\11\u010a\1\u0126\1\u0127\3\u010a\1\u0128\1\u010a\1\u0129"+
    "\1\u012a\1\u010a\1\u012b\1\u012c\1\u010a\1\u0174\3\u010a\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127"+
    "\3\u010a\1\u0128\1\u010a\1\u0160\1\u018f\1\u010a\1\u012b\1\u012c"+
    "\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\3\u010a"+
    "\20\0\1\u0190\31\0\6\u010a\1\u0126\1\u0127\3\u010a\1\u0128"+
    "\1\u010a\1\u0129\1\u012a\1\u0148\1\u012b\1\u0191\5\u010a\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127"+
    "\3\u010a\1\u0128\1\u010a\1\u0129\1\u012a\1\u0148\1\u012b\1\u0192"+
    "\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\3\u010a"+
    "\6\0\1\u0193\43\0\6\u010a\1\u0194\1\u0127\3\u010a\1\u0128"+
    "\1\u014a\1\u0129\1\u014b\1\u010a\1\u012b\1\u012c\5\u010a\1\u012d"+
    "\13\u010a\1\0\1\u012e\1\u010a\1\u012f\11\u010a\1\u0126\1\u0127"+
    "\1\u010a\1\u0180\1\u010a\1\u0128\1\u014a\1\u0129\1\u014b\1\u010a"+
    "\1\u012b\1\u012c\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a"+
    "\1\u012f\3\u010a\11\0\1\u0195\40\0\6\u010a\1\u0126\1\u0144"+
    "\3\u010a\1\u0128\1\u0174\1\u0129\1\u012a\1\u010a\1\u012b\1\u012c"+
    "\5\u010a\1\u012d\13\u010a\1\0\1\u012e\1\u010a\1\u012f\3\u010a"+
    "\17\0\1\u0196\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14784];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\13\1\1\11\5\1\6\11"+
    "\2\1\1\11\7\1\2\0\1\11\33\0\3\1\4\11"+
    "\2\1\13\0\1\1\7\0\1\11\25\0\2\1\26\0"+
    "\1\11\1\0\1\11\3\0\1\11\11\0\1\11\6\0"+
    "\1\1\1\0\4\1\27\0\2\11\11\0\1\11\3\0"+
    "\1\11\1\0\2\11\1\0\4\1\22\0\2\11\2\0"+
    "\1\1\3\0\2\11\6\0\1\11\1\0\2\1\6\0"+
    "\1\1\21\0\3\11\1\0\2\11\15\0\1\11\10\0"+
    "\1\11\1\0\1\11\36\0\1\11\17\0\2\11\3\0"+
    "\2\11\14\0\1\11\20\0\1\11\11\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	StringBuffer string = new StringBuffer();
	boolean blancos = false;
	
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}	
  
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext() + " Linea: "+(yyline+1) + " Columna: "+(yycolumn+1));
            }
          case 57: break;
          case 2: 
            { return symbol(Sym.entero, yytext());
            }
          case 58: break;
          case 3: 
            { /* se ignora */
            }
          case 59: break;
          case 4: 
            { return symbol(Sym.x_);
            }
          case 60: break;
          case 5: 
            { return symbol(Sym.y_);
            }
          case 61: break;
          case 6: 
            { string.setLength(0); yybegin(STRING);
            }
          case 62: break;
          case 7: 
            { return symbol(Sym.menorque);
            }
          case 63: break;
          case 8: 
            { blancos=false; string.setLength(0); yybegin(PLANO); return symbol(Sym.mayorque);
            }
          case 64: break;
          case 9: 
            { return symbol(Sym.igual);
            }
          case 65: break;
          case 10: 
            { return symbol(Sym.diagonal);
            }
          case 66: break;
          case 11: 
            { string.append( yytext() );
            }
          case 67: break;
          case 12: 
            { yybegin(YYINITIAL);
					   return symbol(Sym.tstring, string.toString());
            }
          case 68: break;
          case 13: 
            { string.append('\\');
            }
          case 69: break;
          case 14: 
            { string.append( yytext() ); blancos=true;
            }
          case 70: break;
          case 15: 
            { string.append( " " );
            }
          case 71: break;
          case 16: 
            { string.append( "" );
            }
          case 72: break;
          case 17: 
            { return symbol(Sym.id_);
            }
          case 73: break;
          case 18: 
            { return symbol(Sym.codigo, yytext());
            }
          case 74: break;
          case 19: 
            { string.append('\r');
            }
          case 75: break;
          case 20: 
            { string.append('\t');
            }
          case 76: break;
          case 21: 
            { string.append('\n');
            }
          case 77: break;
          case 22: 
            { string.append('\"');
            }
          case 78: break;
          case 23: 
            { return symbol(Sym.decimal, yytext());
            }
          case 79: break;
          case 24: 
            { return symbol(Sym.tam_);
            }
          case 80: break;
          case 25: 
            { return symbol(Sym.path_);
            }
          case 81: break;
          case 26: 
            { return symbol(Sym.tipo_);
            }
          case 82: break;
          case 27: 
            { return symbol(Sym.alto_);
            }
          case 83: break;
          case 28: 
            { return symbol(Sym.dato_);
            }
          case 84: break;
          case 29: 
            { return symbol(Sym.texto_);
            }
          case 85: break;
          case 30: 
            { return symbol(Sym.ancho_);
            }
          case 86: break;
          case 31: 
            { return symbol(Sym.color_);
            }
          case 87: break;
          case 32: 
            { return symbol(Sym.false_, yytext());
            }
          case 88: break;
          case 33: 
            { return symbol(Sym.borde_);
            }
          case 89: break;
          case 34: 
            { return symbol(Sym.boton_);
            }
          case 90: break;
          case 35: 
            { return symbol(Sym.minimo_);
            }
          case 91: break;
          case 36: 
            { return symbol(Sym.maximo_);
            }
          case 92: break;
          case 37: 
            { return symbol(Sym.accion_);
            }
          case 93: break;
          case 38: 
            { return symbol(Sym.enviar_);
            }
          case 94: break;
          case 39: 
            { return symbol(Sym.nombre_);
            }
          case 95: break;
          case 40: 
            { return symbol(Sym.fuente_);
            }
          case 96: break;
          case 41: 
            { yybegin(YYINITIAL); 
									//System.out.println("entra abrir"); 
									yypushback(yylength());
            }
          case 97: break;
          case 42: 
            { return symbol(Sym.ventana_);
            }
          case 98: break;
          case 43: 
            { return symbol(Sym.negrita_);
            }
          case 99: break;
          case 44: 
            { return symbol(Sym.control_);
            }
          case 100: break;
          case 45: 
            { return symbol(Sym.cursiva_);
            }
          case 101: break;
          case 46: 
            { return symbol(Sym.defecto_);
            }
          case 102: break;
          case 47: 
            { yybegin(YYINITIAL); 
										//System.out.println("value:"+yytext()); 
										yypushback(yylength()); 
										
										if(string.length()>=1 && blancos){
											//System.out.println(string.toString());
											return symbol(Sym.textoPlano, string.toString());
										}
            }
          case 103: break;
          case 48: 
            { return symbol(Sym.importar_);
            }
          case 104: break;
          case 49: 
            { return symbol(Sym.true_, yytext());
            }
          case 105: break;
          case 50: 
            { return symbol(Sym.multimedia_);
            }
          case 106: break;
          case 51: 
            { return symbol(Sym.referencia_);
            }
          case 107: break;
          case 52: 
            { return symbol(Sym.contenedor_);
            }
          case 108: break;
          case 53: 
            { return symbol(Sym.listadatos_);
            }
          case 109: break;
          case 54: 
            { return symbol(Sym.accionfinal_);
            }
          case 110: break;
          case 55: 
            { return symbol(Sym.accioninicial_);
            }
          case 111: break;
          case 56: 
            { return symbol(Sym.autoreproduccion_);
            }
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
