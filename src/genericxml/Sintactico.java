
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package genericxml;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\013\000\002\007\003\000\002\007\002\000" +
    "\002\006\003\000\002\006\002\000\002\010\004\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\015\000\002\012\014\000\002" +
    "\013\015\000\002\013\014\000\002\014\015\000\002\014" +
    "\014\000\002\015\015\000\002\015\014\000\002\016\015" +
    "\000\002\016\014\000\002\017\015\000\002\017\014\000" +
    "\002\020\015\000\002\020\014\000\002\021\015\000\002" +
    "\021\014\000\002\022\015\000\002\022\014\000\002\023" +
    "\015\000\002\023\014\000\002\024\003\000\002\024\002" +
    "\000\002\025\004\000\002\025\003\000\002\026\005\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\006\002\ufff7\014\015\001\002\000\006\002" +
    "\ufffc\014\ufffc\001\002\000\006\002\ufff1\014\ufff1\001\002" +
    "\000\006\002\ufff5\014\ufff5\001\002\000\006\002\uffec\014" +
    "\uffec\001\002\000\004\002\ufffe\001\002\000\004\002\000" +
    "\001\002\000\006\002\uffee\014\uffee\001\002\000\006\002" +
    "\ufff3\014\ufff3\001\002\000\006\002\uffeb\014\uffeb\001\002" +
    "\000\030\017\323\020\034\021\037\022\043\023\041\024" +
    "\036\025\040\026\033\027\044\030\042\031\035\001\002" +
    "\000\006\002\uffed\014\uffed\001\002\000\006\002\ufff2\014" +
    "\ufff2\001\002\000\006\002\ufff0\014\ufff0\001\002\000\006" +
    "\002\ufff8\014\032\001\002\000\006\002\ufff7\014\015\001" +
    "\002\000\004\002\026\001\002\000\006\002\uffef\014\uffef" +
    "\001\002\000\006\002\ufff4\014\ufff4\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\006\002\ufffd" +
    "\014\ufffd\001\002\000\006\002\ufff6\014\ufff6\001\002\000" +
    "\026\020\034\021\037\022\043\023\041\024\036\025\040" +
    "\026\033\027\044\030\042\031\035\001\002\000\056\013" +
    "\uffd5\032\050\033\075\034\071\035\060\036\062\037\070" +
    "\040\053\041\073\042\065\043\052\044\056\045\046\046" +
    "\045\047\061\050\066\051\047\052\074\053\057\054\072" +
    "\055\051\056\054\001\002\000\056\013\uffd5\032\050\033" +
    "\075\034\071\035\060\036\062\037\070\040\053\041\073" +
    "\042\065\043\052\044\056\045\046\046\045\047\061\050" +
    "\066\051\047\052\074\053\057\054\072\055\051\056\054" +
    "\001\002\000\056\013\uffd5\032\050\033\075\034\071\035" +
    "\060\036\062\037\070\040\053\041\073\042\065\043\052" +
    "\044\056\045\046\046\045\047\061\050\066\051\047\052" +
    "\074\053\057\054\072\055\051\056\054\001\002\000\056" +
    "\013\uffd5\032\050\033\075\034\071\035\060\036\062\037" +
    "\070\040\053\041\073\042\065\043\052\044\056\045\046" +
    "\046\045\047\061\050\066\051\047\052\074\053\057\054" +
    "\072\055\051\056\054\001\002\000\056\013\uffd5\032\050" +
    "\033\075\034\071\035\060\036\062\037\070\040\053\041" +
    "\073\042\065\043\052\044\056\045\046\046\045\047\061" +
    "\050\066\051\047\052\074\053\057\054\072\055\051\056" +
    "\054\001\002\000\056\013\uffd5\032\050\033\075\034\071" +
    "\035\060\036\062\037\070\040\053\041\073\042\065\043" +
    "\052\044\056\045\046\046\045\047\061\050\066\051\047" +
    "\052\074\053\057\054\072\055\051\056\054\001\002\000" +
    "\056\013\uffd5\032\050\033\075\034\071\035\060\036\062" +
    "\037\070\040\053\041\073\042\065\043\052\044\056\045" +
    "\046\046\045\047\061\050\066\051\047\052\074\053\057" +
    "\054\072\055\051\056\054\001\002\000\056\013\uffd5\032" +
    "\050\033\075\034\071\035\060\036\062\037\070\040\053" +
    "\041\073\042\065\043\052\044\056\045\046\046\045\047" +
    "\061\050\066\051\047\052\074\053\057\054\072\055\051" +
    "\056\054\001\002\000\056\013\uffd5\032\050\033\075\034" +
    "\071\035\060\036\062\037\070\040\053\041\073\042\065" +
    "\043\052\044\056\045\046\046\045\047\061\050\066\051" +
    "\047\052\074\053\057\054\072\055\051\056\054\001\002" +
    "\000\056\013\uffd5\032\050\033\075\034\071\035\060\036" +
    "\062\037\070\040\053\041\073\042\065\043\052\044\056" +
    "\045\046\046\045\047\061\050\066\051\047\052\074\053" +
    "\057\054\072\055\051\056\054\001\002\000\004\015\uffc5" +
    "\001\002\000\004\015\uffc6\001\002\000\004\015\uffc2\001" +
    "\002\000\004\015\uffd1\001\002\000\004\015\uffbe\001\002" +
    "\000\004\015\uffc8\001\002\000\004\015\uffcb\001\002\000" +
    "\004\015\uffbd\001\002\000\056\013\uffd6\032\050\033\075" +
    "\034\071\035\060\036\062\037\070\040\053\041\073\042" +
    "\065\043\052\044\056\045\046\046\045\047\061\050\066" +
    "\051\047\052\074\053\057\054\072\055\051\056\054\001" +
    "\002\000\004\015\uffc7\001\002\000\004\015\uffc0\001\002" +
    "\000\004\015\uffce\001\002\000\004\015\uffc4\001\002\000" +
    "\004\015\uffcd\001\002\000\056\013\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\001" +
    "\002\000\004\013\106\001\002\000\004\015\uffc9\001\002" +
    "\000\004\015\uffc3\001\002\000\004\015\076\001\002\000" +
    "\004\015\uffcc\001\002\000\004\015\uffcf\001\002\000\004" +
    "\015\uffbf\001\002\000\004\015\uffca\001\002\000\004\015" +
    "\uffc1\001\002\000\004\015\uffd0\001\002\000\016\004\077" +
    "\006\101\007\100\010\103\011\102\012\105\001\002\000" +
    "\056\013\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\001\002\000\056\013\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\001\002\000\056\013\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\001\002" +
    "\000\056\013\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000\056\013\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
    "\uffb9\056\uffb9\001\002\000\056\013\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\001" +
    "\002\000\056\013\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000\006\005" +
    "\110\014\ufff9\001\002\000\004\014\112\001\002\000\006" +
    "\002\ufffa\014\ufffa\001\002\000\004\014\117\001\002\000" +
    "\030\016\113\020\034\021\037\022\043\023\041\024\036" +
    "\025\040\026\033\027\044\030\042\031\035\001\002\000" +
    "\004\027\114\001\002\000\004\013\115\001\002\000\010" +
    "\002\ufff9\005\110\014\ufff9\001\002\000\006\002\uffdb\014" +
    "\uffdb\001\002\000\030\016\120\020\034\021\037\022\043" +
    "\023\041\024\036\025\040\026\033\027\044\030\042\031" +
    "\035\001\002\000\004\027\121\001\002\000\004\013\122" +
    "\001\002\000\010\002\ufff9\005\110\014\ufff9\001\002\000" +
    "\006\002\uffdc\014\uffdc\001\002\000\056\013\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\001\002\000\004\013\126\001\002\000\006\005\110" +
    "\014\ufff9\001\002\000\004\014\131\001\002\000\004\014" +
    "\136\001\002\000\030\016\132\020\034\021\037\022\043" +
    "\023\041\024\036\025\040\026\033\027\044\030\042\031" +
    "\035\001\002\000\004\022\133\001\002\000\004\013\134" +
    "\001\002\000\010\002\ufff9\005\110\014\ufff9\001\002\000" +
    "\006\002\uffe5\014\uffe5\001\002\000\030\016\137\020\034" +
    "\021\037\022\043\023\041\024\036\025\040\026\033\027" +
    "\044\030\042\031\035\001\002\000\004\022\140\001\002" +
    "\000\004\013\141\001\002\000\010\002\ufff9\005\110\014" +
    "\ufff9\001\002\000\006\002\uffe6\014\uffe6\001\002\000\004" +
    "\013\144\001\002\000\006\005\110\014\ufff9\001\002\000" +
    "\004\014\147\001\002\000\004\014\154\001\002\000\030" +
    "\016\150\020\034\021\037\022\043\023\041\024\036\025" +
    "\040\026\033\027\044\030\042\031\035\001\002\000\004" +
    "\030\151\001\002\000\004\013\152\001\002\000\010\002" +
    "\ufff9\005\110\014\ufff9\001\002\000\006\002\uffd9\014\uffd9" +
    "\001\002\000\030\016\155\020\034\021\037\022\043\023" +
    "\041\024\036\025\040\026\033\027\044\030\042\031\035" +
    "\001\002\000\004\030\156\001\002\000\004\013\157\001" +
    "\002\000\010\002\ufff9\005\110\014\ufff9\001\002\000\006" +
    "\002\uffda\014\uffda\001\002\000\004\013\162\001\002\000" +
    "\006\005\110\014\ufff9\001\002\000\004\014\165\001\002" +
    "\000\004\014\172\001\002\000\030\016\166\020\034\021" +
    "\037\022\043\023\041\024\036\025\040\026\033\027\044" +
    "\030\042\031\035\001\002\000\004\023\167\001\002\000" +
    "\004\013\170\001\002\000\010\002\ufff9\005\110\014\ufff9" +
    "\001\002\000\006\002\uffe3\014\uffe3\001\002\000\030\016" +
    "\173\020\034\021\037\022\043\023\041\024\036\025\040" +
    "\026\033\027\044\030\042\031\035\001\002\000\004\023" +
    "\174\001\002\000\004\013\175\001\002\000\010\002\ufff9" +
    "\005\110\014\ufff9\001\002\000\006\002\uffe4\014\uffe4\001" +
    "\002\000\004\013\200\001\002\000\006\005\110\014\ufff9" +
    "\001\002\000\004\014\203\001\002\000\004\014\210\001" +
    "\002\000\030\016\204\020\034\021\037\022\043\023\041" +
    "\024\036\025\040\026\033\027\044\030\042\031\035\001" +
    "\002\000\004\025\205\001\002\000\004\013\206\001\002" +
    "\000\010\002\ufff9\005\110\014\ufff9\001\002\000\006\002" +
    "\uffdf\014\uffdf\001\002\000\030\016\211\020\034\021\037" +
    "\022\043\023\041\024\036\025\040\026\033\027\044\030" +
    "\042\031\035\001\002\000\004\025\212\001\002\000\004" +
    "\013\213\001\002\000\010\002\ufff9\005\110\014\ufff9\001" +
    "\002\000\006\002\uffe0\014\uffe0\001\002\000\004\013\216" +
    "\001\002\000\006\005\110\014\ufff9\001\002\000\004\014" +
    "\221\001\002\000\004\014\226\001\002\000\030\016\222" +
    "\020\034\021\037\022\043\023\041\024\036\025\040\026" +
    "\033\027\044\030\042\031\035\001\002\000\004\021\223" +
    "\001\002\000\004\013\224\001\002\000\010\002\ufff9\005" +
    "\110\014\ufff9\001\002\000\006\002\uffe7\014\uffe7\001\002" +
    "\000\030\016\227\020\034\021\037\022\043\023\041\024" +
    "\036\025\040\026\033\027\044\030\042\031\035\001\002" +
    "\000\004\021\230\001\002\000\004\013\231\001\002\000" +
    "\010\002\ufff9\005\110\014\ufff9\001\002\000\006\002\uffe8" +
    "\014\uffe8\001\002\000\004\013\234\001\002\000\006\005" +
    "\110\014\ufff9\001\002\000\004\014\237\001\002\000\004" +
    "\014\244\001\002\000\030\016\240\020\034\021\037\022" +
    "\043\023\041\024\036\025\040\026\033\027\044\030\042" +
    "\031\035\001\002\000\004\024\241\001\002\000\004\013" +
    "\242\001\002\000\010\002\ufff9\005\110\014\ufff9\001\002" +
    "\000\006\002\uffe1\014\uffe1\001\002\000\030\016\245\020" +
    "\034\021\037\022\043\023\041\024\036\025\040\026\033" +
    "\027\044\030\042\031\035\001\002\000\004\024\246\001" +
    "\002\000\004\013\247\001\002\000\010\002\ufff9\005\110" +
    "\014\ufff9\001\002\000\006\002\uffe2\014\uffe2\001\002\000" +
    "\004\013\252\001\002\000\006\005\110\014\ufff9\001\002" +
    "\000\004\014\255\001\002\000\004\014\262\001\002\000" +
    "\030\016\256\020\034\021\037\022\043\023\041\024\036" +
    "\025\040\026\033\027\044\030\042\031\035\001\002\000" +
    "\004\031\257\001\002\000\004\013\260\001\002\000\010" +
    "\002\ufff9\005\110\014\ufff9\001\002\000\006\002\uffd7\014" +
    "\uffd7\001\002\000\030\016\263\020\034\021\037\022\043" +
    "\023\041\024\036\025\040\026\033\027\044\030\042\031" +
    "\035\001\002\000\004\031\264\001\002\000\004\013\265" +
    "\001\002\000\010\002\ufff9\005\110\014\ufff9\001\002\000" +
    "\006\002\uffd8\014\uffd8\001\002\000\004\013\270\001\002" +
    "\000\006\005\110\014\ufff9\001\002\000\004\014\273\001" +
    "\002\000\004\014\300\001\002\000\030\016\274\020\034" +
    "\021\037\022\043\023\041\024\036\025\040\026\033\027" +
    "\044\030\042\031\035\001\002\000\004\020\275\001\002" +
    "\000\004\013\276\001\002\000\010\002\ufff9\005\110\014" +
    "\ufff9\001\002\000\006\002\uffe9\014\uffe9\001\002\000\030" +
    "\016\301\020\034\021\037\022\043\023\041\024\036\025" +
    "\040\026\033\027\044\030\042\031\035\001\002\000\004" +
    "\020\302\001\002\000\004\013\303\001\002\000\010\002" +
    "\ufff9\005\110\014\ufff9\001\002\000\006\002\uffea\014\uffea" +
    "\001\002\000\004\013\306\001\002\000\006\005\110\014" +
    "\ufff9\001\002\000\004\014\311\001\002\000\004\014\316" +
    "\001\002\000\030\016\312\020\034\021\037\022\043\023" +
    "\041\024\036\025\040\026\033\027\044\030\042\031\035" +
    "\001\002\000\004\026\313\001\002\000\004\013\314\001" +
    "\002\000\010\002\ufff9\005\110\014\ufff9\001\002\000\006" +
    "\002\uffdd\014\uffdd\001\002\000\030\016\317\020\034\021" +
    "\037\022\043\023\041\024\036\025\040\026\033\027\044" +
    "\030\042\031\035\001\002\000\004\026\320\001\002\000" +
    "\004\013\321\001\002\000\010\002\ufff9\005\110\014\ufff9" +
    "\001\002\000\006\002\uffde\014\uffde\001\002\000\004\013" +
    "\324\001\002\000\006\005\110\014\ufff9\001\002\000\004" +
    "\014\326\001\002\000\004\016\327\001\002\000\004\017" +
    "\330\001\002\000\004\013\331\001\002\000\010\002\ufff9" +
    "\005\110\014\ufff9\001\002\000\006\002\ufffb\014\ufffb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\044\002\022\003\010\004\021\005\003\006" +
    "\007\010\020\011\005\012\024\013\012\014\016\015\004" +
    "\016\017\017\023\020\011\021\015\022\006\023\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\030\012\024\013\012\014\016\015\004" +
    "\016\017\017\023\020\011\021\015\022\006\023\013\001" +
    "\001\000\036\005\027\006\026\010\020\011\005\012\024" +
    "\013\012\014\016\015\004\016\017\017\023\020\011\021" +
    "\015\022\006\023\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\304\025\054\026\062\027\066\001\001\000" +
    "\012\024\266\025\054\026\062\027\066\001\001\000\012" +
    "\024\250\025\054\026\062\027\066\001\001\000\012\024" +
    "\232\025\054\026\062\027\066\001\001\000\012\024\214" +
    "\025\054\026\062\027\066\001\001\000\012\024\176\025" +
    "\054\026\062\027\066\001\001\000\012\024\160\025\054" +
    "\026\062\027\066\001\001\000\012\024\142\025\054\026" +
    "\062\027\066\001\001\000\012\024\124\025\054\026\062" +
    "\027\066\001\001\000\012\024\063\025\054\026\062\027" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\123" +
    "\027\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\106\001\001\000\032\010\110\011\005\012\024\013" +
    "\012\014\016\015\004\016\017\017\023\020\011\021\015" +
    "\022\006\023\013\001\001\000\002\001\001\000\030\011" +
    "\030\012\024\013\012\014\016\015\004\016\017\017\023" +
    "\020\011\021\015\022\006\023\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\126\001\001\000\032\010\127\011\005\012\024\013\012" +
    "\014\016\015\004\016\017\017\023\020\011\021\015\022" +
    "\006\023\013\001\001\000\030\011\030\012\024\013\012" +
    "\014\016\015\004\016\017\017\023\020\011\021\015\022" +
    "\006\023\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\144\001\001\000\032\010\145\011\005" +
    "\012\024\013\012\014\016\015\004\016\017\017\023\020" +
    "\011\021\015\022\006\023\013\001\001\000\030\011\030" +
    "\012\024\013\012\014\016\015\004\016\017\017\023\020" +
    "\011\021\015\022\006\023\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\162\001\001\000\032" +
    "\010\163\011\005\012\024\013\012\014\016\015\004\016" +
    "\017\017\023\020\011\021\015\022\006\023\013\001\001" +
    "\000\030\011\030\012\024\013\012\014\016\015\004\016" +
    "\017\017\023\020\011\021\015\022\006\023\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\200" +
    "\001\001\000\032\010\201\011\005\012\024\013\012\014" +
    "\016\015\004\016\017\017\023\020\011\021\015\022\006" +
    "\023\013\001\001\000\030\011\030\012\024\013\012\014" +
    "\016\015\004\016\017\017\023\020\011\021\015\022\006" +
    "\023\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\216\001\001\000\032\010\217\011\005\012" +
    "\024\013\012\014\016\015\004\016\017\017\023\020\011" +
    "\021\015\022\006\023\013\001\001\000\030\011\030\012" +
    "\024\013\012\014\016\015\004\016\017\017\023\020\011" +
    "\021\015\022\006\023\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\234\001\001\000\032\010" +
    "\235\011\005\012\024\013\012\014\016\015\004\016\017" +
    "\017\023\020\011\021\015\022\006\023\013\001\001\000" +
    "\030\011\030\012\024\013\012\014\016\015\004\016\017" +
    "\017\023\020\011\021\015\022\006\023\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\252\001" +
    "\001\000\032\010\253\011\005\012\024\013\012\014\016" +
    "\015\004\016\017\017\023\020\011\021\015\022\006\023" +
    "\013\001\001\000\030\011\030\012\024\013\012\014\016" +
    "\015\004\016\017\017\023\020\011\021\015\022\006\023" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\270\001\001\000\032\010\271\011\005\012\024" +
    "\013\012\014\016\015\004\016\017\017\023\020\011\021" +
    "\015\022\006\023\013\001\001\000\030\011\030\012\024" +
    "\013\012\014\016\015\004\016\017\017\023\020\011\021" +
    "\015\022\006\023\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\306\001\001\000\032\010\307" +
    "\011\005\012\024\013\012\014\016\015\004\016\017\017" +
    "\023\020\011\021\015\022\006\023\013\001\001\000\030" +
    "\011\030\012\024\013\012\014\016\015\004\016\017\017" +
    "\023\020\011\021\015\022\006\023\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\331\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Arbol arbol;
	public String resultado="";
	public int contador = 1;
	
	public Arbol getArbol(){
		return arbol;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= XML 
            {
              Object RESULT =null;
		int xmlleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xmlright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Arbol xml = (Arbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			parser.arbol = xml;
            System.out.println("genericXML OK");
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // XML ::= IMPORTS ETIQUETAS 
            {
              Arbol RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Etiqueta> r1 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Etiqueta> r2 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Arbol(r1, r2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("XML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // XML ::= ETIQUETAS 
            {
              Arbol RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Etiqueta> r1 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Arbol(null, r1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("XML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= IMPORTS IMPORT 
            {
              LinkedList<Etiqueta> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Etiqueta> r1 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r2 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1; RESULT.add(r2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IMPORT 
            {
              LinkedList<Etiqueta> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(r1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= menorque importar_ mayorque TEXTO_PLANO menorque diagonal importar_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.IMPORTAR, text, rleft+1, rright+1, null, null);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TEXTO_PLANO ::= textoPlano 
            {
              String RESULT =null;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TEXTO_PLANO ::= 
            {
              String RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ETIQUETAS ::= TAGS 
            {
              LinkedList<Etiqueta> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Etiqueta> r1 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ETIQUETAS ::= 
            {
              LinkedList<Etiqueta> RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TAGS ::= TAGS TAG 
            {
              LinkedList<Etiqueta> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Etiqueta> r1 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r2 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1; RESULT.add(r2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAGS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TAGS ::= TAG 
            {
              LinkedList<Etiqueta> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(r1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAGS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TAG ::= VENTANA 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TAG ::= CONTENEDOR 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TAG ::= TEXTO 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TAG ::= CONTROL 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TAG ::= LISTADATOS 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TAG ::= DATO 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TAG ::= DEFECTO 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TAG ::= MULTIMEDIA 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TAG ::= BOTON 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TAG ::= ENVIAR 
            {
              Etiqueta RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Etiqueta r1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAG",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VENTANA ::= menorque ventana_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal ventana_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.VENTANA, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VENTANA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VENTANA ::= menorque ventana_ ELEMENT mayorque TEXTO_PLANO menorque diagonal ventana_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.VENTANA, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VENTANA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENEDOR ::= menorque contenedor_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal contenedor_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.CONTENEDOR, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENEDOR ::= menorque contenedor_ ELEMENT mayorque TEXTO_PLANO menorque diagonal contenedor_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.CONTENEDOR, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TEXTO ::= menorque texto_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal texto_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.TEXTO, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TEXTO ::= menorque texto_ ELEMENT mayorque TEXTO_PLANO menorque diagonal texto_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.TEXTO, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTROL ::= menorque control_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal control_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.CONTROL, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTROL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTROL ::= menorque control_ ELEMENT mayorque TEXTO_PLANO menorque diagonal control_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.CONTROL, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTROL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTADATOS ::= menorque listadatos_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal listadatos_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.LISTADATOS, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTADATOS ::= menorque listadatos_ ELEMENT mayorque TEXTO_PLANO menorque diagonal listadatos_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.LISTADATOS, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DATO ::= menorque dato_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal dato_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.DATO, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DATO ::= menorque dato_ ELEMENT mayorque TEXTO_PLANO menorque diagonal dato_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.DATO, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFECTO ::= menorque defecto_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal defecto_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.DEFECTO, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEFECTO ::= menorque defecto_ ELEMENT mayorque TEXTO_PLANO menorque diagonal defecto_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.DEFECTO, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MULTIMEDIA ::= menorque multimedia_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal multimedia_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT = new Etiqueta(Etiqueta.Tipo.MULTIMEDIA, r2, rleft+1, rright+1, r3, r1);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIMEDIA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MULTIMEDIA ::= menorque multimedia_ ELEMENT mayorque TEXTO_PLANO menorque diagonal multimedia_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT = new Etiqueta(Etiqueta.Tipo.MULTIMEDIA, r2, rleft+1, rright+1, null, r1);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIMEDIA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BOTON ::= menorque boton_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal boton_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.BOTON, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOTON ::= menorque boton_ ELEMENT mayorque TEXTO_PLANO menorque diagonal boton_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.BOTON, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENVIAR ::= menorque enviar_ ELEMENT mayorque TEXTO_PLANO TAGS menorque diagonal enviar_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Etiqueta> r3 = (LinkedList<Etiqueta>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.ENVIAR, r2, rleft+1, rright+1, r3, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENVIAR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENVIAR ::= menorque enviar_ ELEMENT mayorque TEXTO_PLANO menorque diagonal enviar_ mayorque TEXTO_PLANO 
            {
              Etiqueta RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String err = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT = new Etiqueta(Etiqueta.Tipo.ENVIAR, r2, rleft+1, rright+1, null, r1);
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENVIAR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENT ::= ELEMENTOS 
            {
              LinkedList<Elemento> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENT ::= 
            {
              LinkedList<Elemento> RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTOS ::= ELEMENTOS ELEMENTO 
            {
              LinkedList<Elemento> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Elemento> r1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Elemento r2 = (Elemento)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r1; 
			if(r2.comprobarTipo())
				RESULT.add(r2);
			else
				System.out.println("Error! Tipo no valido para el parametro "+r2.getTipo().toString()+". Linea:"+(r2left+1));
			
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTOS ::= ELEMENTO 
            {
              LinkedList<Elemento> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Elemento r1 = (Elemento)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>(); 
			if(r1.comprobarTipo())
				RESULT.add(r1);
			else
				System.out.println("Error! Tipo no valido para el parametro "+r1.getTipo().toString()+". Linea:"+(r1left+1));
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTO ::= ELEMENTO_TAG igual VALORES 
            {
              Elemento RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Elemento.Tipo r1 = (Elemento.Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Elemento(r1,r2,r1left,r1right);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTO_TAG ::= id_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.ID;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTO_TAG ::= tipo_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.TIPO;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTO_TAG ::= color_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.COLOR;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO_TAG ::= accioninicial_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.ACCIONINICIAL;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO_TAG ::= accionfinal_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.ACCIONFINAL;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO_TAG ::= x_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.X;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO_TAG ::= y_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.Y;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO_TAG ::= alto_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.ALTO;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO_TAG ::= ancho_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.ANCHO;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO_TAG ::= borde_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.BORDE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTO_TAG ::= nombre_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.NOMBRE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO_TAG ::= fuente_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.FUENTE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTO_TAG ::= tam_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.TAM;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTO_TAG ::= negrita_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.NEGRITA;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTO_TAG ::= cursiva_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.CURSIVA;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTO_TAG ::= maximo_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.MAXIMO;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTO_TAG ::= minimo_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.MINIMO;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTO_TAG ::= accion_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.ACCION;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELEMENTO_TAG ::= referencia_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.REFERENCIA;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELEMENTO_TAG ::= path_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.PATH;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTO_TAG ::= autoreproduccion_ 
            {
              Elemento.Tipo RESULT =null;
		RESULT = Elemento.Tipo.AUTO_REPRODUCCION;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= tstring 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= entero 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Integer(r1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= decimal 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Double(r1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES ::= true_ 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Boolean(true);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORES ::= false_ 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =new Boolean(false);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORES ::= codigo 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
